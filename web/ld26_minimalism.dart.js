// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  get$first: function(_) {
    if ($.$eq(this.get$length(this), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    return this.elementAt$1(this, 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    return false;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.JSNull_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $length - t1;
    return $.JSNull_methods.$sub(t2, t1);
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        var t2;
        state0 = 0;
        if ($.$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || $.JSNull_methods.$ge(t2, $length))
          return $.$sub$n($length, t1);
        return $.JSNull_methods.$sub(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(1, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(2, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
        t1 = this.get$_startIndex();
      case 1:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 2:
        if (state0 === 2 || state0 === 0 && !(index < 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 2:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1) === true;
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$lt$n(count, 0) === true)
      throw $.wrapException($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, $.$add$ns(this._start, count), this._endOrLength, null);
  },
  $asListIterable: null,
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib0$_length,_index,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this.$asMappedIterable, 0), $.getRuntimeTypeArgument(this, this.$asMappedIterable, 1));
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_liblib0$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib0$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  $asIterator: function (S, T) { return [T]; }
};

$$.MappedListIterable = {"": "ListIterable;_liblib0$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib0$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib0$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    return $.WhereIterator$($.JSArray_methods.get$iterator(this._iterable), this._f, $.getRuntimeTypeArgument(this, this.$asWhereIterable, 0));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, $.$add$ns(this._skipCount, n), $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount, $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0) === true)
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i;
    for (t1 = this._iterator, i = 0; $.JSNumber_methods.$lt(i, this._skipCount); ++i)
      t1.moveNext$0();
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
  },
  $asIterator: null
};

$$.Symbol = {"": "Object;_name<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isSymbol && $.$eq(this._name, other._name) === true;
  },
  get$hashCode: function(_) {
    var t1 = $.get$hashCode$(this._name);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 536870911 & 664597 * t1;
  },
  $isSymbol: true,
  $isSymbol0: true
};

$$.ToString__emitPair_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.HashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  }
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, this.$asHashMapKeyIterable, 0));
  },
  contains$1: function(_, element) {
    var t1 = this._map;
    return t1.containsKey$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib$_current = null;
      return false;
    } else {
      this._liblib$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  }
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_next@,_previous@"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications, $.getRuntimeTypeArgument(this, this.$asLinkedHashMapKeyIterable, 0));
  },
  contains$1: function(_, element) {
    var t1 = this._map;
    return t1.containsKey$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib$_current = null;
        return false;
      } else {
        this._liblib$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  }
};

$$._symbolMapToStringMap_anon = {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_name(), value);
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t2 = t1.sb_0;
    t2.write$1(t2, key);
    t2 = t1.sb_0;
    t2.write$1(t2, ": ");
    t2 = t1.sb_0;
    t2.write$1(t2, $.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  },
  noSuchMethod$1: function(receiver, invocation) {
    throw $.wrapException($.NoSuchMethodError$(receiver, invocation.memberName, invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_bool;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_Null;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  addError$1: function(errorEvent) {
    throw $.wrapException($.UnimplementedError$("addError on isolate streams"));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function () { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id*,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId) === true)
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$add$ns(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true
};

$$._EventLoop = {"": "Object;events,activeTimerCount@",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      if (t1.containsKey$1(t1, $globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_run(this);
  },
  $isGameInitializer: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  set$id: function(_, i) {
    throw $.wrapException($.UnimplementedError$(null));
  },
  set$onmessage: function(_, f) {
    throw $.wrapException($.Exception_Exception("onmessage should not be set on MainManagerStub"));
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null
};

$$.IsolateNatives__processWorkerMessage_anon = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1, t2;
    t1 = this.entryPoint_0;
    t2 = this.replyTo_1;
    $.lazyPort = $.ReceivePortImpl$();
    $.send$2$x(t2, "spawned", $._Isolate_port().toSendPort$0());
    t1.call$0();
  },
  $isGameInitializer: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$(null);
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isGameInitializer: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isGameInitializer: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.$xor$n($.$xor$n($.$shl$n(this._workerId, 16), $.$shl$n(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isGameInitializer: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().get$currentContext(), this._id, this);
  },
  $isReceivePort: true
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i).__MessageTraverser__attached_info__ = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = t1.$index(t1, list);
        if (copy != null)
          return copy;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var copy, t2, i, t3;
        state0 = 0;
        copy = $.List_List(len, null);
        t2 = this._visited;
        t2.$indexSet(t2, list, copy);
        for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = t3;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len, null);
        for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
      case 3:
        var id, t2, i;
        state0 = 0;
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function(_) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$add$ns(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isGameInitializer: true
};

$$.JSArray = {"": "Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i) {
      if (i >= receiver.length || false)
        $.throwExpression($.RangeError$value(i));
      if ($.$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
    }
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  addAll$1: function(receiver, collection) {
    var t1, e;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      e = t1.get$current();
      if (!!receiver.fixed$length)
        $.throwExpression($.UnsupportedError$("add"));
      receiver.push(e);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      if (i >= receiver.length || false)
        $.throwExpression($.RangeError$value(i));
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      $.throwExpression($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      $.throwExpression($.RangeError$value(index));
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof end !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (typeof end !== "number" || Math.floor(end) !== end)
      throw $.wrapException($.ArgumentError$(end));
    if (end < start || end > receiver.length)
      throw $.wrapException($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$2$bailout: function(state0, start, end, receiver) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sort$1: function(receiver, compare) {
    var t1;
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("sort"));
    if (compare == null)
      compare = $.Comparable_compare;
    t1 = receiver.length - 1;
    if (t1 - 0 <= 32)
      $.Sort_insertionSort_(receiver, 0, t1, compare);
    else
      $.Sort__dualPivotQuicksort(receiver, 0, t1, compare);
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = receiver.length - 1;
    return $.Arrays_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i) {
      if (i >= receiver.length || false)
        $.throwExpression($.RangeError$value(i));
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    }
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result.toString$0(result);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$runtimeType: function(receiver) {
    return $.TypeImpl$($.getRuntimeTypeString(receiver));
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function () { return [null]; }, $asList: function () { return [null]; }, $asIterable: function () { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.JSInvocationMirror = {"": "Object;memberName,_internalName,_kind,_liblib7$_arguments,_namedArgumentNames,_namedIndices",
  get$isGetter: function() {
    return $.$eq(this._kind, 1);
  },
  get$isSetter: function() {
    return $.$eq(this._kind, 2);
  },
  get$isAccessor: function() {
    return $.$eq(this._kind, 0) !== true;
  },
  get$positionalArguments: function() {
    var list, t1, t2, t3, argumentCount, index;
    if (this.get$isGetter() === true)
      return;
    list = [];
    t1 = this._liblib7$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$positionalArguments$bailout(1, t1, list);
    t2 = t1.length;
    t3 = $.get$length$asx(this._namedArgumentNames);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    argumentCount = t2 - t3;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, t1, list) {
    var argumentCount, t2, index;
    argumentCount = $.$sub$n($.get$length$asx(t1), $.get$length$asx(this._namedArgumentNames));
    for (t2 = $.getInterceptor$asx(t1), index = 0; $.JSNumber_methods.$lt(index, argumentCount); ++index)
      list.push(t2.$index(t1, index));
    return list;
  },
  get$namedArguments: function() {
    var map, t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, i, t4, t5;
    if (this.get$isAccessor() === true)
      return;
    map = $.Map_Map($.Symbol0, null);
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(1, t1, map);
    namedArgumentCount = t1.length;
    t2 = this._liblib7$_arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(3, t1, map, namedArgumentCount, t2);
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    for (t3 = $.getInterceptor$ax(map), i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t4 = $.Symbol$unvalidated(t1[i]);
      t5 = namedArgumentsStartIndex + i;
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t3.$indexSet(map, t4, t2[t5]);
    }
    return map;
  },
  get$namedArguments$bailout: function(state0, t1, map, namedArgumentCount, t2) {
    switch (state0) {
      case 0:
        if (this.get$isAccessor() === true)
          return;
        map = $.Map_Map($.Symbol0, null);
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        namedArgumentCount = $.get$length$asx(t1);
      case 2:
        state0 = 0;
        t2 = this._liblib7$_arguments;
      case 3:
        var namedArgumentsStartIndex, t3, t4, t5, t6, i;
        state0 = 0;
        namedArgumentsStartIndex = $.$sub$n($.get$length$asx(t2), namedArgumentCount);
        for (t3 = $.getInterceptor$asx(t1), t4 = $.getInterceptor$ns(namedArgumentsStartIndex), t5 = $.getInterceptor$asx(t2), t6 = $.getInterceptor$ax(map), i = 0; $.JSNumber_methods.$lt(i, namedArgumentCount); ++i)
          t6.$indexSet(map, $.Symbol$unvalidated(t3.$index(t1, i)), t5.$index(t2, t4.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  },
  _invokeOn$1: function(object) {
    var interceptor, $name, $arguments, receiver, arguments0;
    interceptor = $.getInterceptor(object);
    $name = this._internalName;
    $arguments = this._liblib7$_arguments;
    if ($.interceptedNames.indexOf($name) === -1) {
      if (!($arguments != null && $arguments.constructor === Array))
        $arguments = $.List_List$from($arguments, true, null);
      receiver = object;
    } else {
      arguments0 = [object];
      $.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
      receiver = interceptor;
    }
    return receiver[$name].apply(receiver, $arguments);
  }
};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isGameInitializer: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isGameInitializer: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isGameInitializer: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw $.wrapException($.RangeError$(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$int;
  },
  $not: function(receiver) {
    return ~receiver >>> 0;
  },
  $isint: true,
  $isnum: true
};

$$.JSDouble = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$double;
  },
  $isdouble: true,
  $isnum: true
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isTypeImpl)
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true,
  $isType: true
};

$$.JSString = {"": "Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    if (typeof pattern === "string")
      return receiver.split(pattern);
    else if (typeof pattern === "object" && pattern !== null && !!$.getInterceptor(pattern).$isJSSyntaxRegExp)
      return receiver.split(pattern._nativeRegExp);
    else
      throw $.wrapException("String.split(Pattern) UNIMPLEMENTED");
  },
  startsWith$1: function(receiver, other) {
    var otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSNumber_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  indexOf$2: function(receiver, other, start) {
    if (other == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  lastIndexOf$2: function(receiver, other, start) {
    var t1;
    if (other == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (start != null) {
      if (typeof start !== "number")
        throw $.wrapException($.ArgumentError$(start));
      if (start < 0)
        return -1;
      t1 = receiver.length;
      if (start >= t1) {
        if (other === "")
          return t1;
        start = t1 - 1;
      } else
        start = start;
    } else
      start = receiver.length - 1;
    return receiver.lastIndexOf(other, start);
  },
  lastIndexOf$1: function($receiver, other) {
    return this.lastIndexOf$2($receiver, other, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      $.throwExpression($.ArgumentError$(null));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_String;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw $.wrapException($.ArgumentError$("negative max: " + max));
    if (max > 4294967295)
      max = 4294967295;
    return Math.random() * max >>> 0;
  },
  nextDouble$0: function() {
    return Math.random();
  },
  nextBool$0: function() {
    return Math.random() < 0.5;
  }
};

$$._InstanceMirror = {"": "InstanceMirror;reflectee",
  delegate$1: function(invocation) {
    return invocation._invokeOn$1(this.reflectee);
  },
  toString$0: function(_) {
    return "InstanceMirror(" + $.S(this.reflectee) + ")";
  }
};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression($.ArgumentError$(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$asx($.$index$asx(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test(str);
  },
  allMatches$1: function(_, str) {
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  start$1: function($receiver, arg0) {
    return this.start.call$1(arg0);
  },
  start$3: function($receiver, arg0, arg1, arg2) {
    return this.start.call$3(arg0, arg1, arg2);
  },
  end$0: function($receiver) {
    return this.end.call$0();
  },
  group$1: function(index) {
    return $.$index$asx(this._groups, index);
  },
  $index: function(_, index) {
    return $.$index$asx(this._groups, index);
  },
  $isMatch: true
};

$$._AllMatchesIterable = {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterableBase: function () { return [$.Match]; },
  $asIterable: function () { return [$.Match]; }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib7$_current",
  get$current: function() {
    return this._liblib7$_current;
  },
  moveNext$0: function() {
    this._liblib7$_current = this._re.firstMatch$1(this._str);
    return this._liblib7$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  get$end: function(_) {
    return this.start + this.pattern.length;
  },
  end$0: function($receiver) {
    return this.get$end($receiver).call$0();
  },
  $index: function(_, g) {
    if ($.$eq(g, 0) !== true)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  },
  start$1: function($receiver, arg0) {
    return this.start.call$1(arg0);
  },
  start$3: function($receiver, arg0, arg1, arg2) {
    return this.start.call$3(arg0, arg1, arg2);
  },
  $isMatch: true
};

$$.Future_Future$delayed_anon1 = {"": "Closure;",
  call$0: function() {
    return;
  },
  $isGameInitializer: true
};

$$.Future_Future$delayed_anon = {"": "Closure;box_0",
  call$1: function(_) {
    return this.box_0.computation_0.call$0();
  }
};

$$.Future_Future$delayed_anon0 = {"": "Closure;future_1",
  call$0: function() {
    return this.future_1._sendValue$1(null);
  },
  $isGameInitializer: true
};

$$._CompleterImpl = {"": "Object;future<,_isComplete<",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this.future._setError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future<,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this, null);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action, $.getRuntimeTypeArgument(this, this.$as_FutureImpl, 0));
    if (!this.get$_isComplete()) {
      whenFuture._nextListener = this._resultOrListeners;
      this._resultOrListeners = whenFuture;
    } else if (this.get$_hasValue())
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = (this._state & 4294967291) >>> 0;
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  get$_handleError: function() {
    return new $.BoundClosure$2(this, "_handleError$2");
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = future._asListener$0();
      t1._nextListener = this._resultOrListeners;
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  _FutureImpl$immediateError$2: function(error, stackTrace, T) {
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this._setError$1(error);
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  },
  $isGameInitializer: true
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  },
  $isGameInitializer: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isGameInitializer: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isGameInitializer: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isGameInitializer: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  }
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, this.$asStream, 0), null);
  },
  contains$1: function(_, match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_contains_anon0(future), t3);
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$(null);
    t1.subscription_0 = null;
    t2 = new $.Stream_forEach_anon(t1, action, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_forEach_anon0(future), t3);
    return future;
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.$int);
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_length_anon0(t1, future), t3);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_isEmpty_anon0(future), t3);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$([$.List, $.getRuntimeTypeArgument(this, this.$asStream, 0)]);
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$cancelOnError$onDone$onError(t1, true, new $.Stream_toList_anon0(result, future), t2);
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count, null);
  },
  get$first: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this.$asStream, 0));
    t1.subscription_0 = null;
    t2 = new $.Stream_first_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_first_anon0(future), t3);
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future, t3;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0) === true)
      throw $.wrapException($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this.$asStream, 0));
    t1.subscription_1 = null;
    t2 = new $.Stream_elementAt_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(t2, true, new $.Stream_elementAt_anon0(future), t3);
    return future;
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3));
  }
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  },
  $isGameInitializer: true
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    var t1;
    if (isMatch === true) {
      t1 = this.box_0.subscription_0;
      t1.cancel$0(t1);
      this.future_5._setValue$1(true);
    }
  }
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._setValue$1(false);
  },
  $isGameInitializer: true
};

$$.Stream_forEach_anon = {"": "Closure;box_0,action_1,future_2",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__anon(this.action_1, element), new $.Stream_forEach__anon0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  }
};

$$.Stream_forEach__anon = {"": "Closure;action_3,element_4",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  },
  $isGameInitializer: true
};

$$.Stream_forEach__anon0 = {"": "Closure;",
  call$1: function(_) {
  }
};

$$.Stream_forEach_anon0 = {"": "Closure;future_5",
  call$0: function() {
    this.future_5._setValue$1(null);
  },
  $isGameInitializer: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isGameInitializer: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isGameInitializer: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  }
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isGameInitializer: true
};

$$.Stream_first_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(value);
    return;
  }
};

$$.Stream_first_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("No elements"));
  },
  $isGameInitializer: true
};

$$.Stream_elementAt_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0) === true) {
      t1 = t1.subscription_1;
      t1.cancel$0(t1);
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  }
};

$$.Stream_elementAt_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  },
  $isGameInitializer: true
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$.StreamController = {"": "EventSink;stream",
  get$isPaused: function() {
    return this.stream.get$_isInputPaused();
  },
  get$hasListener: function() {
    return this.stream.get$_hasListener();
  },
  add$1: function(_, value) {
    var t1 = this.stream;
    return t1._liblib3$_add$1(t1, value);
  },
  addError$2: function(error, stackTrace) {
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this.stream._addError$1(error);
  },
  addError$1: function(error) {
    return this.addError$2(error, null);
  },
  close$0: function(_) {
    this.stream._close$0();
  },
  $asEventSink: null
};

$$._SingleControllerStream = {"": "_SingleStreamImpl;_onListen,_onPause,_onResume,_onCancel,_subscriber,_state,_pendingEvents",
  _runGuarded$1: function(notificationHandler) {
    var e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      notificationHandler.call$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  },
  _onSubscriptionStateChange$0: function() {
    this._runGuarded$1(this.get$_hasListener() === true ? this._onListen : this._onCancel);
  },
  _onPauseStateChange$0: function() {
    this._runGuarded$1(this.get$_isPaused() === true ? this._onPause : this._onResume);
  },
  $as_SingleStreamImpl: null
};

$$._throwDelayed_anon = {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && t3.$eq(trace, t1) !== true)
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  },
  $isGameInitializer: true
};

$$._StreamImpl = {"": "Stream;_state@",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription;
    if (this.get$_isComplete() === true)
      return $._DoneSubscription$(onDone, null);
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    subscription = this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    this._addListener$1(subscription);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _liblib3$_add$1: function(_, value) {
    if (this.get$_liblib3$_isClosed() === true)
      throw $.wrapException($.StateError$("Sending on closed stream"));
    if (this.get$_mayFireState() !== true) {
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this.$as_StreamImpl, 0)));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this.$as_StreamImpl, 0)));
    else
      this._sendData$1(value);
    this._handlePendingEvents$0();
  },
  _addError$1: function(error) {
    if (this.get$_liblib3$_isClosed() === true)
      throw $.wrapException($.StateError$("Sending on closed stream"));
    if (this.get$_mayFireState() !== true) {
      this._addPendingEvent$1($._DelayedError$(error));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedError$(error));
    else
      this._sendError$1(error);
    this._handlePendingEvents$0();
  },
  _close$0: function() {
    if (this.get$_liblib3$_isClosed() === true)
      return;
    this._state = $.$or$n(this._state, 1);
    if (this.get$_mayFireState() !== true) {
      this._addPendingEvent$1($.C__DelayedDone);
      return;
    }
    if (this.get$_hasPendingEvent()) {
      this._addPendingEvent$1($._DelayedDone$());
      this._handlePendingEvents$0();
    } else
      this._sendDone$0();
  },
  get$_liblib3$_isClosed: function() {
    return $.$eq($.$and$n(this._state, 1), 0) !== true;
  },
  get$_isComplete: function() {
    return $.$eq($.$and$n(this._state, 2), 0) !== true;
  },
  get$_isPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isPaused$bailout(1, t1);
    return t1 >= 64;
  },
  get$_isPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 64);
  },
  get$_isInputPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isInputPaused$bailout(1, t1);
    return t1 >= 32;
  },
  get$_isInputPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 32);
  },
  get$_hasPendingResume: function() {
    return $.$eq($.$and$n(this._state, 32), 0) !== true;
  },
  get$_isInactive: function() {
    return $.$eq($.$and$n(this._state, 24), 0);
  },
  get$_isInCallback: function() {
    return $.$eq($.$and$n(this._state, 16), 0) !== true;
  },
  get$_isFiring: function() {
    return $.$eq($.$and$n(this._state, 8), 0) !== true;
  },
  get$_hasPendingEvent: function() {
    var t1 = this._pendingEvents;
    return t1 != null && t1.get$isEmpty(t1) !== true;
  },
  get$_mayFireState: function() {
    return $.$eq($.$and$n(this._state, 4294967256), 0);
  },
  _updatePauseCount$1: function(by) {
    var oldState, t1;
    oldState = this._state;
    t1 = $.getInterceptor$n(by);
    if (t1.$ge(by, 0) === true)
      this._state = $.$add$ns(oldState, t1.$shl(by, 6));
    else
      this._state = $.$sub$n(oldState, $.$shl$n(t1.$negate(by), 6));
  },
  _setClosed$0: function() {
    this._state = $.$or$n(this._state, 1);
  },
  _liblib3$_pause$2: function(listener, resumeSignal) {
    var wasInputPaused, wasPaused;
    if (!listener.get$_isSubscribed())
      throw $.wrapException($.StateError$("Subscription has been canceled."));
    wasInputPaused = this.get$_isInputPaused();
    wasPaused = this.get$_isPaused();
    listener._incrementPauseCount$0();
    this._state = $.$and$n(this._state, 4294967263);
    this._updatePauseCount$1(1);
    if (resumeSignal != null)
      resumeSignal.whenComplete$1(new $._StreamImpl__pause_anon(this, listener));
    if (wasPaused !== true && this.get$_hasPendingEvent() && this._pendingEvents.get$isScheduled())
      this._pendingEvents.cancelSchedule$0();
    if (this.get$_isInactive() === true && wasInputPaused !== true) {
      this._checkCallbacks$2(true, false);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _liblib3$_resume$2: function(listener, fromEvent) {
    if (!listener.get$isPaused())
      return;
    listener._decrementPauseCount$0();
    this._updatePauseCount$1(-1);
    if (this.get$_isPaused() !== true)
      if (this.get$_hasPendingEvent()) {
        this._state = $.$or$n(this._state, 32);
        if (this.get$_isInactive() === true)
          if (fromEvent)
            this._handlePendingEvents$0();
          else
            this._pendingEvents.schedule$1(this);
      } else if (this.get$_isInactive() === true) {
        this._checkCallbacks$2(true, true);
        if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
          if (fromEvent)
            this._handlePendingEvents$0();
          else
            this._pendingEvents.schedule$1(this);
      }
  },
  _checkCallbacks$2: function(hadListener, wasPaused) {
    var hasListener, isPaused;
    if (this.get$_isInCallback() === true)
      return;
    if (this.get$_hasPendingResume() === true && !this.get$_hasPendingEvent())
      this._state = $.$xor$n(this._state, 32);
    this._state = $.$or$n(this._state, 16);
    for (; true; wasPaused = isPaused, hadListener = hasListener) {
      hasListener = this.get$_hasListener();
      isPaused = this.get$_isInputPaused();
      if (!$.$eq(hadListener, hasListener))
        this._onSubscriptionStateChange$0();
      else if ($.$eq(isPaused, wasPaused) !== true)
        this._onPauseStateChange$0();
      else {
        this._state = $.$xor$n(this._state, 16);
        return;
      }
    }
  },
  _onPauseStateChange$0: function() {
  },
  _onSubscriptionStateChange$0: function() {
  },
  _addPendingEvent$1: function($event) {
    var events;
    if (this._pendingEvents == null)
      this._pendingEvents = $._StreamImplEvents$();
    events = this._pendingEvents;
    events.add$1(events, $event);
    if (this.get$_isPaused() === true || this.get$_isFiring() === true)
      return;
    if (this.get$_isInCallback() === true) {
      this._pendingEvents.schedule$1(this);
      return;
    }
  },
  _handlePendingEvents$0: function() {
    if (!this.get$_hasPendingEvent())
      return;
    var events = this._pendingEvents;
    do {
      if (this.get$_isPaused() === true)
        return;
      if (events.get$isScheduled())
        events.cancelSchedule$0();
      events.handleNext$1(this);
    } while (events.get$isEmpty(events) !== true);
  },
  _sendData$1: function(value) {
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendData_anon(value));
  },
  _sendError$1: function(error) {
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendError_anon(error));
  },
  _sendDone$0: function() {
    this._state = $.$or$n(this._state, 2);
    if (this.get$_hasListener() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendDone_anon(this));
  },
  $asStream: null
};

$$._StreamImpl__pause_anon = {"": "Closure;this_0,listener_1",
  call$0: function() {
    this.this_0._liblib3$_resume$2(this.listener_1, true);
  },
  $isGameInitializer: true
};

$$._StreamImpl__sendData_anon = {"": "Closure;value_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    try {
      subscriber._sendData$1(this.value_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  }
};

$$._StreamImpl__sendError_anon = {"": "Closure;error_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    try {
      subscriber._sendError$1(this.error_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  }
};

$$._StreamImpl__sendDone_anon = {"": "Closure;this_0",
  call$1: function(subscriber) {
    var e, s, exception, t1;
    this.this_0._cancel$1(subscriber);
    try {
      subscriber._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $._throwDelayed(e, s);
    }

  }
};

$$._SingleStreamImpl = {"": "_StreamImpl;",
  get$_hasListener: function() {
    return this._subscriber != null;
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, this.$as_SingleStreamImpl, 0));
  },
  _addListener$1: function(subscription) {
    if (this.get$_hasListener() === true)
      throw $.wrapException($.StateError$("Stream already has subscriber."));
    this._updatePauseCount$1(-1);
    this._subscriber = subscription;
    subscription._setSubscribed$1(0);
    if (this.get$_isInactive() === true) {
      this._checkCallbacks$2(false, true);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(subscriber) {
    var t1, resumeCount;
    t1 = this._subscriber;
    if (t1 == null ? subscriber != null : t1 !== subscriber)
      return;
    this._subscriber = null;
    resumeCount = subscriber._setUnsubscribed$0();
    t1 = $.getInterceptor$n(resumeCount);
    this._updatePauseCount$1(this.get$_isComplete() === true ? t1.$negate(resumeCount) : $.$add$ns(t1.$negate(resumeCount), 1));
    if (this.get$_isInactive() === true) {
      this._checkCallbacks$2(true, $.$gt$n(resumeCount, 0));
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, subscription;
    wasInputPaused = this.get$_isInputPaused();
    subscription = this._subscriber;
    this._state = $.$xor$n(this._state, 12);
    action.call$1(subscription);
    this._state = $.$xor$n(this._state, 8);
    this._checkCallbacks$2(true, wasInputPaused);
  },
  _SingleStreamImpl$0: function(T) {
    this._updatePauseCount$1(1);
  },
  $as_StreamImpl: null
};

$$._GeneratedSingleStreamImpl = {"": "_SingleStreamImpl;_subscriber,_state,_pendingEvents",
  _GeneratedSingleStreamImpl$1: function(events, T) {
    this._pendingEvents = events;
    this._setClosed$0();
  },
  $as_SingleStreamImpl: null
};

$$._IterablePendingEvents = {"": "_PendingEvents;_liblib3$_iterator,_isDone,scheduleTimer",
  get$isEmpty: function(_) {
    return this._isDone;
  },
  handleNext$1: function(stream) {
    var e, s, t1, exception;
    if (this._isDone)
      throw $.wrapException($.StateError$("No events pending."));
    try {
      t1 = this._liblib3$_iterator;
      this._isDone = t1.moveNext$0() !== true;
      if (!this._isDone)
        stream._sendData$1(t1.get$current());
      else
        stream._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      stream._sendError$1($._asyncError(e, s));
      stream._sendDone$0();
      this._isDone = true;
    }

  },
  $as_PendingEvents: null
};

$$._StreamSubscriptionImpl = {"": "_StreamListener;_cancelOnError,_onData,_onError,_onDone,_source,_state,_nextLink,_previousLink",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(_, handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError)
      this._source._cancel$1(this);
  },
  _sendDone$0: function() {
    this._onDone$0();
  },
  cancel$0: function(_) {
    if (!this.get$_isSubscribed())
      return;
    this._source._cancel$1(this);
  },
  pause$1: function(_, resumeSignal) {
    if (!this.get$_isSubscribed())
      return;
    this._source._liblib3$_pause$2(this, resumeSignal);
  },
  get$pause: function(receiver) {
    return new $.Bound_pause__StreamSubscriptionImpl(this, "pause$1", receiver);
  },
  resume$0: function() {
    if (!this.get$_isSubscribed() || !this.get$isPaused())
      return;
    this._source._liblib3$_resume$2(this, false);
  },
  get$resume: function() {
    return new $.Bound_resume__StreamSubscriptionImpl(this, "resume$0");
  },
  $as_StreamListener: null
};

$$._DelayedEvent = {"": "Object;next*",
  next$0: function($receiver) {
    return this.next.call$0();
  }
};

$$._DelayedData = {"": "_DelayedEvent;value>,next",
  perform$1: function(stream) {
    stream._sendData$1(this.value);
  },
  $as_DelayedEvent: null
};

$$._DelayedError = {"": "_DelayedEvent;error,next",
  perform$1: function(stream) {
    stream._sendError$1(this.error);
  }
};

$$._DelayedDone = {"": "Object;",
  perform$1: function(stream) {
    stream._sendDone$0();
  },
  get$next: function(_) {
    return;
  },
  next$0: function($receiver) {
    return this.get$next($receiver).call$0();
  },
  set$next: function(_, _0) {
    throw $.wrapException($.StateError$("No events after a done."));
  }
};

$$._InternalLink = {"": "Object;",
  _InternalLink$0: function() {
    this._nextLink = this;
    this._previousLink = this;
  }
};

$$._StreamListener = {"": "_InternalLink;_state@",
  get$isPaused: function() {
    return this._state >= 8;
  },
  get$_isSubscribed: function() {
    return (this._state & 1) !== 0;
  },
  _setSubscribed$1: function(eventIdBit) {
    this._state = (1 | eventIdBit << 2) >>> 0;
  },
  _setUnsubscribed$0: function() {
    var timesPaused = $.JSNumber_methods.$shr(this._state, 3);
    this._state = 0;
    return timesPaused;
  },
  _incrementPauseCount$0: function() {
    this._state = this._state + 8;
  },
  _decrementPauseCount$0: function() {
    this._state = this._state - 8;
  },
  $as_InternalLink: null
};

$$._PendingEvents = {"": "Object;scheduleTimer?",
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  schedule$1: function(stream) {
    var t1, milliseconds;
    if (this.get$isScheduled())
      return;
    t1 = new $._PendingEvents_schedule_anon(this, stream);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this.scheduleTimer = $.TimerImpl$(milliseconds, t1);
  },
  cancelSchedule$0: function() {
    var t1 = this.scheduleTimer;
    t1.cancel$0(t1);
    this.scheduleTimer = null;
  }
};

$$._PendingEvents_schedule_anon = {"": "Closure;this_0,stream_1",
  call$0: function() {
    this.this_0.set$scheduleTimer(null);
    this.stream_1._handlePendingEvents$0();
  },
  $isGameInitializer: true
};

$$._StreamImplEvents = {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,scheduleTimer",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      $.set$next$x(t1, $event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(stream) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $.get$next$x($event);
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(stream);
  }
};

$$._DoneSubscription = {"": "Object;_handler<,_timer,_liblib3$_pauseCount",
  _handler$0: function() {
    return this._handler.call$0();
  },
  _delayDone$0: function() {
    var t1, milliseconds;
    t1 = new $._DoneSubscription__delayDone_anon(this);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this._timer = $.TimerImpl$(milliseconds, t1);
  },
  get$_isComplete: function() {
    return this._timer == null && this._liblib3$_pauseCount === 0;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  pause$1: function(_, signal) {
    var t1;
    if (this.get$_isComplete())
      return;
    t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._timer = null;
    }
    this._liblib3$_pauseCount = this._liblib3$_pauseCount + 1;
    if (signal != null)
      signal.whenComplete$1(this.get$resume());
  },
  get$pause: function(receiver) {
    return new $.Bound_pause__DoneSubscription(this, "pause$1", receiver);
  },
  resume$0: function() {
    if (this.get$_isComplete())
      return;
    var t1 = this._liblib3$_pauseCount;
    if (t1 === 0)
      return;
    this._liblib3$_pauseCount = t1 - 1;
    if (this._liblib3$_pauseCount === 0)
      this._delayDone$0();
  },
  get$resume: function() {
    return new $.Bound_resume__DoneSubscription(this, "resume$0");
  },
  get$isPaused: function() {
    return this._liblib3$_pauseCount > 0;
  },
  cancel$0: function(_) {
    var t1;
    if (this.get$_isComplete())
      return;
    t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._timer = null;
    }
    this._liblib3$_pauseCount = 0;
  },
  _DoneSubscription$1: function(_handler, T) {
    this._delayDone$0();
  }
};

$$._DoneSubscription__delayDone_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.get$_handler() != null)
      t1._handler$0();
  },
  $isGameInitializer: true
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    $.cancel$0$x(this.subscription_0);
    this.future_1._setError$1(error);
  }
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 0), $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 1));
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 0), $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 1));
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  get$_handleData: function() {
    return new $.BoundClosure$2(this, "_handleData$2");
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure$2(this, "_handleError$2");
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$1(this, "_handleDone$1");
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(_, handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone, T) {
    if (this._onData == null)
      this._onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_cancelOnError,_subscription,_onData,_onError,_onDone",
  pause$1: function(_, resumeSignal) {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$1(t1, resumeSignal);
  },
  get$pause: function(receiver) {
    return new $.Bound_pause__ForwardingStreamSubscription(this, "pause$1", receiver);
  },
  resume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$resume: function() {
    return new $.Bound_resume__ForwardingStreamSubscription(this, "resume$0");
  },
  cancel$0: function(_) {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._subscription = null;
    }
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    var t1;
    this._onError$1(error);
    if (this._cancelOnError) {
      t1 = this._subscription;
      t1.cancel$0(t1);
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.Bound__handleDone__ForwardingStreamSubscription(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BaseStreamSubscription: function (S, T) { return [T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s));
      return;
    }

    sink._sendData$1(outputEvent);
  },
  get$_handleData: function() {
    return new $.BoundClosure$2(this, "_handleData$2");
  },
  $as_ForwardingStream: null
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$gt$n(this._remaining, 0) === true) {
      this._remaining = $.$sub$n(this._remaining, 1);
      return;
    }
    return sink._sendData$1(inputEvent);
  },
  get$_handleData: function() {
    return new $.BoundClosure$2(this, "_handleData$2");
  },
  _SkipStream$2: function(source, count, T) {
    if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
      throw $.wrapException($.ArgumentError$(count));
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isGameInitializer: true
};

$$.HashMap = {"": "Object;_liblib$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib$_length === 0;
  },
  get$keys: function(_) {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.HashMap_values_anon(this));
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib$_length = this._liblib$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = strings;
      strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib$_length = this._liblib$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = nums;
      nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        value = [key, value];
        if (value == null)
          value = rest;
        rest[hash] = value;
        this._liblib$_length = this._liblib$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib$_length = this._liblib$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib$_length = this._liblib$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._liblib$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = $.get$length$asx(keys), i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib$_length = this._liblib$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true,
  $asMap: null
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0), null);
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException($.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {"": "Object;_liblib$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if (this._liblib$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function(_) {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.LinkedHashMap_values_anon(this));
  },
  get$length: function(_) {
    return this._liblib$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib$_length = this._liblib$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib$_length = this._liblib$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $isMap: true,
  $asMap: null
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || $.JSNumber_methods.$gt(index, this.get$length(this)))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!$.getInterceptor(elements).$isList)) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      t1 = $.getInterceptor$ns($length);
      if ($.$ge$n(t1.$add($length, addCount), this._table.length) === true) {
        this._preGrow$1(t1.$add($length, addCount));
        $.JSArray_methods.setRange$4(this._table, $length, t1.$add($length, addCount), elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._table;
        t2 = this._tail;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        endSpace = t1.length - t2;
        t1 = $.getInterceptor$n(addCount);
        if (t1.$lt(addCount, endSpace)) {
          t1 = this._table;
          t2 = this._tail;
          $.JSArray_methods.setRange$4(t1, t2, $.$add$ns(t2, addCount), elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = t1.$sub(addCount, endSpace);
          t1 = this._table;
          t2 = this._tail;
          $.JSArray_methods.setRange$4(t1, t2, $.$add$ns(t2, endSpace), elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object) === true) {
        this._remove$1(this, i);
        return;
      }
    }
    this._modificationCount = this._modificationCount + 1;
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  addLast$1: function(element) {
    this._add$1(this, element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (expectedModificationCount !== this._modificationCount)
      throw $.wrapException($.ConcurrentModificationError$(this));
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(_, offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._remove$1$bailout(1, offset, t4, mask, startDistance);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, t1, mask, startDistance) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && $.JSInt_methods.$lt(startDistance, $.$and$n($.$sub$n(t1, offset), mask))) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 2:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      t2 = this._tail;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t2, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib$_position,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    if ($.$eq(this._liblib$_position, this._end) === true) {
      this._liblib$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib$_position;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib$_current = t2[t3];
    this._liblib$_position = $.$and$n($.$add$ns(this._liblib$_position, 1), t1._table.length - 1);
    return true;
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration + t1, 0, 0, 0);
  },
  $sub: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration - t1, 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return $.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return $.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $le: function(_, other) {
    return $.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return $.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true) {
        t3 = t1.sb_0;
        t3.write$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = t3.toString$0(t3);
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        t3.write$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t3.write$1(t3, t2[i]);
    }
    t1 = t1.sb_0;
    formalParameters = t1.toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, $.get$length$asx(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
            if ($.$gt$n(t1.i_1, 0) === true) {
              t4 = t1.sb_0;
              t4.write$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t4.write$1(t4, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, t4, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = t3.toString$0(t3);
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$asx(t2), i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              t4.write$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t4.write$1(t4, t3.$index(t2, i));
          }
          t1 = t1.sb_0;
          formalParameters = t1.toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.wrapException($.NoSuchMethodError$(this, invocation.memberName._name, invocation.get$positionalArguments(), $._symbolMapToStringMap(invocation.get$namedArguments()), null));
  },
  get$runtimeType: function(_) {
    return $.TypeImpl$($.getRuntimeTypeString(this));
  },
  $$dom_add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_add", "$$dom_add$1", 0, [$0], []));
  },
  $$dom_addEventListener$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
  },
  $$dom_put$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_put", "$$dom_put$1", 0, [$0], []));
  },
  $$dom_removeEventListener$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
  },
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  $div: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("/", "$div", 0, [$0], []));
  },
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  $mod: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("%", "$mod", 0, [$0], []));
  },
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  $negate: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("unary-", "$negate", 0, [], []));
  },
  $not: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("~", "$not", 0, [], []));
  },
  $or: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("|", "$or", 0, [$0], []));
  },
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  $xor: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  _requestAnimationFrame$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_requestAnimationFrame", "_requestAnimationFrame$1", 0, [$0], []));
  },
  _setImmediate$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setImmediate", "_setImmediate$1", 0, [$0], []));
  },
  abs$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("abs", "abs$0", 0, [], []));
  },
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  add$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$2", 0, [$0, $1], []));
  },
  addAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  allMatches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  arc$6: function($receiver, $0, $1, $2, $3, $4, $5) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("arc", "arc$6", 0, [$0, $1, $2, $3, $4, $5], []));
  },
  beginPath$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("beginPath", "beginPath$0", 0, [], []));
  },
  call$1$autoAdvance: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1$autoAdvance", 0, [$0], ["autoAdvance"]));
  },
  call$1$color: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1$color", 0, [$0], ["color"]));
  },
  call$1$growable: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1$growable", 0, [$0], ["growable"]));
  },
  call$2$attributes: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$attributes", 0, [$0, $1], ["attributes"]));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  call$3$onUpgradeNeeded$version: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onUpgradeNeeded$version", 0, [$0, $1, $2], ["onUpgradeNeeded", "version"]));
  },
  call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  call$5$fillStyle$strokeStyle: function($0, $1, $2, $3, $4) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$5$fillStyle$strokeStyle", 0, [$0, $1, $2, $3, $4], ["fillStyle", "strokeStyle"]));
  },
  call$7$fillStyle$strokeStyle: function($0, $1, $2, $3, $4, $5, $6) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$7$fillStyle$strokeStyle", 0, [$0, $1, $2, $3, $4, $5, $6], ["fillStyle", "strokeStyle"]));
  },
  cancel$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  circle$5$fillStyle$strokeStyle: function($0, $1, $2, $3, $4) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("circle", "circle$5$fillStyle$strokeStyle", 0, [$0, $1, $2, $3, $4], ["fillStyle", "strokeStyle"]));
  },
  clear$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clear", "clear$0", 0, [], []));
  },
  clear$1$color: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clear", "clear$1$color", 0, [$0], ["color"]));
  },
  clearRect$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clearRect", "clearRect$4", 0, [$0, $1, $2, $3], []));
  },
  clone$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clone", "clone$1", 0, [$0], []));
  },
  closePath$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("closePath", "closePath$0", 0, [], []));
  },
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  compareTo$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
  },
  contains$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contains", "contains$1", 0, [$0], []));
  },
  createGain$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createGain", "createGain$0", 0, [], []));
  },
  createObjectStore$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createObjectStore", "createObjectStore$1", 0, [$0], []));
  },
  decodeAudioData$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("decodeAudioData", "decodeAudioData$3", 0, [$0, $1, $2], []));
  },
  disable$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("disable", "disable$0", 0, [], []));
  },
  disabled$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("disabled", "disabled$1", 0, [$0], []));
  },
  drawImage$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("drawImage", "drawImage$3", 0, [$0, $1, $2], []));
  },
  elementAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
  },
  enable$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("enable", "enable$0", 0, [], []));
  },
  enabled$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("enabled", "enabled$1", 0, [$0], []));
  },
  end$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("end", "end$0", 0, [], []));
  },
  executeSql$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("executeSql", "executeSql$3", 0, [$0, $1, $2], []));
  },
  fill$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fill", "fill$0", 0, [], []));
  },
  fillRect$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fillRect", "fillRect$4", 0, [$0, $1, $2, $3], []));
  },
  fillText$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fillText", "fillText$3", 0, [$0, $1, $2], []));
  },
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  get$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("get", "get$1", 0, [$0], []));
  },
  get$_location: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_location", "get$_location", 1, [], []));
  },
  get$angle: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("angle", "get$angle", 1, [], []));
  },
  get$animationFrame: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("animationFrame", "get$animationFrame", 1, [], []));
  },
  get$button: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("button", "get$button", 1, [], []));
  },
  get$canvas: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("canvas", "get$canvas", 1, [], []));
  },
  get$client: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("client", "get$client", 1, [], []));
  },
  get$completed: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("completed", "get$completed", 1, [], []));
  },
  get$context2D: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("context2D", "get$context2D", 1, [], []));
  },
  get$currentTarget: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("currentTarget", "get$currentTarget", 1, [], []));
  },
  get$cx: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cx", "get$cx", 1, [], []));
  },
  get$cy: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cy", "get$cy", 1, [], []));
  },
  get$db: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("db", "get$db", 1, [], []));
  },
  get$duration: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("duration", "get$duration", 1, [], []));
  },
  get$ended: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ended", "get$ended", 1, [], []));
  },
  get$fillStyle: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fillStyle", "get$fillStyle", 1, [], []));
  },
  get$first: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("first", "get$first", 1, [], []));
  },
  get$font: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("font", "get$font", 1, [], []));
  },
  get$height: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("height", "get$height", 1, [], []));
  },
  get$hidden: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("hidden", "get$hidden", 1, [], []));
  },
  get$href: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("href", "get$href", 1, [], []));
  },
  get$id: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$index: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("index", "get$index", 1, [], []));
  },
  get$indexedDB: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexedDB", "get$indexedDB", 1, [], []));
  },
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$isInfinite: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isInfinite", "get$isInfinite", 1, [], []));
  },
  get$isNaN: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isNaN", "get$isNaN", 1, [], []));
  },
  get$isNegative: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isNegative", "get$isNegative", 1, [], []));
  },
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$key: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("key", "get$key", 1, [], []));
  },
  get$keys: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keys", "get$keys", 1, [], []));
  },
  get$label: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("label", "get$label", 1, [], []));
  },
  get$left: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("left", "get$left", 1, [], []));
  },
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$location: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("location", "get$location", 1, [], []));
  },
  get$navigator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("navigator", "get$navigator", 1, [], []));
  },
  get$next: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next", "get$next", 1, [], []));
  },
  get$objectStoreNames: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("objectStoreNames", "get$objectStoreNames", 1, [], []));
  },
  get$offset: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("offset", "get$offset", 1, [], []));
  },
  get$offsetParent: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("offsetParent", "get$offsetParent", 1, [], []));
  },
  get$onAbort: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onAbort", "get$onAbort", 1, [], []));
  },
  get$onBlocked: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onBlocked", "get$onBlocked", 1, [], []));
  },
  get$onCanPlay: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onCanPlay", "get$onCanPlay", 1, [], []));
  },
  get$onComplete: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onComplete", "get$onComplete", 1, [], []));
  },
  get$onError: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onError", "get$onError", 1, [], []));
  },
  get$onLoad: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onLoad", "get$onLoad", 1, [], []));
  },
  get$onMessage: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onMessage", "get$onMessage", 1, [], []));
  },
  get$onMouseDown: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onMouseDown", "get$onMouseDown", 1, [], []));
  },
  get$onMouseMove: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onMouseMove", "get$onMouseMove", 1, [], []));
  },
  get$onMouseUp: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onMouseUp", "get$onMouseUp", 1, [], []));
  },
  get$onSuccess: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onSuccess", "get$onSuccess", 1, [], []));
  },
  get$onTouchEnd: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onTouchEnd", "get$onTouchEnd", 1, [], []));
  },
  get$onTouchMove: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onTouchMove", "get$onTouchMove", 1, [], []));
  },
  get$onTouchStart: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onTouchStart", "get$onTouchStart", 1, [], []));
  },
  get$onUpgradeNeeded: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onUpgradeNeeded", "get$onUpgradeNeeded", 1, [], []));
  },
  get$page: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("page", "get$page", 1, [], []));
  },
  get$pattern: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pattern", "get$pattern", 1, [], []));
  },
  get$pause: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pause", "get$pause", 1, [], []));
  },
  get$ratio: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ratio", "get$ratio", 1, [], []));
  },
  get$readOnly: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readOnly", "get$readOnly", 1, [], []));
  },
  get$result: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("result", "get$result", 1, [], []));
  },
  get$rows: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("rows", "get$rows", 1, [], []));
  },
  get$size: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("size", "get$size", 1, [], []));
  },
  get$strokeStyle: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("strokeStyle", "get$strokeStyle", 1, [], []));
  },
  get$target: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("target", "get$target", 1, [], []));
  },
  get$top: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("top", "get$top", 1, [], []));
  },
  get$topLeft: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("topLeft", "get$topLeft", 1, [], []));
  },
  get$url: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("url", "get$url", 1, [], []));
  },
  get$userAgent: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("userAgent", "get$userAgent", 1, [], []));
  },
  get$value: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$values: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("values", "get$values", 1, [], []));
  },
  get$vertical: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("vertical", "get$vertical", 1, [], []));
  },
  get$width: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("width", "get$width", 1, [], []));
  },
  get$x: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("x", "get$x", 1, [], []));
  },
  get$y: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("y", "get$y", 1, [], []));
  },
  getBoundingClientRect$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getBoundingClientRect", "getBoundingClientRect$0", 0, [], []));
  },
  getComponentByClass$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getComponentByClass", "getComponentByClass$1", 0, [$0], []));
  },
  getEntities$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getEntities", "getEntities$1", 0, [$0], []));
  },
  getEntity$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getEntity", "getEntity$1", 0, [$0], []));
  },
  getNextAngle$5: function($0, $1, $2, $3, $4) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getNextAngle", "getNextAngle$5", 0, [$0, $1, $2, $3, $4], []));
  },
  getObject$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getObject", "getObject$1", 0, [$0], []));
  },
  getSafe$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getSafe", "getSafe$1", 0, [$0], []));
  },
  initialize$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("initialize", "initialize$0", 0, [], []));
  },
  item$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("item", "item$1", 0, [$0], []));
  },
  lastIndexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lastIndexOf", "lastIndexOf$1", 0, [$0], []));
  },
  lastIndexOf$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lastIndexOf", "lastIndexOf$2", 0, [$0, $1], []));
  },
  lineTo$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lineTo", "lineTo$2", 0, [$0, $1], []));
  },
  listen$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  listen$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  load$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("load", "load$0", 0, [], []));
  },
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  measureText$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("measureText", "measureText$1", 0, [$0], []));
  },
  moveTo$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("moveTo", "moveTo$2", 0, [$0, $1], []));
  },
  next$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next", "next$0", 0, [], []));
  },
  objectStore$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("objectStore", "objectStore$1", 0, [$0], []));
  },
  observe$2$attributes: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("observe", "observe$2$attributes", 0, [$0, $1], ["attributes"]));
  },
  open$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("open", "open$0", 0, [], []));
  },
  open$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("open", "open$2", 0, [$0, $1], []));
  },
  open$3$onUpgradeNeeded$version: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("open", "open$3$onUpgradeNeeded$version", 0, [$0, $1, $2], ["onUpgradeNeeded", "version"]));
  },
  openCursor$1$autoAdvance: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("openCursor", "openCursor$1$autoAdvance", 0, [$0], ["autoAdvance"]));
  },
  pause$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pause", "pause$1", 0, [$0], []));
  },
  play$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("play", "play$0", 0, [], []));
  },
  postMessage$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
  },
  postMessage$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("postMessage", "postMessage$2", 0, [$0, $1], []));
  },
  preventDefault$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("preventDefault", "preventDefault$0", 0, [], []));
  },
  put$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("put", "put$2", 0, [$0, $1], []));
  },
  quadraticCurveTo$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("quadraticCurveTo", "quadraticCurveTo$4", 0, [$0, $1, $2, $3], []));
  },
  readTransaction$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readTransaction", "readTransaction$2", 0, [$0, $1], []));
  },
  rect$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("rect", "rect$4", 0, [$0, $1, $2, $3], []));
  },
  register$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  remove$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  reset$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("reset", "reset$0", 0, [], []));
  },
  restore$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("restore", "restore$0", 0, [], []));
  },
  roundRect$7$fillStyle$strokeStyle: function($0, $1, $2, $3, $4, $5, $6) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("roundRect", "roundRect$7$fillStyle$strokeStyle", 0, [$0, $1, $2, $3, $4, $5, $6], ["fillStyle", "strokeStyle"]));
  },
  save$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("save", "save$0", 0, [], []));
  },
  save$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("save", "save$2", 0, [$0, $1], []));
  },
  send$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$1", 0, [$0], []));
  },
  send$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  set$angle: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("angle=", "set$angle", 2, [$0], []));
  },
  set$button: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("button=", "set$button", 2, [$0], []));
  },
  set$cx: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cx=", "set$cx", 2, [$0], []));
  },
  set$cy: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cy=", "set$cy", 2, [$0], []));
  },
  set$fillStyle: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fillStyle=", "set$fillStyle", 2, [$0], []));
  },
  set$font: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("font=", "set$font", 2, [$0], []));
  },
  set$globalAlpha: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("globalAlpha=", "set$globalAlpha", 2, [$0], []));
  },
  set$height: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("height=", "set$height", 2, [$0], []));
  },
  set$hidden: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("hidden=", "set$hidden", 2, [$0], []));
  },
  set$id: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id=", "set$id", 2, [$0], []));
  },
  set$length: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$lineWidth: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lineWidth=", "set$lineWidth", 2, [$0], []));
  },
  set$next: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next=", "set$next", 2, [$0], []));
  },
  set$onmessage: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onmessage=", "set$onmessage", 2, [$0], []));
  },
  set$pause: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pause=", "set$pause", 2, [$0], []));
  },
  set$src: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("src=", "set$src", 2, [$0], []));
  },
  set$strokeStyle: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("strokeStyle=", "set$strokeStyle", 2, [$0], []));
  },
  set$textBaseline: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("textBaseline=", "set$textBaseline", 2, [$0], []));
  },
  set$width: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("width=", "set$width", 2, [$0], []));
  },
  setImmediate$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setImmediate", "setImmediate$1", 0, [$0], []));
  },
  setRange$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setRange", "setRange$3", 0, [$0, $1, $2], []));
  },
  setRange$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setRange", "setRange$4", 0, [$0, $1, $2, $3], []));
  },
  skip$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("skip", "skip$1", 0, [$0], []));
  },
  split$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("split", "split$1", 0, [$0], []));
  },
  start$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("start", "start$1", 0, [$0], []));
  },
  start$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("start", "start$3", 0, [$0, $1, $2], []));
  },
  stop$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stop", "stop$0", 0, [], []));
  },
  stop$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stop", "stop$1", 0, [$0], []));
  },
  stroke$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stroke", "stroke$0", 0, [], []));
  },
  sublist$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sublist", "sublist$1", 0, [$0], []));
  },
  sublist$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sublist", "sublist$2", 0, [$0, $1], []));
  },
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  terminate$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("terminate", "terminate$0", 0, [], []));
  },
  then$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
  },
  toInt$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toInt", "toInt$0", 0, [], []));
  },
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  toList$1$growable: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$1$growable", 0, [$0], ["growable"]));
  },
  toLowerCase$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  toStringAsFixed$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toStringAsFixed", "toStringAsFixed$1", 0, [$0], []));
  },
  transaction$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("transaction", "transaction$2", 0, [$0, $1], []));
  },
  transaction$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("transaction", "transaction$3", 0, [$0, $1, $2], []));
  },
  translate$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("translate", "translate$2", 0, [$0, $1], []));
  },
  write$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("write", "write$1", 0, [$0], []));
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.MutationObserver_observe_override = {"": "Closure;parsedOptions_0",
  call$2: function(key, value) {
    if (value != null)
      this.parsedOptions_0[key] = value;
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  }
};

$$.Window_animationFrame_anon = {"": "Closure;completer_0",
  call$1: function(time) {
    var t1 = this.completer_0;
    t1.complete$1(t1, time);
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this.$as_EventStream, 0));
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_liblib1$_onData,_useCapture",
  cancel$0: function(_) {
    var t1;
    if (this.get$_canceled())
      return;
    t1 = this._liblib1$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._liblib1$_onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  pause$1: function(_, resumeSignal) {
    var t1;
    if (this.get$_canceled())
      return;
    this._pauseCount = this._pauseCount + 1;
    t1 = this._liblib1$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    if (resumeSignal != null)
      resumeSignal.whenComplete$1(this.get$resume());
  },
  get$pause: function(receiver) {
    return new $.Bound_pause__EventStreamSubscription(this, "pause$1", receiver);
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this.get$_canceled() || !this.get$_paused())
      return;
    this._pauseCount = this._pauseCount - 1;
    if (this._liblib1$_onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._liblib1$_onData, this._useCapture);
  },
  get$resume: function() {
    return new $.Bound_resume__EventStreamSubscription(this, "resume$0");
  },
  _tryResume$0: function() {
    if (this._liblib1$_onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._liblib1$_onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Point = {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    return $.$eq(this.x, other.x) === true && $.$eq(this.y, other.y) === true;
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $mul: function(_, factor) {
    return $.Point$($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  toInt$0: function(_) {
    return $.Point$($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) === true && $.$eq(this.top, t1.get$top(other)) === true && $.$eq(this.width, t1.get$width(other)) === true && $.$eq(this.height, t1.get$height(other)) === true;
  },
  intersection$1: function(_, rect) {
    var t1, t2, x0, x1, y0, y1;
    t1 = this.left;
    t2 = rect.left;
    x0 = $.max(t1, t2);
    x1 = $.min($.$add$ns(t1, this.width), $.$add$ns(t2, rect.width));
    if ($.$le$n(x0, x1) === true) {
      t1 = this.top;
      t2 = rect.top;
      y0 = $.max(t1, t2);
      y1 = $.min($.$add$ns(t1, this.height), $.$add$ns(t2, rect.height));
      if ($.$le$n(y0, y1) === true) {
        if (typeof x0 !== "number")
          throw $.iae(x0);
        if (typeof y0 !== "number")
          throw $.iae(y0);
        return $.Rect$(x0, y0, x1 - x0, y1 - y0);
      }
    }
    return;
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  get$topLeft: function(_) {
    return $.Point$(this.left, this.top);
  },
  $isRect: true,
  $asRect: null
};

$$._MicrotaskScheduler = {"": "Object;",
  _liblib1$_callback$0: function() {
    return this._liblib1$_callback.call$0();
  },
  maybeSchedule$0: function() {
    if (this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = true;
    this._schedule$0();
  },
  _onCallback$0: function() {
    if (!this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = false;
    this._liblib1$_callback$0();
  }
};

$$._PostMessageScheduler = {"": "_MicrotaskScheduler;_MICROTASK_MESSAGE,_nextMicrotaskFrameScheduled,_liblib1$_callback",
  _schedule$0: function() {
    $.postMessage$2$x(window, this._MICROTASK_MESSAGE, "*");
  },
  _handleMessage$1: function(e) {
    this._onCallback$0();
  },
  get$_handleMessage: function() {
    return new $.BoundClosure$1(this, "_handleMessage$1");
  },
  _PostMessageScheduler$1: function(callback) {
    $.get$onMessage$x($.window()).listen$1(this.get$_handleMessage());
  }
};

$$._MutationObserverScheduler = {"": "_MicrotaskScheduler;_observer,_dummy,_nextMicrotaskFrameScheduled,_liblib1$_callback",
  _schedule$0: function() {
    var t1, t2;
    t1 = this._dummy;
    t2 = $.getInterceptor$x(t1);
    t2.set$hidden(t1, t2.get$hidden(t1) !== true);
  },
  _handleMutation$2: function(mutations, observer) {
    this._onCallback$0();
  },
  get$_handleMutation: function() {
    return new $.BoundClosure$2(this, "_handleMutation$2");
  },
  _MutationObserverScheduler$1: function(callback) {
    this._observer = $.MutationObserver_MutationObserver(this.get$_handleMutation());
    this._dummy = $.DivElement_DivElement();
    $.observe$2$attributes$x(this._observer, this._dummy, true);
  }
};

$$._SetImmediateScheduler = {"": "_MicrotaskScheduler;_nextMicrotaskFrameScheduled,_liblib1$_callback",
  _schedule$0: function() {
    $._setImmediate$1$x(window, this.get$_handleImmediate());
  },
  _handleImmediate$0: function() {
    this._onCallback$0();
  },
  get$_handleImmediate: function() {
    return new $.Bound__handleImmediate__SetImmediateScheduler(this, "_handleImmediate$0");
  }
};

$$._WrappedList = {"": "Object;_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._list), null);
  },
  map$1: function(_, f) {
    return $.map$1$ax(this._list, f);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._list, element);
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._list, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._list, growable, null);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._list);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._list);
  },
  skip$1: function(_, n) {
    return $.skip$1$ax(this._list, n);
  },
  get$first: function(_) {
    return $.get$first$ax(this._list);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this._list, index);
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  addAll$1: function(_, elements) {
    $.addAll$1$ax(this._list, elements);
  },
  remove$1: function(_, element) {
    $.remove$1$ax(this._list, element);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._list);
  },
  $index: function(_, index) {
    return $.$index$asx(this._list, index);
  },
  $indexSet: function(_, index, value) {
    $.$indexSet$ax(this._list, index, value);
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._list, newLength);
  },
  lastIndexOf$2: function(_, element, start) {
    return $.lastIndexOf$2$asx(this._list, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  removeLast$0: function(_) {
    return $.removeLast$0$ax(this._list);
  },
  sublist$2: function(_, start, end) {
    return $.sublist$2$ax(this._list, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.setRange$4$ax(this._list, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(this, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$._WrappedIterator = {"": "Object;_liblib1$_iterator",
  moveNext$0: function() {
    return this._liblib1$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib1$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$location: function(_) {
    return $._LocationCrossFrame__createSafe(this._window.location);
  },
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  postMessage$3: function(_, message, targetOrigin, messagePorts) {
    var t1 = this._window;
    if (messagePorts == null)
      t1.postMessage(message, targetOrigin);
    else
      t1.postMessage(message, targetOrigin, messagePorts);
  },
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, null);
  }
};

$$._LocationCrossFrame = {"": "Object;_location>"};

$$._LocationWrapper = {"": "Object;_ptr",
  get$href: function(_) {
    return $._LocationWrapper__get(this._ptr, "href");
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true,
  $asLocation: null
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1) === true) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isGameInitializer: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isArrayBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isArrayBufferView)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList)) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t1 = this.readSlot_6;
      copy = t1.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t2 = e instanceof Array && !!!e.immutable$list;
      t3 = this.writeSlot_7;
      if (t2) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t1.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior)
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t1, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t1, copy0, $length, slot, t2, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isArrayBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isArrayBufferView)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t3, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t2 = this.readSlot_6;
              copy = t2.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t3 = e instanceof Array && !!!e.immutable$list;
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t3)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t1.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t2.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t2 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t2.$indexSet(copy0, j, t1.$index(e, j));
                                  t2.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t2 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        throw $.wrapException($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        key = t1.get$current();
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            key = t1.get$current();
            copy.$indexSet(copy, key, this.call$1(e[key]));
          }
          return copy;
        }
      case 2:
        var key, t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$._completeRequest_anon = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1 = this.completer_1;
    t1.complete$1(t1, $.get$result$x(this.request_0));
  }
};

$$._completeRequest_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$.ObjectStore__cursorStreamFromResult_anon = {"": "Closure;controller_0",
  call$1: function(e) {
    this.controller_0.addError$1(e);
  }
};

$$.ObjectStore__cursorStreamFromResult_anon0 = {"": "Closure;request_1,autoAdvance_2,controller_3",
  call$1: function(e) {
    var cursor, t1;
    cursor = $.get$result$x(this.request_1);
    t1 = this.controller_3;
    if (cursor == null)
      t1.close$0(t1);
    else {
      t1.add$1(t1, cursor);
      if (this.autoAdvance_2 && t1.get$hasListener() === true)
        $.next$0$x(cursor);
    }
  }
};

$$.Transaction_completed_anon = {"": "Closure;this_0,completer_1",
  call$1: function(_) {
    var t1 = this.completer_1;
    t1.complete$1(t1, $.get$db$x(this.this_0));
  }
};

$$.Transaction_completed_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$.Transaction_completed_anon1 = {"": "Closure;completer_3",
  call$1: function(e) {
    this.completer_3.completeError$1(e);
  }
};

$$.InstanceMirror = {"": "Object;"};

$$.main_anon = {"": "Closure;",
  call$0: function() {
    var wrapper, t1, audioManager, store;
    wrapper = $.cq("#gameCanvas", null);
    t1 = $.getInterceptor$x(wrapper);
    $.set$height$x(t1.get$canvas(wrapper), 600);
    $.set$width$x(t1.get$canvas(wrapper), 800);
    t1.set$textBaseline(wrapper, "top");
    t1.set$font(wrapper, "20px Verdana");
    t1.set$fillStyle(wrapper, "#140c1c");
    audioManager = $.createAudioManager();
    store = $.createStore();
    $._FutureImpl__FutureImpl$wait([$.load$0$x(audioManager.makeClip$2("achievement", "achievement.ogg")), $.load$0$x(audioManager.makeClip$2("dodgeballhit", "dodgeballhit.ogg")), $.load$0$x(audioManager.makeClip$2("blockdestroyed", "blockdestroyed.ogg")), $.load$0$x(audioManager.makeClip$2("paddlehit", "paddlehit.ogg")), store.open$0(store)], $.List).then$1(new $.main__anon(wrapper, audioManager, store));
  },
  $isGameInitializer: true
};

$$.main__anon = {"": "Closure;wrapper_0,audioManager_1,store_2",
  call$1: function(_) {
    var t1 = $.Game$(this.wrapper_0, this.audioManager_1, this.store_2);
    t1.start$0(t1);
  }
};

$$.GameState = {"": "Object;maxGames,_score,highScore?,_waited,achievementCount<,gameId,running@,hoverStart@,wrongButton@,wrongPositionClicked<",
  get$waited: function() {
    return this._waited;
  },
  set$score: function(score) {
    this._score = score;
    if ($.$gt$n(score, this.highScore) === true)
      this.highScore = score;
  },
  get$score: function() {
    return this._score;
  },
  getGroup$1: function($name) {
    return $name + "_" + $.S(this.gameId);
  },
  addWaited$1: function(time) {
    var t1 = this._waited;
    if (typeof time !== "number")
      throw $.iae(time);
    this._waited = t1 + time;
    this.set$score($.$add$ns(this.get$score(), time));
  },
  achievementEarned$0: function() {
    this.achievementCount = this.achievementCount + 1;
    this.set$score($.$add$ns(this.get$score(), 100));
  }
};

$$.Game = {"": "Object;gameState<,world<,lastTime?,wrapper,audioManager,store<",
  start$0: function(_) {
    var tm, gm, e, t1, t2;
    tm = $.TagManager$();
    gm = $.GroupManager$();
    this.world.addManager$1(tm);
    this.world.addManager$1(gm);
    e = this.world.createEntity$0();
    e.addComponent$1(this.createStartButtonMenuItem$0());
    e.addToWorld$0();
    e = this.world.createEntity$0();
    e.addComponent$1($.Position$(0, 0));
    e.addToWorld$0();
    tm.register$2(tm, e, "player");
    t1 = this.wrapper;
    t2 = this.gameState;
    this.world.addSystem$1($.MenuMouseInputSystem$(t1, t2));
    this.world.addSystem$1($.MouseMovementSystem$(t1));
    this.world.addSystem$1($.TimeIsScoreSystem$(t2));
    this.world.addSystem$1($.AchievementSystem$(t2));
    this.world.addSystem$1($.ExpirationSystem$());
    this.world.addSystem$1($.PlayerFollowingMovementSystem$());
    this.world.addSystem$1($.MovementSystem$());
    this.world.addSystem$1($.PongCollisionDetectionSystem$(t2));
    this.world.addSystem$1($.DodgeballScoringSystem$(t2));
    this.world.addSystem$1($.BackgroundRenderingSystem$(t1));
    this.world.addSystem$1($.RectangleRenderingSystem$(t1));
    this.world.addSystem$1($.CircleRenderingSystem$(t1));
    this.world.addSystem$1($.MenuRenderingSystem$(t1, t2));
    this.world.addSystem$1($.GameStateRenderingSystem$(t1, t2));
    this.world.addSystem$1($.AchievementRenderingSystem$(t1, t2));
    this.world.addSystem$1($.SoundSystem$(this.audioManager));
    this.world.addSystem$1($.HighScoreSavingSystem$(this.store, t2));
    this.world.addSystem$1($.GameSwitchingSystem$(t2));
    this.world.addSystem$1($.DodgeballSpawningSystem$(t2));
    t2 = this.world;
    t2.initialize$0(t2);
    $.get$animationFrame$x(window).then$1(new $.Game_start_anon(this));
  },
  createStartButtonMenuItem$0: function() {
    return $.MenuItem$(300, 250, 250, 100, "START GAME", new $.Game_createStartButtonMenuItem_anon(this), new $.Game_createStartButtonMenuItem_anon0(this));
  },
  gameLoop$1: function(time) {
    var t1, t2;
    if (typeof time !== "number")
      return this.gameLoop$1$bailout(1, time);
    t1 = this.world;
    t2 = this.lastTime;
    if (typeof t2 !== "number")
      return this.gameLoop$1$bailout(2, time, t1, t2);
    t1.delta = time - t2;
    this.lastTime = time;
    this.world.process$0();
    $.get$animationFrame$x(window).then$1(this.get$gameLoop());
  },
  gameLoop$1$bailout: function(state0, time, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.world;
        t2 = this.lastTime;
      case 2:
        state0 = 0;
        t1.delta = $.$sub$n(time, t2);
        this.lastTime = time;
        this.world.process$0();
        $.get$animationFrame$x(window).then$1(this.get$gameLoop());
    }
  },
  get$gameLoop: function() {
    return new $.BoundClosure$1(this, "gameLoop$1");
  }
};

$$.Game_start_anon = {"": "Closure;this_0",
  call$1: function(time) {
    var t1 = this.this_0;
    t1.set$lastTime(time);
    $.get$animationFrame$x(window).then$1(t1.get$gameLoop());
  }
};

$$.Game_createStartButtonMenuItem_anon = {"": "Closure;this_0",
  call$0: function() {
    this.this_0.get$gameState().set$hoverStart(true);
    return true;
  },
  $isGameInitializer: true
};

$$.Game_createStartButtonMenuItem_anon0 = {"": "Closure;this_1",
  call$1: function(button) {
    var t1, t2;
    t1 = $.$eq(button, 0);
    t2 = this.this_1;
    if (t1 === true)
      t2.get$gameState().set$running(true);
    else
      t2.get$gameState().set$wrongButton(true);
  }
};

$$.anon = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 1);
  }
};

$$.anon0 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 2);
  }
};

$$.anon1 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 3);
  }
};

$$.anon2 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 4);
  }
};

$$.anon3 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 5);
  }
};

$$.anon4 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 6);
  }
};

$$.anon5 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 7);
  }
};

$$.anon6 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 8);
  }
};

$$.anon7 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 9);
  }
};

$$.anon8 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 60);
  }
};

$$.anon9 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 300);
  }
};

$$.anon10 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 900);
  }
};

$$.anon11 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 1190);
  }
};

$$.anon12 = {"": "Closure;",
  call$1: function(gameState) {
    return $.$gt$n(gameState.get$waited(), 3600);
  }
};

$$.anon13 = {"": "Closure;",
  call$1: function(gameState) {
    return gameState.get$hoverStart();
  }
};

$$.anon14 = {"": "Closure;",
  call$1: function(gameState) {
    return gameState.get$wrongButton();
  }
};

$$.anon15 = {"": "Closure;",
  call$1: function(gameState) {
    return gameState.get$wrongPositionClicked();
  }
};

$$.anon16 = {"": "Closure;",
  call$1: function(gameState) {
    return gameState.get$running();
  }
};

$$.Achievement = {"": "Component;label>,desc<,index>", $isAchievement: true};

$$.ExpirationTimer = {"": "Component;max,current@",
  get$ratio: function(_) {
    var t1 = this.current;
    return t1 <= 0 ? 0 : t1 / this.max;
  },
  ExpirationTimer$1: function(max) {
    this.current = $.JSInt_methods.toDouble$0(this.max);
  },
  $isExpirationTimer: true
};

$$.Sound = {"": "Component;clipName<", $isSound: true};

$$.MenuItem = {"": "Component;x>,y>,width>,height>,label>,hoverAction,clickAction,hover@",
  hoverAction$0: function() {
    return this.hoverAction.call$0();
  },
  clickAction$1: function(arg0) {
    return this.clickAction.call$1(arg0);
  },
  $isMenuItem: true
};

$$.RectangleBody = {"": "Component;width*,height*", $isRectangleBody: true};

$$.CircleBody = {"": "Component;radius<", $isCircleBody: true};

$$.Position = {"": "Component;cx*,cy*", $isPosition: true};

$$.PlayerFollower = {"": "Component;minX<,maxX<,minY<,maxY<,maxVelocity<,horizontal<,vertical>", $isPlayerFollower: true};

$$.RenderStyle = {"": "Component;strokeStyle*,fillStyle*", $isRenderStyle: true};

$$.Velocity = {"": "Component;amount<,_angle",
  set$angle: function(_, value) {
    var t1 = $.$mod$n(value, 6.283185307179586);
    this._angle = t1;
    return t1;
  },
  get$angle: function(_) {
    return this._angle;
  },
  $isVelocity: true
};

$$.Destroyable = {"": "Component;", $isDestroyable: true};

$$.GameSwitchingSystem = {"": "IntervalEntitySystem;gameInitializer,blockColors,gm,tm,gameState<,currentGame,_acc,_delta,_interval,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    var t1, t2, t3;
    t1 = this.gameInitializer;
    t2 = this.get$initWaitGame();
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = this.get$initNotPong();
    if (4 >= t3)
      throw $.ioore(4);
    t1[4] = t2;
    t1[2] = this.get$initMultiPong();
    t1[3] = this.get$initBreakout();
    t1[1] = this.get$initDodgeball();
    this.gm = this.world.getManager$1($.Type_GroupManager);
    this.tm = this.world.getManager$1($.Type_TagManager);
  },
  processEntities$1: function(_) {
    var t1, currentEntities, t2, t3, t4, nextEntities;
    t1 = this.gameState;
    currentEntities = this.gm.getEntities$1(t1.getGroup$1("gamegroup"));
    t2 = $.getInterceptor$asx(currentEntities);
    if (t2.get$isEmpty(currentEntities) !== true)
      t2.forEach$1(currentEntities, new $.GameSwitchingSystem_processEntities_anon());
    t2 = this.currentGame + 1;
    this.currentGame = t2;
    t3 = this.gameInitializer;
    t4 = t3.length;
    this.currentGame = $.JSNumber_methods.$mod(t2, t4);
    t1.gameId = this.currentGame;
    nextEntities = this.gm.getEntities$1(t1.getGroup$1("gamegroup"));
    t1 = $.getInterceptor$asx(nextEntities);
    if (t1.get$isEmpty(nextEntities) !== true)
      t1.forEach$1(nextEntities, new $.GameSwitchingSystem_processEntities_anon0());
    else {
      t1 = this.currentGame;
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t4)
        throw $.ioore(t1);
      t3[t1].call$0();
    }
  },
  checkProcessing$0: function() {
    return this.gameState.running && $.IntervalEntitySystem.prototype.checkProcessing$0.call(this);
  },
  initWaitGame$0: function() {
  },
  get$initWaitGame: function() {
    return new $.Bound_initWaitGame_GameSwitchingSystem(this, "initWaitGame$0");
  },
  initNotPong$0: function() {
    var t1 = $.$div$n($.$mul$n($.get$random().nextDouble$0(), 3.141592653589793), 2);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.createPongBall$1(0.7853981633974483 + t1);
    this.createPaddle$4(400, 500, 100, 20);
    this.createPaddle$4(400, 100, 580, 20);
    this.createPaddle$4(100, 300, 20, 380);
    this.createPaddle$4(700, 300, 20, 380);
  },
  get$initNotPong: function() {
    return new $.Bound_initNotPong_GameSwitchingSystem(this, "initNotPong$0");
  },
  initMultiPong$0: function() {
    var t1 = $.$div$n($.$mul$n($.get$random().nextDouble$0(), 3.141592653589793), 2);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.createPongBall$1(0.7853981633974483 + t1);
    this.createPaddle$4(400, 500, 100, 20);
    this.createPaddle$4(400, 100, 100, 20);
    this.createPaddle$4(100, 300, 20, 100);
    this.createPaddle$4(700, 300, 20, 100);
  },
  get$initMultiPong: function() {
    return new $.Bound_initMultiPong_GameSwitchingSystem(this, "initMultiPong$0");
  },
  initBreakout$0: function() {
    var t1 = $.$div$n($.$mul$n($.get$random().nextDouble$0(), 3.141592653589793), 2);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.createPongBall$1(0.7853981633974483 + t1);
    this.createPaddle$4(400, 500, 100, 20);
    this.createPaddle$4(400, 100, 580, 20);
    this.createPaddle$4(100, 300, 20, 380);
    this.createPaddle$4(700, 300, 20, 380);
    this.createBreakoutBlocks$0();
  },
  get$initBreakout: function() {
    return new $.Bound_initBreakout_GameSwitchingSystem(this, "initBreakout$0");
  },
  initDodgeball$0: function() {
    this.createDodgeballPlayer$0();
  },
  get$initDodgeball: function() {
    return new $.Bound_initDodgeball_GameSwitchingSystem(this, "initDodgeball$0");
  },
  createDodgeballPlayer$0: function() {
    var e = this.world.createEntity$0();
    e.addComponent$1($.Position$(400, 300));
    e.addComponent$1($.CircleBody$(25));
    e.addComponent$1($.RenderStyle$("#d37d2c", null));
    e.addComponent$1($.PlayerFollower$(100, 700, 100, 500, 0.5, true, true));
    e.addToWorld$0();
    $.register$2$x(this.tm, e, "dodgeballplayer");
    $.add$2$ax(this.gm, e, this.gameState.getGroup$1("gamegroup"));
  },
  createPongBall$1: function(angle) {
    var e, t1;
    e = this.world.createEntity$0();
    e.addComponent$1($.Position$(400, 480));
    e.addComponent$1($.RectangleBody$(10, 10));
    e.addComponent$1($.RenderStyle$("#452434", null));
    e.addComponent$1($.Velocity$(0.25, angle));
    e.addToWorld$0();
    t1 = this.gameState;
    $.add$2$ax(this.gm, e, t1.getGroup$1("pongball"));
    $.add$2$ax(this.gm, e, t1.getGroup$1("gamegroup"));
  },
  createPaddle$4: function(cx, cy, width, height) {
    var e, t1, t2, t3;
    e = this.world.createEntity$0();
    e.addComponent$1($.Position$(cx, cy));
    e.addComponent$1($.RectangleBody$(width, height));
    e.addComponent$1($.RenderStyle$("#8696a2", "#452434"));
    t1 = 100 + $.JSInt_methods.$tdiv(height, 2) + $.JSInt_methods.$tdiv(width, 2);
    t2 = width > height && true;
    t3 = height > width && true;
    e.addComponent$1($.PlayerFollower$(t1, 800 - t1, t1, 600 - t1, 0.3, t2, t3));
    e.addToWorld$0();
    t3 = this.gameState;
    $.add$2$ax(this.gm, e, t3.getGroup$1("block"));
    $.add$2$ax(this.gm, e, t3.getGroup$1("gamegroup"));
  },
  createBreakoutBlocks$0: function() {
    var t1, t2, x, t3, fillStyle, y, e;
    for (t1 = this.gameState, t2 = this.blockColors, x = 135; x < 670; x += 60) {
      t3 = $.get$random().nextInt$1(t2.length);
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      fillStyle = t2[t3];
      for (t3 = x + 20, y = 150; y < 350; y += 30) {
        e = this.world.createEntity$0();
        e.addComponent$1($.Position$(t3, y + 20));
        e.addComponent$1($.RectangleBody$(50, 20));
        e.addComponent$1($.RenderStyle$(fillStyle, "#140c1c"));
        e.addComponent$1($.Destroyable$());
        e.addToWorld$0();
        $.add$2$ax(this.gm, e, t1.getGroup$1("block"));
        $.add$2$ax(this.gm, e, t1.getGroup$1("gamegroup"));
      }
    }
  }
};

$$.GameSwitchingSystem_processEntities_anon = {"": "Closure;",
  call$1: function(entity) {
    $.disable$0$x(entity);
  }
};

$$.GameSwitchingSystem_processEntities_anon0 = {"": "Closure;",
  call$1: function(entity) {
    $.enable$0$x(entity);
  }
};

$$.MenuMouseInputSystem = {"": "EntityProcessingSystem;mm,wrapper,gameState<,mousePos?,button*,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    var t1, t2;
    this.mm = $.ComponentMapper$($.Type_MenuItem, this.world, $.MenuItem);
    t1 = $.get$canvas$x(this.wrapper);
    t2 = $.getInterceptor$x(t1);
    t2.get$onMouseMove(t1).listen$1(new $.MenuMouseInputSystem_initialize_anon(this));
    t2.get$onMouseDown(t1).listen$1(new $.MenuMouseInputSystem_initialize_anon0(this));
    t2.get$onMouseUp(t1).listen$1(new $.MenuMouseInputSystem_initialize_anon1(this));
  },
  processEntity$1: function(e) {
    var t1, m;
    if (null != this.mousePos) {
      t1 = this.mm;
      m = t1.get$1(t1, e);
      t1 = $.getInterceptor$x(m);
      if ($.$lt$n(t1.get$x(m), this.mousePos.x) === true && $.$gt$n($.$add$ns(t1.get$x(m), t1.get$width(m)), this.mousePos.x) === true && $.$lt$n(t1.get$y(m), this.mousePos.y) === true && $.$gt$n($.$add$ns(t1.get$y(m), t1.get$height(m)), this.mousePos.y) === true) {
        m.set$hover(true);
        t1 = this.button;
        if (t1 != null)
          m.clickAction$1(t1);
        else
          m.hoverAction$0();
      } else {
        m.set$hover(false);
        if (this.button != null)
          this.gameState.wrongPositionClicked = true;
      }
    }
  },
  checkProcessing$0: function() {
    return !this.gameState.running;
  }
};

$$.MenuMouseInputSystem_initialize_anon = {"": "Closure;this_0",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_0;
    t2 = $.CqTools_mousePosition($event);
    t1.set$mousePos(t2);
    return t2;
  }
};

$$.MenuMouseInputSystem_initialize_anon0 = {"": "Closure;this_1",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_1;
    t2 = $.get$button$x($event);
    $.set$button$x(t1, t2);
    return t2;
  }
};

$$.MenuMouseInputSystem_initialize_anon1 = {"": "Closure;this_2",
  call$1: function($event) {
    $.set$button$x(this.this_2, null);
    return;
  }
};

$$.MouseMovementSystem = {"": "VoidEntitySystem;wrapper,mousePos?,pos,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    $.get$onMouseMove$x($.get$canvas$x(this.wrapper)).listen$1(new $.MouseMovementSystem_initialize_anon(this));
    this.pos = this.world.getManager$1($.Type_TagManager).getEntity$1("player").getComponentByClass$1($.Type_Position);
  },
  processSystem$0: function() {
    var t1 = this.mousePos;
    if (null != t1) {
      $.set$cx$x(this.pos, t1.x);
      $.set$cy$x(this.pos, this.mousePos.y);
    }
  }
};

$$.MouseMovementSystem_initialize_anon = {"": "Closure;this_0",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_0;
    t2 = $.CqTools_mousePosition($event);
    t1.set$mousePos(t2);
    return t2;
  }
};

$$.TimeIsScoreSystem = {"": "VoidEntitySystem;activeFor,gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  processSystem$0: function() {
    this.gameState.addWaited$1($.$div$n(this.world.delta, 1000));
  },
  checkProcessing$0: function() {
    var t1 = this.gameState;
    return t1.running && $.JSArray_methods.contains$1(this.activeFor, t1.gameId);
  }
};

$$.AchievementSystem = {"": "VoidEntitySystem;gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  processSystem$0: function() {
    var matches = $.List_List($, $.String);
    $.setRuntimeTypeInfo(matches, [$.String]);
    $.forEach$1$ax($.get$achievements(), new $.AchievementSystem_processSystem_anon(this, matches));
    $.JSArray_methods.forEach$1(matches, new $.AchievementSystem_processSystem_anon0());
  }
};

$$.AchievementSystem_processSystem_anon = {"": "Closure;this_0,matches_1",
  call$2: function(key, achievement) {
    var t1, t2, t3, e;
    t1 = $.getInterceptor$asx(achievement);
    t2 = t1.$index(achievement, "check");
    t3 = this.this_0;
    if (t2.call$1(t3.get$gameState()) === true) {
      e = t3.get$world().createEntity$0();
      e.addComponent$1($.Achievement$(t1.$index(achievement, "label"), t1.$index(achievement, "desc"), t3.get$gameState().get$achievementCount()));
      e.addComponent$1($.ExpirationTimer$(5000));
      e.addToWorld$0();
      e = t3.get$world().createEntity$0();
      e.addComponent$1($.Sound$("achievement"));
      e.addToWorld$0();
      t3.get$gameState().achievementEarned$0();
      this.matches_1.push(key);
    }
  }
};

$$.AchievementSystem_processSystem_anon0 = {"": "Closure;",
  call$1: function(key) {
    return $.remove$1$ax($.get$achievements(), key);
  }
};

$$.ExpirationSystem = {"": "EntityProcessingSystem;tm,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.tm = $.ComponentMapper$($.Type_ExpirationTimer, this.world, $.ExpirationTimer);
  },
  processEntity$1: function(e) {
    var t1, timer;
    t1 = this.tm;
    timer = t1.get$1(t1, e);
    if ($.$lt$n(timer.get$current(), 0) === true)
      e.deleteFromWorld$0();
    else
      timer.set$current($.$sub$n(timer.get$current(), this.world.delta));
  }
};

$$.PlayerFollowingMovementSystem = {"": "EntityProcessingSystem;playerPos,pm<,fm,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.playerPos = this.world.getManager$1($.Type_TagManager).getEntity$1("player").getComponentByClass$1($.Type_Position);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
    this.fm = $.ComponentMapper$($.Type_PlayerFollower, this.world, $.PlayerFollower);
  },
  processEntity$1: function(e) {
    var t1, pos, follower, targetPos, targetPos0, targetPos1, diffX, diffY, angle, changeX, changeY, t2, t3, t4;
    t1 = this.pm;
    pos = t1.get$1(t1, e);
    t1 = this.fm;
    follower = t1.get$1(t1, e);
    if (follower.get$horizontal() === true) {
      targetPos = $.get$cx$x(this.playerPos);
      targetPos0 = follower.get$minX();
      targetPos1 = follower.get$maxX();
      t1 = $.getInterceptor$n(targetPos);
      if (t1.$gt(targetPos, targetPos1) === true)
        targetPos = targetPos1;
      else if (t1.$lt(targetPos, targetPos0) === true)
        targetPos = targetPos0;
      diffX = $.$sub$n(targetPos, $.get$cx$x(pos));
    } else
      diffX = 0;
    if ($.get$vertical$x(follower) === true) {
      targetPos = $.get$cy$x(this.playerPos);
      targetPos0 = follower.get$minY();
      targetPos1 = follower.get$maxY();
      t1 = $.getInterceptor$n(targetPos);
      if (t1.$gt(targetPos, targetPos1) === true)
        targetPos = targetPos1;
      else if (t1.$lt(targetPos, targetPos0) === true)
        targetPos = targetPos0;
      diffY = $.$sub$n(targetPos, $.get$cy$x(pos));
    } else
      diffY = 0;
    if (typeof diffY !== "number")
      $.throwExpression($.ArgumentError$(diffY));
    if (typeof diffX !== "number")
      $.throwExpression($.ArgumentError$(diffX));
    angle = Math.atan2(diffY, diffX);
    t1 = follower.get$maxVelocity();
    changeX = $.$mul$n($.$mul$n(t1, Math.cos(angle)), this.world.delta);
    t1 = follower.get$maxVelocity();
    changeY = $.$mul$n($.$mul$n(t1, Math.sin(angle)), this.world.delta);
    t1 = $.getInterceptor$x(pos);
    t2 = t1.get$cx(pos);
    t3 = $.getInterceptor$n(changeX);
    if (t3.$lt(changeX, 0) === true)
      t4 = -1;
    else
      t4 = t3.$gt(changeX, 0) === true ? 1 : 0;
    t1.set$cx(pos, $.$add$ns(t2, t4 * $.min(t3.abs$0(changeX), $.abs$0$n(diffX))));
    t3 = t1.get$cy(pos);
    t2 = $.getInterceptor$n(changeY);
    if (t2.$lt(changeY, 0) === true)
      t4 = -1;
    else
      t4 = t2.$gt(changeY, 0) === true ? 1 : 0;
    t1.set$cy(pos, $.$add$ns(t3, t4 * $.min(t2.abs$0(changeY), $.abs$0$n(diffY))));
  }
};

$$.MovementSystem = {"": "EntityProcessingSystem;pm<,vm<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.vm = $.ComponentMapper$($.Type_Velocity, this.world, $.Velocity);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
  },
  processEntity$1: function(e) {
    var t1, v, p, t2, t3, t4, t5;
    t1 = this.vm;
    v = t1.get$1(t1, e);
    t1 = this.pm;
    p = t1.get$1(t1, e);
    t1 = $.getInterceptor$x(p);
    t2 = t1.get$cx(p);
    t3 = v.get$amount();
    t4 = $.getInterceptor$x(v);
    t5 = t4.get$angle(v);
    if (typeof t5 !== "number")
      $.throwExpression($.ArgumentError$(t5));
    t1.set$cx(p, $.$add$ns(t2, $.$mul$n($.$mul$n(t3, Math.cos(t5)), this.world.delta)));
    t2 = t1.get$cy(p);
    t3 = v.get$amount();
    t4 = $.$negate$n(t4.get$angle(v));
    if (typeof t4 !== "number")
      $.throwExpression($.ArgumentError$(t4));
    t1.set$cy(p, $.$add$ns(t2, $.$mul$n($.$mul$n(t3, Math.sin(t4)), this.world.delta)));
  }
};

$$.PongCollisionDetectionSystem = {"": "EntityProcessingSystem;gm,pm<,vm<,bm<,dm<,gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.gm = this.world.getManager$1($.Type_GroupManager);
    this.vm = $.ComponentMapper$($.Type_Velocity, this.world, $.Velocity);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
    this.bm = $.ComponentMapper$($.Type_RectangleBody, this.world, $.RectangleBody);
    this.dm = $.ComponentMapper$($.Type_Destroyable, this.world, $.Destroyable);
  },
  processEntity$1: function(e) {
    var t1, ballPos, ballBody, t2;
    t1 = this.pm;
    ballPos = t1.get$1(t1, e);
    t1 = this.bm;
    ballBody = t1.get$1(t1, e);
    t1 = this.gameState;
    $.forEach$1$ax(this.gm.getEntities$1(t1.getGroup$1("block")), new $.PongCollisionDetectionSystem_processEntity_anon(this, e, ballPos, ballBody));
    t2 = $.getInterceptor$x(ballPos);
    if ($.$lt$n(t2.get$cx(ballPos), -200) === true || $.$lt$n(t2.get$cy(ballPos), -200) === true || $.$gt$n(t2.get$cx(ballPos), 1000) === true || $.$gt$n(t2.get$cy(ballPos), 800) === true) {
      t1.set$score($.$sub$n(t1.get$score(), 10));
      e.deleteFromWorld$0();
    }
  },
  getNextAngle$5: function(ballPos, ballBody, paddlePos, paddleBody, ballVel) {
    var t1, t2, ballRect, intersection, nextAngle;
    t1 = $.getInterceptor$x(ballPos);
    t2 = $.getInterceptor$x(ballBody);
    ballRect = $.Rect$($.$sub$n(t1.get$cx(ballPos), $.$div$n(t2.get$width(ballBody), 2)), $.$sub$n(t1.get$cy(ballPos), $.$div$n(t2.get$height(ballBody), 2)), t2.get$width(ballBody), t2.get$height(ballBody));
    t2 = $.getInterceptor$x(paddlePos);
    t1 = $.getInterceptor$x(paddleBody);
    intersection = ballRect.intersection$1(ballRect, $.Rect$($.$sub$n(t2.get$cx(paddlePos), $.$div$n(t1.get$width(paddleBody), 2)), $.$sub$n(t2.get$cy(paddlePos), $.$div$n(t1.get$height(paddleBody), 2)), t1.get$width(paddleBody), t1.get$height(paddleBody)));
    if (this.isLeftOrRight$1(intersection)) {
      t1 = $.getInterceptor$x(ballVel);
      if ($.$lt$n($.abs$0$n($.$sub$n(intersection.width, intersection.height)), 6) === true) {
        t1 = t1.get$angle(ballVel);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t2 = $.$div$n($.$mul$n($.get$random().nextDouble$0(), 3.141592653589793), 2);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        nextAngle = 3.141592653589793 - t1 - 0.7853981633974483 + t2;
      } else {
        t1 = t1.get$angle(ballVel);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        nextAngle = 3.141592653589793 - t1;
      }
    } else {
      t1 = $.getInterceptor$x(ballVel);
      nextAngle = $.$lt$n($.abs$0$n($.$sub$n(intersection.width, intersection.height)), 6) === true ? $.$add$ns($.$sub$n($.$negate$n(t1.get$angle(ballVel)), 0.7853981633974483), $.$div$n($.$mul$n($.get$random().nextDouble$0(), 3.141592653589793), 2)) : $.$negate$n(t1.get$angle(ballVel));
    }
    return nextAngle;
  },
  isLeftOrRight$1: function(intersection) {
    if ($.$lt$n(intersection.width, intersection.height) === true)
      return true;
    return false;
  },
  isColliding$4: function(xDiff, yDiff, ballBody, paddleBody) {
    var t1, t2, t3, t4, t5;
    t1 = $.abs$0$n(xDiff);
    if (typeof t1 !== "number")
      return this.isColliding$4$bailout(1, yDiff, ballBody, paddleBody, t1);
    t2 = $.getInterceptor$x(ballBody);
    t3 = t2.get$width(ballBody);
    if (typeof t3 !== "number")
      return this.isColliding$4$bailout(2, yDiff, ballBody, paddleBody, t1, t2, t3);
    t3 /= 2;
    t4 = $.getInterceptor$x(paddleBody);
    t5 = t4.get$width(paddleBody);
    if (typeof t5 !== "number")
      return this.isColliding$4$bailout(3, yDiff, ballBody, paddleBody, t1, t2, t3, t5, t4);
    if (t1 <= t3 + t5 / 2) {
      t1 = $.abs$0$n(yDiff);
      if (typeof t1 !== "number")
        return this.isColliding$4$bailout(4, 0, ballBody, paddleBody, t1, t2, 0, 0, t4);
      t2 = t2.get$height(ballBody);
      if (typeof t2 !== "number")
        return this.isColliding$4$bailout(5, 0, 0, paddleBody, t1, t2, 0, 0, t4);
      t2 /= 2;
      t4 = t4.get$height(paddleBody);
      if (typeof t4 !== "number")
        return this.isColliding$4$bailout(6, 0, 0, 0, t1, t2, 0, 0, t4);
      t4 = t1 <= t2 + t4 / 2;
      t1 = t4;
    } else
      t1 = false;
    if (t1)
      return true;
    return false;
  },
  isColliding$4$bailout: function(state0, yDiff, ballBody, paddleBody, t1, t2, t3, t5, t4) {
    switch (state0) {
      case 0:
        t1 = $.abs$0$n(xDiff);
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(ballBody);
        t3 = t2.get$width(ballBody);
      case 2:
        state0 = 0;
        t3 = $.$div$n(t3, 2);
        t4 = $.getInterceptor$x(paddleBody);
        t5 = t4.get$width(paddleBody);
      case 3:
        state0 = 0;
      default:
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$le$n(t1, $.$add$ns(t3, $.$div$n(t5, 2))) === true)
          switch (state0) {
            case 0:
              t1 = $.abs$0$n(yDiff);
            case 4:
              state0 = 0;
              t2 = t2.get$height(ballBody);
            case 5:
              state0 = 0;
              t2 = $.$div$n(t2, 2);
              t4 = t4.get$height(paddleBody);
            case 6:
              state0 = 0;
              t4 = $.$le$n(t1, $.$add$ns(t2, $.$div$n(t4, 2))) === true;
              t1 = t4;
          }
        else
          t1 = false;
        if (t1)
          return true;
        return false;
    }
  }
};

$$.PongCollisionDetectionSystem_processEntity_anon = {"": "Closure;this_0,e_1,ballPos_2,ballBody_3",
  call$1: function(block) {
    var t1, paddlePos, paddleBody, t2, t3, t4, xDiff, yDiff, t5, t6, ballVel, nextAngle, t7, t8, t9, sound;
    t1 = this.this_0;
    paddlePos = $.get$1$x(t1.get$pm(), block);
    paddleBody = $.get$1$x(t1.get$bm(), block);
    t2 = this.ballPos_2;
    t3 = $.getInterceptor$x(t2);
    t4 = $.getInterceptor$x(paddlePos);
    xDiff = $.$sub$n(t3.get$cx(t2), t4.get$cx(paddlePos));
    yDiff = $.$sub$n(t3.get$cy(t2), t4.get$cy(paddlePos));
    t5 = this.ballBody_3;
    if (t1.isColliding$4(xDiff, yDiff, t5, paddleBody) === true) {
      t6 = t1.get$gameState();
      t6.set$score($.$add$ns(t6.get$score(), 1));
      ballVel = $.get$1$x(t1.get$vm(), this.e_1);
      nextAngle = t1.getNextAngle$5(t2, t5, paddlePos, paddleBody, ballVel);
      t6 = $.getInterceptor$x(ballVel);
      do {
        t7 = t3.get$cx(t2);
        t8 = ballVel.get$amount();
        t9 = t6.get$angle(ballVel);
        if (typeof t9 !== "number")
          $.throwExpression($.ArgumentError$(t9));
        t3.set$cx(t2, $.$sub$n(t7, $.$mul$n($.$mul$n(t8, Math.cos(t9)), t1.get$world().get$delta())));
        t7 = t3.get$cy(t2);
        t8 = ballVel.get$amount();
        t9 = $.$negate$n(t6.get$angle(ballVel));
        if (typeof t9 !== "number")
          $.throwExpression($.ArgumentError$(t9));
        t3.set$cy(t2, $.$sub$n(t7, $.$mul$n($.$mul$n(t8, Math.sin(t9)), t1.get$world().get$delta())));
      } while (t1.isColliding$4($.$sub$n(t3.get$cx(t2), t4.get$cx(paddlePos)), $.$sub$n(t3.get$cy(t2), t4.get$cy(paddlePos)), t5, paddleBody) === true);
      t6.set$angle(ballVel, nextAngle);
      if (null != t1.get$dm().getSafe$1(block)) {
        block.deleteFromWorld$0();
        sound = t1.get$world().createEntity$0();
        sound.addComponent$1($.Sound$("blockdestroyed"));
        sound.addToWorld$0();
      } else {
        sound = t1.get$world().createEntity$0();
        sound.addComponent$1($.Sound$("paddlehit"));
        sound.addToWorld$0();
      }
    }
  }
};

$$.DodgeballSpawningSystem = {"": "IntervalEntitySystem;activeFor,playerPos,gameState<,gm,_acc,_delta,_interval,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.gm = this.world.getManager$1($.Type_GroupManager);
    this.playerPos = this.world.getManager$1($.Type_TagManager).getEntity$1("player").getComponentByClass$1($.Type_Position);
  },
  processEntities$1: function(_) {
    var x, y, targetX, targetY, t1, t2, angle, e;
    if ($.get$random().nextBool$0() === true) {
      x = $.get$random().nextInt$1(800);
      y = $.get$random().nextBool$0() === true ? -100 : 700;
    } else if ($.get$random().nextBool$0() === true) {
      y = $.get$random().nextInt$1(600);
      x = -100;
    } else {
      y = $.get$random().nextInt$1(600);
      x = 900;
    }
    targetX = $.max($.min($.get$cx$x(this.playerPos), 700), 100);
    targetY = $.max($.min($.get$cy$x(this.playerPos), 500), 100);
    if (typeof y !== "number")
      throw $.iae(y);
    t1 = targetY - y;
    if (typeof x !== "number")
      throw $.iae(x);
    t2 = targetX - x;
    angle = Math.atan2(t1, t2);
    e = this.world.createEntity$0();
    e.addComponent$1($.Position$(x, y));
    e.addComponent$1($.Velocity$(0.5, -angle));
    e.addComponent$1($.CircleBody$(10));
    e.addComponent$1($.RenderStyle$("#d34549", null));
    e.addToWorld$0();
    t1 = this.gameState;
    $.add$2$ax(this.gm, e, t1.getGroup$1("pongball"));
    $.add$2$ax(this.gm, e, t1.getGroup$1("gamegroup"));
  },
  checkProcessing$0: function() {
    var t1 = this.gameState;
    return t1.running && $.JSArray_methods.contains$1(this.activeFor, t1.gameId) && $.IntervalEntitySystem.prototype.checkProcessing$0.call(this);
  }
};

$$.DodgeballScoringSystem = {"": "EntityProcessingSystem;activeFor,tm,pm<,vm<,bm<,dm<,gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.tm = this.world.getManager$1($.Type_TagManager);
    this.vm = $.ComponentMapper$($.Type_Velocity, this.world, $.Velocity);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
    this.bm = $.ComponentMapper$($.Type_CircleBody, this.world, $.CircleBody);
    this.dm = $.ComponentMapper$($.Type_Destroyable, this.world, $.Destroyable);
  },
  processEntity$1: function(e) {
    var t1, ballPos, ballBody, player, playerPos, playerBody, t2, sound;
    t1 = this.pm;
    ballPos = t1.get$1(t1, e);
    t1 = this.bm;
    ballBody = t1.get$1(t1, e);
    player = this.tm.getEntity$1("dodgeballplayer");
    t1 = this.pm;
    playerPos = t1.get$1(t1, player);
    t1 = this.bm;
    playerBody = t1.get$1(t1, player);
    t1 = $.getInterceptor$x(ballPos);
    t2 = $.getInterceptor$x(playerPos);
    if ($.Utils_doCirclesCollide(t1.get$cx(ballPos), t1.get$cy(ballPos), ballBody.get$radius(), t2.get$cx(playerPos), t2.get$cy(playerPos), playerBody.get$radius()) === true) {
      t1 = this.gameState;
      t1.set$score($.$sub$n(t1.get$score(), 10));
      e.deleteFromWorld$0();
      sound = this.world.createEntity$0();
      sound.addComponent$1($.Sound$("dodgeballhit"));
      sound.addToWorld$0();
    } else if ($.$lt$n(t1.get$cx(ballPos), -200) === true || $.$lt$n(t1.get$cy(ballPos), -200) === true || $.$gt$n(t1.get$cx(ballPos), 1000) === true || $.$gt$n(t1.get$cy(ballPos), 800) === true) {
      t1 = this.gameState;
      t1.set$score($.$add$ns(t1.get$score(), 1));
      e.deleteFromWorld$0();
    }
  },
  checkProcessing$0: function() {
    var t1 = this.gameState;
    return t1.running && $.JSArray_methods.contains$1(this.activeFor, t1.gameId);
  }
};

$$.BackgroundRenderingSystem = {"": "VoidEntitySystem;wrapper,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  processSystem$0: function() {
    $.clear$1$color$ax(this.wrapper, "#dfefd7");
  },
  begin$0: function() {
    return $.save$0$x(this.wrapper);
  },
  end$0: function(_) {
    return $.restore$0$x(this.wrapper);
  }
};

$$.GameStateRenderingSystem = {"": "VoidEntitySystem;LABEL_SCORE,LABEL_HIGHSCORE,LABEL_ACHIEVEMENTS,scoreLabelBounds,achievementsLabelBounds,highScoreLabelBounds,scoreY,achievementsY,wrapper,gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    var t1 = this.wrapper;
    this.scoreLabelBounds = t1.textBoundaries$1(this.LABEL_SCORE);
    this.achievementsLabelBounds = t1.textBoundaries$1(this.LABEL_ACHIEVEMENTS);
    this.highScoreLabelBounds = t1.textBoundaries$1(this.LABEL_HIGHSCORE);
    t1 = $.get$height$x(this.scoreLabelBounds);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.scoreY = 600 - t1;
    this.achievementsY = $.$sub$n(this.scoreY, $.get$height$x(this.achievementsLabelBounds));
  },
  processSystem$0: function() {
    var t1, t2, t3, text, t4;
    t1 = this.wrapper;
    t2 = $.get$width$x(this.scoreLabelBounds);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = $.getInterceptor$x(t1);
    t3.fillText$3(t1, this.LABEL_SCORE, 650 - t2, this.scoreY);
    t2 = $.get$width$x(this.achievementsLabelBounds);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3.fillText$3(t1, this.LABEL_ACHIEVEMENTS, 650 - t2, this.achievementsY);
    t2 = $.get$width$x(this.highScoreLabelBounds);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3.fillText$3(t1, this.LABEL_HIGHSCORE, 650 - t2, 0);
    t2 = this.gameState;
    text = $.toStringAsFixed$1$n(t2.get$score(), 3);
    t4 = $.get$width$x(t1.textBoundaries$1(text));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t3.fillText$3(t1, text, 800 - t4, this.scoreY);
    text = $.JSNumber_methods.toString$0(t2.achievementCount);
    t4 = $.get$width$x(t1.textBoundaries$1(text));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t3.fillText$3(t1, text, 800 - t4, this.achievementsY);
    text = $.toStringAsFixed$1$n(t2.highScore, 3);
    t2 = $.get$width$x(t1.textBoundaries$1(text));
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3.fillText$3(t1, text, 800 - t2, 0);
  },
  checkProcessing$0: function() {
    return this.gameState.running;
  },
  begin$0: function() {
    return $.save$0$x(this.wrapper);
  },
  end$0: function(_) {
    return $.restore$0$x(this.wrapper);
  }
};

$$.AchievementRenderingSystem = {"": "EntitySystem;ACHIEVEMENT_WIDTH,wrapper,labelLayer,descLayer,gameState<,isFirst,am<,tm,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    var t1, t2, t3;
    this.am = $.ComponentMapper$($.Type_Achievement, this.world, $.Achievement);
    this.tm = $.ComponentMapper$($.Type_ExpirationTimer, this.world, $.ExpirationTimer);
    t1 = this.ACHIEVEMENT_WIDTH + 20;
    t2 = $.cq(t1, 600);
    t3 = $.getInterceptor$x(t2);
    t3.set$textBaseline(t2, "top");
    t3.set$font(t2, "bold 16px Verdana");
    t3.set$fillStyle(t2, "#30346d");
    t3.set$lineWidth(t2, 3);
    this.labelLayer = t2;
    t1 = $.cq(t1, 600);
    t2 = $.getInterceptor$x(t1);
    t2.set$textBaseline(t1, "top");
    t2.set$fillStyle(t1, "#140c1c");
    t2.set$font(t1, "14px Verdana");
    this.descLayer = t1;
  },
  processEntities$1: function(entities) {
    var sorted = $.List_List($, $.Entity);
    $.setRuntimeTypeInfo(sorted, [$.Entity]);
    entities.forEach$1(entities, new $.AchievementRenderingSystem_processEntities_anon(sorted));
    $.JSArray_methods.sort$1(sorted, new $.AchievementRenderingSystem_processEntities_anon0(this));
    $.JSArray_methods.forEach$1(sorted, new $.AchievementRenderingSystem_processEntities_anon1(this));
  },
  processEntity$1: function(e) {
    var t1, achievement, ratio, t2, labelBounds, t3, height, t4, t5, t6, t7;
    t1 = this.am;
    achievement = t1.get$1(t1, e);
    t1 = this.tm;
    ratio = $.get$ratio$x(t1.get$1(t1, e));
    t1 = $.getInterceptor$x(achievement);
    t2 = this.ACHIEVEMENT_WIDTH;
    labelBounds = this.labelLayer.textBoundaries$2(t1.get$label(achievement), t2);
    t3 = $.getInterceptor$x(labelBounds);
    height = $.$add$ns($.$add$ns($.get$height$x(this.descLayer.textBoundaries$2(achievement.get$desc(), t2)), t3.get$height(labelBounds)), 5);
    if (this.isFirst === true) {
      this.isFirst = false;
      if ($.$lt$n(ratio, 0.1) === true) {
        t4 = this.labelLayer;
        t5 = $.getInterceptor$n(height);
        t6 = t5.$negate(height);
        if (typeof ratio !== "number")
          throw $.iae(ratio);
        t7 = (0.1 - ratio) / 0.1;
        $.translate$2$x(t4, 0, $.$mul$n(t6, t7));
        $.translate$2$x(this.descLayer, 0, $.$mul$n(t5.$negate(height), t7));
      }
    }
    t4 = $.getInterceptor$ns(height);
    $.translate$2$x(this.labelLayer, 0, t4.$add(height, 2));
    $.translate$2$x(this.descLayer, 0, t4.$add(height, 2));
    t5 = this.labelLayer;
    $.set$globalAlpha$x(t5, ratio);
    t5.roundRect$7$fillStyle$strokeStyle(2, t4.$negate(height), t2 + 16, height, 10, "#597dcf", "#d34549");
    t5.wrappedText$4(t1.get$label(achievement), 10, t4.$negate(height), t2);
    t1 = this.descLayer;
    $.set$globalAlpha$x(t1, ratio);
    t1.wrappedText$4(achievement.get$desc(), 10, $.$add$ns(t4.$negate(height), t3.get$height(labelBounds)), t2);
  },
  begin$0: function() {
    $.save$0$x(this.labelLayer);
    $.save$0$x(this.descLayer);
    this.isFirst = true;
  },
  end$0: function(_) {
    var t1, t2;
    $.restore$0$x(this.labelLayer);
    $.restore$0$x(this.descLayer);
    t1 = this.wrapper;
    t2 = $.getInterceptor$x(t1);
    t2.drawImage$3(t1, $.get$canvas$x(this.labelLayer), 0, 0);
    t2.drawImage$3(t1, $.get$canvas$x(this.descLayer), 0, 0);
    $.clear$0$ax(this.labelLayer);
    $.clear$0$ax(this.descLayer);
  },
  checkProcessing$0: function() {
    return true;
  }
};

$$.AchievementRenderingSystem_processEntities_anon = {"": "Closure;sorted_0",
  call$1: function(e) {
    return this.sorted_0.push(e);
  }
};

$$.AchievementRenderingSystem_processEntities_anon0 = {"": "Closure;this_1",
  call$2: function(e1, e2) {
    var t1, a1, a2;
    t1 = this.this_1;
    a1 = $.get$1$x(t1.get$am(), e1);
    a2 = $.get$1$x(t1.get$am(), e2);
    return $.$sub$n($.get$index$x(a1), $.get$index$x(a2));
  }
};

$$.AchievementRenderingSystem_processEntities_anon1 = {"": "Closure;this_2",
  call$1: function(e) {
    return this.this_2.processEntity$1(e);
  }
};

$$.MenuRenderingSystem = {"": "EntityProcessingSystem;mm,wrapper,gameState<,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.mm = $.ComponentMapper$($.Type_MenuItem, this.world, $.MenuItem);
  },
  processEntity$1: function(e) {
    var t1, m, t2, bounds, fillStyle, strokeStyle, textColor, t3, t4;
    t1 = this.mm;
    m = t1.get$1(t1, e);
    t1 = this.wrapper;
    t2 = $.getInterceptor$x(m);
    bounds = t1.textBoundaries$1(t2.get$label(m));
    if (m.get$hover() === true) {
      fillStyle = "#d37d2c";
      strokeStyle = "#6daa2c";
      textColor = "#dfefd7";
    } else {
      fillStyle = "#d34549";
      strokeStyle = "#346524";
      textColor = "#dbd75d";
    }
    t1.roundRect$7$fillStyle$strokeStyle(t2.get$x(m), t2.get$y(m), t2.get$width(m), t2.get$height(m), 20, fillStyle, strokeStyle);
    t3 = $.getInterceptor$x(t1);
    t3.set$fillStyle(t1, textColor);
    t4 = $.getInterceptor$x(bounds);
    t3.fillText$3(t1, t2.get$label(m), $.$sub$n($.$add$ns(t2.get$x(m), $.$div$n(t2.get$width(m), 2)), $.$div$n(t4.get$width(bounds), 2)), $.$sub$n($.$add$ns(t2.get$y(m), $.$div$n(t2.get$height(m), 2)), $.$div$n(t4.get$height(bounds), 2)));
  },
  begin$0: function() {
    var t1, t2;
    t1 = this.wrapper;
    t2 = $.getInterceptor$x(t1);
    t2.save$0(t1);
    t2.clear$1$color(t1, "#dfefd7");
    t2.set$lineWidth(t1, 5);
    t1.roundRect$7$fillStyle$strokeStyle(20, 20, 760, 560, 20, "#30346d", "#346524");
  },
  end$0: function(_) {
    $.restore$0$x(this.wrapper);
  },
  checkProcessing$0: function() {
    return !this.gameState.running;
  }
};

$$.RectangleRenderingSystem = {"": "EntityProcessingSystem;rbm,pm<,sm,wrapper,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.rbm = $.ComponentMapper$($.Type_RectangleBody, this.world, $.RectangleBody);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
    this.sm = $.ComponentMapper$($.Type_RenderStyle, this.world, $.RenderStyle);
  },
  processEntity$1: function(e) {
    var t1, pos, body, style, t2, t3, t4;
    t1 = this.pm;
    pos = t1.get$1(t1, e);
    t1 = this.rbm;
    body = t1.get$1(t1, e);
    t1 = this.sm;
    style = t1.get$1(t1, e);
    t1 = this.wrapper;
    t2 = $.getInterceptor$x(style);
    t3 = $.getInterceptor$x(t1);
    t3.set$strokeStyle(t1, t2.get$strokeStyle(style));
    t3.set$fillStyle(t1, t2.get$fillStyle(style));
    t3.beginPath$0(t1);
    t2 = $.getInterceptor$x(pos);
    t4 = $.getInterceptor$x(body);
    t3.rect$4(t1, $.$sub$n(t2.get$cx(pos), $.$div$n(t4.get$width(body), 2)), $.$sub$n(t2.get$cy(pos), $.$div$n(t4.get$height(body), 2)), t4.get$width(body), t4.get$height(body));
    t3.closePath$0(t1);
    t3.fill$0(t1);
    t3.stroke$0(t1);
  },
  begin$0: function() {
    return $.save$0$x(this.wrapper);
  },
  end$0: function(_) {
    return $.restore$0$x(this.wrapper);
  }
};

$$.CircleRenderingSystem = {"": "EntityProcessingSystem;bm<,pm<,sm,wrapper,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.bm = $.ComponentMapper$($.Type_CircleBody, this.world, $.CircleBody);
    this.pm = $.ComponentMapper$($.Type_Position, this.world, $.Position);
    this.sm = $.ComponentMapper$($.Type_RenderStyle, this.world, $.RenderStyle);
  },
  processEntity$1: function(e) {
    var t1, pos, body, style, t2, t3, t4, t5;
    t1 = this.pm;
    pos = t1.get$1(t1, e);
    t1 = this.bm;
    body = t1.get$1(t1, e);
    t1 = this.sm;
    style = t1.get$1(t1, e);
    t1 = $.getInterceptor$x(pos);
    t2 = t1.get$cx(pos);
    t1 = t1.get$cy(pos);
    t3 = body.get$radius();
    t4 = $.getInterceptor$x(style);
    t5 = t4.get$strokeStyle(style);
    this.wrapper.circle$5$fillStyle$strokeStyle(t2, t1, t3, t4.get$fillStyle(style), t5);
  }
};

$$.SoundSystem = {"": "EntityProcessingSystem;sm,audioManager,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.sm = $.ComponentMapper$($.Type_Sound, this.world, $.Sound);
  },
  processEntity$1: function(e) {
    var t1 = this.sm;
    this.audioManager.playClipFromSource$2("default", t1.get$1(t1, e).get$clipName());
    e.deleteFromWorld$0();
  }
};

$$.AudioElementManager = {"": "Object;baseURL,_clips",
  makeClip$2: function($name, url) {
    var t1, clip;
    t1 = this._clips;
    clip = t1.$index(t1, $name);
    if (clip != null)
      return clip;
    clip = $.AudiElementClip$_internal(this, $name, $.S(this.baseURL) + url);
    t1.$indexSet(t1, $name, clip);
    return clip;
  },
  playClipFromSource$3: function(sourceName, clipName, looped) {
    var t1 = this._clips;
    $.play$0$x(t1.$index(t1, clipName));
    return;
  },
  playClipFromSource$2: function(sourceName, clipName) {
    return this.playClipFromSource$3(sourceName, clipName, false);
  },
  noSuchMethod$1: function(_, im) {
  }
};

$$.AudiElementClip = {"": "Object;_liblib5$_manager,_liblib5$_name,_liblib5$_url,audioElements",
  load$0: function(_) {
    var audioElement, completer, t1;
    audioElement = $.AudioElement_AudioElement($);
    completer = $._CompleterImpl$($.AudioClip);
    t1 = $.getInterceptor$x(audioElement);
    $.get$first$ax(t1.get$onCanPlay(audioElement)).then$1(new $.AudiElementClip_load_anon(this, completer));
    t1.set$src(audioElement, this._liblib5$_url);
    this.audioElements.push(audioElement);
    return completer.future;
  },
  play$0: function(_) {
    var t1, t2, playable, audioElement;
    t1 = this.audioElements;
    t2 = $.JSArray_methods.where$1(t1, new $.AudiElementClip_play_anon());
    playable = t2.get$iterator(t2);
    if (playable.moveNext$0())
      audioElement = playable.get$current();
    else {
      if (0 >= t1.length)
        throw $.ioore(0);
      audioElement = $.clone$1$x(t1[0], false);
      t1.push(audioElement);
    }
    $.play$0$x(audioElement);
  },
  noSuchMethod$1: function(_, im) {
  },
  $isAudiElementClip: true,
  $isAudioClip: true
};

$$.AudiElementClip_load_anon = {"": "Closure;this_0,completer_1",
  call$1: function(_) {
    var t1 = this.completer_1;
    t1.complete$1(t1, this.this_0);
  }
};

$$.AudiElementClip_play_anon = {"": "Closure;",
  call$1: function(element) {
    return $.get$ended$x(element);
  }
};

$$.HighScoreSavingSystem = {"": "IntervalEntitySystem;KEY<,store<,gameState<,_acc,_delta,_interval,_systemBit,world,_actives,_liblib8$_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function(_) {
    this.store.getByKey$1(this.KEY).then$1(new $.HighScoreSavingSystem_initialize_anon(this));
  },
  processEntities$1: function(_) {
    this.store.getByKey$1(this.KEY).then$1(new $.HighScoreSavingSystem_processEntities_anon(this));
  }
};

$$.HighScoreSavingSystem_initialize_anon = {"": "Closure;this_0",
  call$1: function(value) {
    if (null != value)
      this.this_0.get$gameState().set$highScore(value);
  }
};

$$.HighScoreSavingSystem_processEntities_anon = {"": "Closure;this_0",
  call$1: function(value) {
    var t1;
    if (null == value || $.$lt$n(value, this.this_0.get$gameState().get$score()) === true) {
      t1 = this.this_0;
      $.save$2$x(t1.get$store(), t1.get$gameState().get$score(), t1.get$KEY());
    }
  }
};

$$.CqFramework = {"": "Object;cqWrapper",
  get$_canvas: function() {
    var t1 = this.cqWrapper;
    return t1.get$canvas(t1);
  },
  get$_mobile: function() {
    return $.get$CqTools_mobile();
  },
  get$onMouseMove: function(_) {
    var stream = this.get$_mobile() === true ? $.get$onTouchMove$x(this.get$_canvas()) : $.get$onMouseMove$x(this.get$_canvas());
    return $.map$1$ax(stream, new $.CqFramework_onMouseMove_anon(this));
  },
  get$onMouseDown: function(_) {
    var controller, stream;
    controller = $.StreamController$(null, null, null, null, $.CqMouseEvent);
    stream = this.get$_mobile() === true ? $.get$onTouchStart$x(this.get$_canvas()) : $.get$onMouseDown$x(this.get$_canvas());
    stream.listen$1(new $.CqFramework_onMouseDown_anon(this, controller));
    return controller.stream;
  },
  get$onMouseUp: function(_) {
    var stream = this.get$_mobile() === true ? $.get$onTouchEnd$x(this.get$_canvas()) : $.get$onMouseUp$x(this.get$_canvas());
    return $.map$1$ax(stream, new $.CqFramework_onMouseUp_anon(this));
  }
};

$$.CqFramework_onMouseMove_anon = {"": "Closure;this_0",
  call$1: function(e) {
    this.this_0;
    return $.CqTools_mousePosition(e);
  }
};

$$.CqFramework_onMouseDown_anon = {"": "Closure;this_0,controller_1",
  call$1: function(e) {
    var t1, t2;
    t1 = $.getInterceptor$x(e);
    t1.preventDefault$0(e);
    t2 = this.controller_1;
    this.this_0;
    t2.add$1(t2, $.CqMouseEvent$($.CqTools_mousePosition(e), t1.get$button(e)));
  }
};

$$.CqFramework_onMouseUp_anon = {"": "Closure;this_0",
  call$1: function(e) {
    this.this_0;
    return $.CqMouseEvent$($.CqTools_mousePosition(e), $.get$button$x(e));
  }
};

$$.CqMouseEvent = {"": "Object;position,button>", $isCqMouseEvent: true};

$$.CqWrapper = {"": "Object;_canvas<,_liblib6$_context,_framework",
  get$canvas: function(_) {
    return this._canvas;
  },
  noSuchMethod$1: function(_, invocation) {
    var t1 = this._liblib6$_context;
    if ($._mirrorsEnabled !== true && "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === t1) {
      $._mirrorsEnabled = true;
      $.Primitives_printString($.toString$0(t1));
    }
    return $._InstanceMirror$(t1).delegate$1(invocation);
  },
  strokeAndFill$2$fillStyle$strokeStyle: function(fillStyle, strokeStyle) {
    var t1, t2, tmp;
    if (null != strokeStyle) {
      t1 = this._liblib6$_context;
      t2 = $.getInterceptor$x(t1);
      tmp = t2.get$strokeStyle(t1);
      t2.set$strokeStyle(t1, strokeStyle);
      t2.stroke$0(t1);
      t2.set$strokeStyle(t1, tmp);
    }
    if (null != fillStyle) {
      t1 = this._liblib6$_context;
      t2 = $.getInterceptor$x(t1);
      tmp = t2.get$fillStyle(t1);
      t2.set$fillStyle(t1, fillStyle);
      t2.fill$0(t1);
      t2.set$fillStyle(t1, tmp);
    }
  },
  circle$5$fillStyle$strokeStyle: function(x, y, radius, fillStyle, strokeStyle) {
    $.beginPath$0$x(this._liblib6$_context);
    $.arc$6$x(this._liblib6$_context, x, y, radius, 0, 6.283185307179586, true);
    $.closePath$0$x(this._liblib6$_context);
    this.strokeAndFill$2$fillStyle$strokeStyle(fillStyle, strokeStyle);
  },
  clear$1$color: function(_, color) {
    var t1, t2;
    t1 = this._liblib6$_context;
    t2 = this._canvas;
    if (null != color) {
      $.set$fillStyle$x(t1, color);
      $.fillRect$4$x(this._liblib6$_context, 0, 0, $.get$width$x(t2), $.get$height$x(t2));
    } else
      $.clearRect$4$x(t1, 0, 0, $.get$width$x(t2), $.get$height$x(t2));
  },
  clear$0: function($receiver) {
    return this.clear$1$color($receiver, null);
  },
  roundRect$7$fillStyle$strokeStyle: function(x, y, width, height, radius, fillStyle, strokeStyle) {
    var t1, t2, t3, t4;
    t1 = this._liblib6$_context;
    t2 = $.getInterceptor$x(t1);
    t2.beginPath$0(t1);
    t3 = $.getInterceptor$ns(x);
    t2.moveTo$2(t1, t3.$add(x, radius), y);
    t2.lineTo$2(t1, $.$sub$n(t3.$add(x, width), radius), y);
    t4 = $.getInterceptor$ns(y);
    t2.quadraticCurveTo$4(t1, t3.$add(x, width), y, t3.$add(x, width), t4.$add(y, radius));
    t2.lineTo$2(t1, t3.$add(x, width), $.$sub$n(t4.$add(y, height), radius));
    t2.quadraticCurveTo$4(t1, t3.$add(x, width), t4.$add(y, height), $.$sub$n(t3.$add(x, width), radius), t4.$add(y, height));
    t2.lineTo$2(t1, t3.$add(x, radius), t4.$add(y, height));
    t2.quadraticCurveTo$4(t1, x, t4.$add(y, height), x, $.$sub$n(t4.$add(y, height), radius));
    t2.lineTo$2(t1, x, t4.$add(y, radius));
    t2.quadraticCurveTo$4(t1, x, y, t3.$add(x, radius), y);
    t2.closePath$0(t1);
    this.strokeAndFill$2$fillStyle$strokeStyle(fillStyle, strokeStyle);
  },
  wrappedText$5$nlCallback: function(text, x, y, maxWidth, nlCallback) {
    var h, lines, t1, i, oy, line;
    if (typeof y !== "number")
      return this.wrappedText$5$nlCallback$bailout(1, text, x, y, maxWidth, nlCallback);
    h = $.$mul$n($.Primitives_parseInt($.JSSyntaxRegExp$("(\\d+)", true, false).firstMatch$1(this.get$font(this)).group$1(0), null, null), 2);
    if (typeof h !== "number")
      return this.wrappedText$5$nlCallback$bailout(2, text, x, y, maxWidth, nlCallback, h);
    lines = this.getLines$2(text, maxWidth);
    for (t1 = null != nlCallback, i = 0; i < lines.length; ++i) {
      oy = $.JSNumber_methods.toInt$0(y + i * h * 0.6);
      if (t1)
        nlCallback.call$2(x, oy);
      if (i >= lines.length)
        throw $.ioore(i);
      line = lines[i];
      $.fillText$3$x(this._liblib6$_context, line, x, oy);
    }
  },
  wrappedText$5$nlCallback$bailout: function(state0, text, x, y, maxWidth, nlCallback, h) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        h = $.$mul$n($.Primitives_parseInt($.JSSyntaxRegExp$("(\\d+)", true, false).firstMatch$1(this.get$font(this)).group$1(0), null, null), 2);
      case 2:
        var lines, t1, t2, i, oy, line;
        state0 = 0;
        lines = this.getLines$2(text, maxWidth);
        for (t1 = null != nlCallback, t2 = $.getInterceptor$ns(y), i = 0; i < lines.length; ++i) {
          if (typeof h !== "number")
            throw $.iae(h);
          oy = $.toInt$0$nx(t2.$add(y, i * h * 0.6));
          if (t1)
            nlCallback.call$2(x, oy);
          if (i >= lines.length)
            throw $.ioore(i);
          line = lines[i];
          $.fillText$3$x(this._liblib6$_context, line, x, oy);
        }
    }
  },
  wrappedText$4: function(text, x, y, maxWidth) {
    return this.wrappedText$5$nlCallback(text, x, y, maxWidth, null);
  },
  textBoundaries$2: function(text, maxWidth) {
    var h, lines, t1;
    h = $.$mul$n($.Primitives_parseInt($.JSSyntaxRegExp$("(\\d+)", true, false).firstMatch$1(this.get$font(this)).group$1(0), null, null), 2);
    lines = this.getLines$2(text, maxWidth);
    if (null == maxWidth)
      maxWidth = $.get$width$x($.measureText$1$x(this._liblib6$_context, text));
    t1 = lines.length;
    if (typeof h !== "number")
      throw $.iae(h);
    return $.Rect$(0, 0, maxWidth, $.JSNumber_methods.toInt$0(t1 * h * 0.6));
  },
  textBoundaries$1: function(text) {
    return this.textBoundaries$2(text, null);
  },
  getLines$2: function(text, maxWidth) {
    var words, lines, spaceWidth, ox, line, i, word, wordWidth, t1;
    words = $.split$1$s(text, $.get$CqWrapper__whitespacePattern());
    if (typeof words !== "string" && (typeof words !== "object" || words === null || words.constructor !== Array && !$.getInterceptor(words).$isJavaScriptIndexingBehavior))
      return this.getLines$2$bailout(1, text, words, maxWidth);
    lines = $.List_List$from([""], true, $.String);
    if (typeof lines !== "object" || lines === null || lines.constructor !== Array || !!lines.fixed$length)
      return this.getLines$2$bailout(2, text, words, maxWidth, lines);
    spaceWidth = $.get$width$x($.measureText$1$x(this._liblib6$_context, " "));
    if (null != maxWidth) {
      maxWidth = $.$add$ns(maxWidth, spaceWidth);
      for (ox = 0, line = 0, i = 0; i < words.length; ++i) {
        word = $.S(words[i]) + " ";
        wordWidth = $.get$width$x($.measureText$1$x(this._liblib6$_context, word));
        if (typeof wordWidth !== "number")
          throw $.iae(wordWidth);
        if (ox + wordWidth > maxWidth) {
          lines.push("");
          ++line;
          ox = 0;
        }
        if (line >= lines.length)
          throw $.ioore(line);
        t1 = $.S(lines[line]) + word;
        if (line >= lines.length)
          throw $.ioore(line);
        lines[line] = t1;
        ox += wordWidth;
      }
    } else
      lines = [text];
    return lines;
  },
  getLines$2$bailout: function(state0, text, words, maxWidth, lines) {
    switch (state0) {
      case 0:
        words = $.split$1$s(text, $.get$CqWrapper__whitespacePattern());
      case 1:
        state0 = 0;
        lines = $.List_List$from([""], true, $.String);
      case 2:
        var spaceWidth, t1, t2, t3, ox, line, i, word, wordWidth;
        state0 = 0;
        spaceWidth = $.get$width$x($.measureText$1$x(this._liblib6$_context, " "));
        if (null != maxWidth) {
          maxWidth = $.$add$ns(maxWidth, spaceWidth);
          for (t1 = $.getInterceptor$asx(lines), t2 = $.getInterceptor$ax(lines), t3 = $.getInterceptor$asx(words), ox = 0, line = 0, i = 0; $.JSNumber_methods.$lt(i, t3.get$length(words)); ++i) {
            word = $.S(t3.$index(words, i)) + " ";
            wordWidth = $.get$width$x($.measureText$1$x(this._liblib6$_context, word));
            if (typeof wordWidth !== "number")
              throw $.iae(wordWidth);
            if (ox + wordWidth > maxWidth) {
              t2.add$1(lines, "");
              ++line;
              ox = 0;
            }
            t1.$indexSet(lines, line, $.S(t1.$index(lines, line)) + word);
            ox += wordWidth;
          }
        } else
          lines = [text];
        return lines;
    }
  },
  CqWrapper$1: function(_canvas) {
    this._liblib6$_context = $.get$context2D$x(this._canvas);
    this._framework = $.CqFramework$_(this);
  }
};

$$.Aspect = {"": "Object;_liblib8$_all,_excluded,_one",
  allOf$1: function(componentTypes) {
    this._liblib8$_all = this._updateBitMask$2(this._liblib8$_all, componentTypes);
    return this;
  },
  exclude$1: function(componentTypes) {
    this._excluded = this._updateBitMask$2(this._excluded, componentTypes);
    return this;
  },
  get$all: function() {
    return this._liblib8$_all;
  },
  get$excluded: function() {
    return this._excluded;
  },
  get$one: function() {
    return this._one;
  },
  _updateBitMask$2: function(mask, componentTypes) {
    var t1 = {};
    t1.mask_0 = mask;
    $.JSArray_methods.forEach$1(componentTypes, new $.Aspect__updateBitMask_anon(t1));
    return t1.mask_0;
  }
};

$$.Aspect__updateBitMask_anon = {"": "Closure;box_0",
  call$1: function(componentType) {
    var t1 = this.box_0;
    t1.mask_0 = $.$or$n(t1.mask_0, $.ComponentTypeManager_getTypeFor(componentType).get$bit());
  }
};

$$.Component = {"": "Object;",
  _removed$0: function() {
  },
  $isComponent: true
};

$$.ComponentManager = {"": "Manager;_componentsByType,_deleted,_world",
  initialize$0: function(_) {
  },
  _removeComponentsOfEntity$1: function(e) {
    this._forComponentsOfEntity$2(e, new $.ComponentManager__removeComponentsOfEntity_anon(e));
    e.set$_typeBits(0);
  },
  _addComponent$3: function(e, type, component) {
    var index, t1, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t1._ensureCapacity$1(index);
    components = t1.$index(t1, index);
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    $.$indexSet$ax(components, e.id, component);
    e._addTypeBit$1(type.get$bit());
  },
  getComponentsByType$1: function(type) {
    var index, t1, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t1._ensureCapacity$1(index);
    components = t1.$index(t1, index);
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    return components;
  },
  _getComponent$2: function(e, type) {
    var t1, components;
    t1 = this._componentsByType;
    components = t1.$index(t1, $.get$id$x(type));
    if (components != null && components.isIndexWithinBounds$1(e.id) === true)
      return $.$index$asx(components, e.id);
    return;
  },
  _forComponentsOfEntity$2: function(e, f) {
    var componentBits, t1, index;
    componentBits = e.get$_typeBits();
    if (typeof componentBits !== "number")
      return this._forComponentsOfEntity$2$bailout(1, f, componentBits);
    for (t1 = this._componentsByType, index = 0; componentBits > 0;) {
      if ((componentBits & 1) === 1)
        f.call$2(t1.$index(t1, index), index);
      ++index;
      componentBits = $.JSNumber_methods.$shr(componentBits, 1);
    }
  },
  _forComponentsOfEntity$2$bailout: function(state0, f, componentBits) {
    var t1, index, t2;
    for (t1 = this._componentsByType, index = 0; t2 = $.getInterceptor$n(componentBits), t2.$gt(componentBits, 0) === true;) {
      if ($.$eq(t2.$and(componentBits, 1), 1) === true)
        f.call$2(t1.$index(t1, index), index);
      ++index;
      componentBits = t2.$shr(componentBits, 1);
    }
  },
  deleted$1: function(e) {
    var t1 = this._deleted;
    return t1.add$1(t1, e);
  },
  clean$0: function() {
    var t1 = this._deleted;
    t1.forEach$1(t1, new $.ComponentManager_clean_anon(this));
    t1 = this._deleted;
    t1.clear$0(t1);
  }
};

$$.ComponentManager__removeComponentsOfEntity_anon = {"": "Closure;e_0",
  call$2: function(components, typeId) {
    var t1, t2, t3;
    t1 = this.e_0;
    t2 = $.getInterceptor$x(t1);
    t3 = $.getInterceptor$asx(components);
    t3.$index(components, t2.get$id(t1))._removed$0();
    t3.$indexSet(components, t2.get$id(t1), null);
  }
};

$$.ComponentManager_clean_anon = {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0._removeComponentsOfEntity$1(entity);
  }
};

$$.ComponentMapper = {"": "Object;_type,_components",
  get$1: function(_, e) {
    return $.$index$asx(this._components, $.get$id$x(e));
  },
  getSafe$1: function(e) {
    var t1 = $.getInterceptor$x(e);
    if (this._components.isIndexWithinBounds$1(t1.get$id(e)) === true)
      return $.$index$asx(this._components, t1.get$id(e));
    return;
  },
  ComponentMapper$2: function(componentType, world, A) {
    this._type = $.ComponentTypeManager_getTypeFor(componentType);
    this._components = world.get$componentManager().getComponentsByType$1(this._type);
  }
};

$$.ComponentType = {"": "Object;_bit,_liblib8$_id",
  get$bit: function() {
    return this._bit;
  },
  get$id: function(_) {
    return this._liblib8$_id;
  },
  ComponentType$0: function() {
    var t1 = $.ComponentType__nextBit;
    this._bit = t1;
    $.ComponentType__nextBit = $.$shl$n(t1, 1);
    t1 = $.ComponentType__nextId;
    $.ComponentType__nextId = $.$add$ns(t1, 1);
    this._liblib8$_id = t1;
  },
  $isComponentType: true
};

$$.Entity = {"": "Object;id>,_uniqueId,_typeBits@,_systemBits<,_world,_entityManager,_componentManager",
  _addTypeBit$1: function(bit) {
    var t1 = this._typeBits;
    if (typeof bit !== "number")
      throw $.iae(bit);
    this._typeBits = (t1 | bit) >>> 0;
  },
  _addSystemBit$1: function(bit) {
    var t1 = this._systemBits;
    if (typeof bit !== "number")
      throw $.iae(bit);
    this._systemBits = (t1 | bit) >>> 0;
  },
  _removeSystemBit$1: function(bit) {
    var t1, t2;
    t1 = this._systemBits;
    t2 = $.$not$i(bit);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._systemBits = (t1 & t2) >>> 0;
  },
  toString$0: function(_) {
    return "Entity[" + $.S(this.id) + "]";
  },
  addComponent$1: function(component) {
    this._componentManager._addComponent$3(this, $.ComponentTypeManager_getTypeFor(component.get$runtimeType(component)), component);
  },
  getComponentByClass$1: function(componentType) {
    var t1 = $.ComponentTypeManager_getTypeFor(componentType);
    return this._componentManager._getComponent$2(this, t1);
  },
  addToWorld$0: function() {
    return this._world.addEntity$1(this);
  },
  deleteFromWorld$0: function() {
    return this._world.deleteEntity$1(this);
  },
  disable$0: function(_) {
    var t1 = this._world;
    return t1.disable$1(t1, this);
  },
  enable$0: function(_) {
    var t1 = this._world;
    return t1.enable$1(t1, this);
  },
  Entity$_$2: function(_world, id) {
    this._entityManager = this._world.get$entityManager();
    this._componentManager = this._world.get$componentManager();
  },
  $isEntity: true
};

$$.EntityManager = {"": "Manager;_entities,_deletedEntities,_disabled,_active,_added,_created,_deleted,_identifierPool,_world",
  initialize$0: function(_) {
  },
  _createEntityInstance$0: function() {
    var t1, e;
    t1 = this._deletedEntities;
    e = t1.removeLast$0(t1);
    if (null == e)
      e = $.Entity$_(this._world, this._identifierPool.checkOut$0());
    this._created = this._created + 1;
    return e;
  },
  added$1: function(e) {
    var t1;
    this._active = this._active + 1;
    this._added = this._added + 1;
    t1 = this._entities;
    t1.$indexSet(t1, $.get$id$x(e), e);
  },
  enabled$1: function(_, e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), false);
  },
  disabled$1: function(_, e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), true);
  },
  deleted$1: function(e) {
    var t1, t2;
    t1 = this._entities;
    t2 = $.getInterceptor$x(e);
    t1.$indexSet(t1, t2.get$id(e), null);
    t1 = this._disabled;
    t1.$indexSet(t1, t2.get$id(e), false);
    t2 = this._deletedEntities;
    t2.add$1(t2, e);
    this._active = this._active - 1;
    this._deleted = this._deleted + 1;
  },
  _getEntity$1: function(entityId) {
    var t1 = this._entities;
    return t1.$index(t1, entityId);
  }
};

$$._IdentifierPool = {"": "Object;_ids,_nextAvailableId",
  checkOut$0: function() {
    var t1 = this._ids;
    if ($.$gt$n(t1.get$size(t1), 0) === true)
      return t1.removeLast$0(t1);
    t1 = this._nextAvailableId;
    this._nextAvailableId = t1 + 1;
    return t1;
  }
};

$$.EntitySystem = {"": "Object;world<",
  get$passive: function() {
    return this._passive;
  },
  begin$0: function() {
  },
  process$0: function() {
    if (this.checkProcessing$0()) {
      this.begin$0();
      var t1 = this._actives;
      this.processEntities$1(t1.get$readOnly(t1));
      this.end$0(this);
    }
  },
  end$0: function(_) {
  },
  initialize$0: function(_) {
  },
  _check$1: function(e) {
    var contains, interest, t1, t2;
    if (this._liblib8$_dummy)
      return;
    contains = $.$eq($.$and$n(this._systemBit, e.get$_systemBits()), this._systemBit);
    interest = $.$eq($.$and$n(this._liblib8$_all, e.get$_typeBits()), this._liblib8$_all);
    t1 = this._one;
    if (t1 > 0 && interest === true) {
      t2 = e.get$_typeBits();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      interest = (t1 & t2) >>> 0 > 0;
    }
    if ($.$gt$n(this._excluded, 0) === true && interest === true)
      interest = $.$eq($.$and$n(this._excluded, e.get$_typeBits()), 0);
    t1 = interest === true;
    if (t1 && contains !== true) {
      t1 = this._actives;
      t1.add$1(t1, e);
      e._addSystemBit$1(this._systemBit);
    } else if (!t1 && contains === true) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  added$1: function(e) {
    return this._check$1(e);
  },
  changed$1: function(e) {
    return this._check$1(e);
  },
  enabled$1: function(_, e) {
    return this._check$1(e);
  },
  deleted$1: function(e) {
    var t1;
    if ($.$eq($.$and$n(this._systemBit, e.get$_systemBits()), this._systemBit) === true) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  disabled$1: function(_, e) {
    var t1;
    if ($.$eq($.$and$n(this._systemBit, e.get$_systemBits()), this._systemBit) === true) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  EntitySystem$1: function(aspect) {
    this._liblib8$_dummy = $.$eq(this._liblib8$_all, 0) === true && this._one === 0;
    this._systemBit = $._SystemBitManager__getBitFor(this.get$runtimeType(this));
  },
  $isEntitySystem: true
};

$$.Manager = {"": "Object;",
  added$1: function(e) {
  },
  changed$1: function(e) {
  },
  deleted$1: function(e) {
  },
  disabled$1: function(_, e) {
  },
  enabled$1: function(_, e) {
  },
  $isManager: true
};

$$.GroupManager = {"": "Manager;_entitiesByGroup<,_groupsByEntity,_world",
  initialize$0: function(_) {
  },
  add$2: function(_, e, group) {
    var t1, entities, groups;
    t1 = this._entitiesByGroup;
    entities = t1.$index(t1, group);
    if (entities == null) {
      entities = $.Bag$(16, $.Entity);
      t1.$indexSet(t1, group, entities);
    }
    $.add$1$ax(entities, e);
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    if (groups == null) {
      groups = $.Bag$(16, $.String);
      t1.$indexSet(t1, e, groups);
    }
    $.add$1$ax(groups, group);
  },
  removeFromAllGroups$1: function(e) {
    var t1, groups;
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    t1 = $.getInterceptor(groups);
    if (groups != null) {
      t1.forEach$1(groups, new $.GroupManager_removeFromAllGroups_anon(this, e));
      t1.clear$0(groups);
    }
  },
  getEntities$1: function(group) {
    var t1, entities;
    t1 = this._entitiesByGroup;
    entities = t1.$index(t1, group);
    if (entities == null) {
      entities = $.Bag$(16, $.Entity);
      t1.$indexSet(t1, group, entities);
    }
    return $.get$readOnly$x(entities);
  },
  deleted$1: function(e) {
    return this.removeFromAllGroups$1(e);
  }
};

$$.GroupManager_removeFromAllGroups_anon = {"": "Closure;this_0,e_1",
  call$1: function(group) {
    var entities = $.$index$asx(this.this_0.get$_entitiesByGroup(), group);
    if (entities != null)
      $.remove$1$ax(entities, this.e_1);
  }
};

$$.TagManager = {"": "Manager;_entitiesByTag,_tagsByEntity,_world",
  register$2: function(_, e, tag) {
    var t1 = this._entitiesByTag;
    t1.$indexSet(t1, tag, e);
    t1 = this._tagsByEntity;
    t1.$indexSet(t1, e, tag);
  },
  unregister$1: function(tag) {
    var t1, t2;
    t1 = this._tagsByEntity;
    t2 = this._entitiesByTag;
    t1.remove$1(t1, t2.remove$1(t2, tag));
  },
  getEntity$1: function(tag) {
    var t1 = this._entitiesByTag;
    return t1.$index(t1, tag);
  },
  deleted$1: function(e) {
    var t1, removedTag;
    t1 = this._tagsByEntity;
    removedTag = t1.remove$1(t1, e);
    if (removedTag != null) {
      t1 = this._entitiesByTag;
      t1.remove$1(t1, removedTag);
    }
  },
  initialize$0: function(_) {
  }
};

$$.EntityProcessingSystem = {"": "EntitySystem;",
  processEntities$1: function(entities) {
    return entities.forEach$1(entities, new $.EntityProcessingSystem_processEntities_anon(this));
  },
  checkProcessing$0: function() {
    return true;
  }
};

$$.EntityProcessingSystem_processEntities_anon = {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0.processEntity$1(entity);
  }
};

$$.IntervalEntitySystem = {"": "EntitySystem;",
  get$delta: function() {
    return this._delta;
  },
  checkProcessing$0: function() {
    var t1, t2;
    t1 = this._acc;
    t2 = this.world.delta;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._acc = t1 + t2;
    t2 = this._delta;
    t1 = this.world.delta;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._delta = t2 + t1;
    t1 = this._acc;
    t2 = this._interval;
    if (t1 >= t2) {
      this._acc = t1 - t2;
      return true;
    }
    return false;
  },
  end$0: function(_) {
    this._delta = 0;
  }
};

$$.VoidEntitySystem = {"": "EntitySystem;",
  processEntities$1: function(entities) {
    return this.processSystem$0();
  },
  checkProcessing$0: function() {
    return true;
  }
};

$$.Bag = {"": "Object;_data,_size,_readOnly",
  $index: function(_, index) {
    var t1 = this._data;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$size: function(_) {
    return this._size;
  },
  get$readOnly: function(_) {
    return this._readOnly;
  },
  get$isEmpty: function(_) {
    return $.$eq(this._size, 0);
  },
  forEach$1: function(_, f) {
    var i, t1;
    for (i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      t1 = this._data;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$1(t1[i]);
    }
  },
  removeLast$0: function(_) {
    var t1, t2, current;
    if ($.$gt$n(this._size, 0) === true) {
      t1 = this._data;
      t2 = $.$sub$n(this._size, 1);
      this._size = t2;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      current = t1[t2];
      t2 = this._data;
      t1 = this._size;
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2.length)
        throw $.ioore(t1);
      t2[t1] = null;
      return current;
    }
    return;
  },
  remove$1: function(_, element) {
    var t1, i, t2, t3;
    for (t1 = $.getInterceptor(element), i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i]) === true) {
        t1 = this._data;
        t2 = $.$sub$n(this._size, 1);
        this._size = t2;
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        t3 = t1.length;
        if (t2 < 0 || t2 >= t3)
          throw $.ioore(t2);
        t2 = t1[t2];
        if (i >= t3)
          throw $.ioore(i);
        t1[i] = t2;
        t2 = this._data;
        t1 = this._size;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t2.length)
          throw $.ioore(t1);
        t2[t1] = null;
        return true;
      }
    }
    return false;
  },
  contains$1: function(_, element) {
    var t1, i, t2;
    for (t1 = $.getInterceptor(element), i = 0; $.$gt$n(this._size, i) === true; ++i) {
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i]) === true)
        return true;
    }
    return false;
  },
  get$capacity: function() {
    return this._data.length;
  },
  add$1: function(_, element) {
    var t1, t2, newCapacity, oldData;
    t1 = this._size;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, t1);
    t2 = this._data.length;
    if (t1 === t2) {
      newCapacity = $.JSNumber_methods.toInt$0(t2 * 3 / 2 + 1);
      oldData = this._data;
      t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
      this._data = t1;
      $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
    }
    t1 = this._data;
    t2 = this._size;
    if (t2 !== (t2 | 0))
      return this.add$1$bailout(2, element, t1, t2);
    this._size = t2 + 1;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
  },
  add$1$bailout: function(state0, element, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._size;
      case 1:
        state0 = 0;
        if ($.$eq(t1, this._data.length) === true) {
          newCapacity = $.JSNumber_methods.toInt$0(this._data.length * 3 / 2 + 1);
          oldData = this._data;
          t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
          $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
          this._data = t1;
          $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
        }
        t1 = this._data;
        t2 = this._size;
      case 2:
        var newCapacity, oldData;
        state0 = 0;
        this._size = $.$add$ns(t2, 1);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t1.length)
          throw $.ioore(t2);
        t1[t2] = element;
    }
  },
  $indexSet: function(_, index, element) {
    var t1, t2, oldData;
    t1 = $.getInterceptor$n(index);
    if (t1.$ge(index, this._data.length) === true) {
      t2 = t1.$mul(index, 2);
      oldData = this._data;
      t2 = $.List_List(t2, $.getRuntimeTypeArgument(this, this.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
      this._data = t2;
      $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
    }
    if ($.$le$n(this._size, index) === true)
      this._size = t1.$add(index, 1);
    t1 = this._data;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = element;
  },
  _ensureCapacity$1: function(index) {
    var t1, oldData;
    t1 = $.getInterceptor$n(index);
    if (t1.$ge(index, this._data.length) === true) {
      t1 = t1.$mul(index, 2);
      oldData = this._data;
      t1 = $.List_List(t1, $.getRuntimeTypeArgument(this, this.$asBag, 0));
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
      this._data = t1;
      $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
    }
  },
  clear$0: function(_) {
    var i, t1;
    for (i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      t1 = this._data;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = null;
    }
    this._size = 0;
  },
  addAll$1: function(_, items) {
    var t1, i, t2, newCapacity, oldData, t3, t4;
    for (t1 = $.getInterceptor$x(items), i = 0; $.$gt$n(t1.get$size(items), i) === true; ++i) {
      t2 = t1.$index(items, i);
      if ($.$eq(this._size, this._data.length) === true) {
        newCapacity = $.JSNumber_methods.toInt$0(this._data.length * 3 / 2 + 1);
        oldData = this._data;
        t3 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
        this._data = t3;
        $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
      }
      t3 = this._data;
      t4 = this._size;
      this._size = $.$add$ns(t4, 1);
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4] = t2;
    }
  },
  isIndexWithinBounds$1: function(index) {
    return $.$lt$n(index, this.get$capacity());
  },
  toString$0: function(_) {
    return "[" + $.JSArray_methods.join$1(this._data, ",") + "]";
  },
  Bag$1$capacity: function(capacity, E) {
    this._readOnly = $.ReadOnlyBag$_of(this, null);
  },
  $isBag: true
};

$$.ReadOnlyBag = {"": "Object;_bag",
  $index: function(_, index) {
    var t1 = this._bag;
    return t1.$index(t1, index);
  },
  get$size: function(_) {
    var t1 = this._bag;
    return t1.get$size(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._bag;
    return t1.get$isEmpty(t1);
  },
  contains$1: function(_, element) {
    var t1 = this._bag;
    return t1.contains$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1 = this._bag;
    return t1.forEach$1(t1, f);
  }
};

$$.World = {"": "Object;_entityManager,_componentManager,_added,_changed,_deleted,_enable,_disable,_systems,_systemsList<,_managers,_managersBag<,delta<",
  initialize$0: function(_) {
    var t1 = this._managersBag;
    t1.forEach$1(t1, new $.World_initialize_anon());
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_initialize_anon0());
  },
  get$entityManager: function() {
    return this._entityManager;
  },
  get$componentManager: function() {
    return this._componentManager;
  },
  addManager$1: function(manager) {
    var t1 = this._managers;
    t1.$indexSet(t1, manager.get$runtimeType(manager), manager);
    t1 = this._managersBag;
    t1.add$1(t1, manager);
    manager._world = this;
  },
  getManager$1: function(managerType) {
    var t1 = this._managers;
    return t1.$index(t1, managerType);
  },
  createEntity$0: function() {
    return this._entityManager._createEntityInstance$0();
  },
  getEntity$1: function(entityId) {
    return this._entityManager._getEntity$1(entityId);
  },
  addSystem$2$passive: function(system, passive) {
    var t1;
    system.world = this;
    system._passive = passive;
    t1 = this._systems;
    t1.$indexSet(t1, system.get$runtimeType(system), system);
    this._systemsList.push(system);
    return system;
  },
  addSystem$1: function(system) {
    return this.addSystem$2$passive(system, false);
  },
  _check$2: function(entities, perform) {
    entities.forEach$1(entities, new $.World__check_anon(this, perform));
    entities.clear$0(entities);
  },
  process$0: function() {
    this.processEntityChanges$0();
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_process_anon());
  },
  processEntityChanges$0: function() {
    this._check$2(this._added, new $.World_processEntityChanges_anon());
    this._check$2(this._changed, new $.World_processEntityChanges_anon0());
    this._check$2(this._disable, new $.World_processEntityChanges_anon1());
    this._check$2(this._enable, new $.World_processEntityChanges_anon2());
    this._check$2(this._deleted, new $.World_processEntityChanges_anon3());
    this._componentManager.clean$0();
  },
  addEntity$1: function(e) {
    var t1 = this._added;
    return t1.add$1(t1, e);
  },
  deleteEntity$1: function(e) {
    var t1 = this._deleted;
    if (!t1.contains$1(t1, e))
      t1.add$1(t1, e);
  },
  enable$1: function(_, e) {
    var t1 = this._enable;
    return t1.add$1(t1, e);
  },
  disable$1: function(_, e) {
    var t1 = this._disable;
    return t1.add$1(t1, e);
  },
  World$0: function() {
    this.addManager$1(this._entityManager);
    this.addManager$1(this._componentManager);
  }
};

$$.World_initialize_anon = {"": "Closure;",
  call$1: function(manager) {
    return $.initialize$0$x(manager);
  }
};

$$.World_initialize_anon0 = {"": "Closure;",
  call$1: function(system) {
    return $.initialize$0$x(system);
  }
};

$$.World__check_anon = {"": "Closure;this_0,perform_1",
  call$1: function(entity) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$_managersBag();
    t3 = this.perform_1;
    $.forEach$1$ax(t2, new $.World__check__anon(t3, entity));
    $.forEach$1$ax(t1.get$_systemsList(), new $.World__check__anon0(t3, entity));
  }
};

$$.World__check__anon = {"": "Closure;perform_2,entity_3",
  call$1: function(manager) {
    return this.perform_2.call$2(manager, this.entity_3);
  }
};

$$.World__check__anon0 = {"": "Closure;perform_4,entity_5",
  call$1: function(system) {
    return this.perform_4.call$2(system, this.entity_5);
  }
};

$$.World_process_anon = {"": "Closure;",
  call$1: function(system) {
    if (system.get$passive() !== true)
      system.process$0();
  }
};

$$.World_processEntityChanges_anon = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.added$1(entity);
  }
};

$$.World_processEntityChanges_anon0 = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.changed$1(entity);
  }
};

$$.World_processEntityChanges_anon1 = {"": "Closure;",
  call$2: function(observer, entity) {
    return $.disabled$1$x(observer, entity);
  }
};

$$.World_processEntityChanges_anon2 = {"": "Closure;",
  call$2: function(observer, entity) {
    return $.enabled$1$x(observer, entity);
  }
};

$$.World_processEntityChanges_anon3 = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.deleted$1(entity);
  }
};

$$.Store = {"": "Object;_isOpen?",
  get$isOpen: function() {
    return this._isOpen;
  },
  keys$0: function(_) {
    if (!this.get$isOpen())
      $.throwExpression($.StateError$($.S(this.get$runtimeType(this)) + " is not open"));
    return this._liblib2$_keys$0();
  },
  get$keys: function(receiver) {
    return new $.Bound_keys_Store(this, "keys$0", receiver);
  },
  save$2: function(_, obj, key) {
    if (!this.get$isOpen())
      $.throwExpression($.StateError$($.S(this.get$runtimeType(this)) + " is not open"));
    if (key == null)
      throw $.wrapException($.ArgumentError$("key must not be null"));
    return this._save$2(obj, key);
  },
  getByKey$1: function(key) {
    if (!this.get$isOpen())
      $.throwExpression($.StateError$($.S(this.get$runtimeType(this)) + " is not open"));
    return this._getByKey$1(key);
  },
  all$0: function() {
    if (!this.get$isOpen())
      $.throwExpression($.StateError$($.S(this.get$runtimeType(this)) + " is not open"));
    return this._all$0();
  },
  get$all: function() {
    return new $.Bound_all_Store(this, "all$0");
  }
};

$$._MapStore = {"": "Store;",
  open$0: function(_) {
    this.storage = this._generateMap$0();
    this._isOpen = true;
    return $._FutureImpl$immediate(true, null);
  },
  _liblib2$_keys$0: function() {
    return $._GeneratedSingleStreamImpl$($._IterablePendingEvents$($.get$keys$x(this.storage), null), null);
  },
  _save$2: function(obj, key) {
    $.$indexSet$ax(this.storage, key, obj);
    return $._FutureImpl$immediate(key, null);
  },
  _getByKey$1: function(key) {
    return $._FutureImpl$immediate($.$index$asx(this.storage, key), null);
  },
  _all$0: function() {
    return $._GeneratedSingleStreamImpl$($._IterablePendingEvents$($.get$values$x(this.storage), null), null);
  },
  $asStore: null
};

$$.IndexedDbStore = {"": "Store;dbName,version,_db@,storeName<,_isOpen",
  open$0: function(_) {
    if ($.IdbFactory_supported() !== true)
      return $._FutureImpl$immediateError($.UnsupportedError$("IndexedDB is not supported on this platform"), null, null);
    return $.open$3$onUpgradeNeeded$version$x($.get$indexedDB$x(window), this.dbName, new $.IndexedDbStore_open_anon(this), this.version).then$1(new $.IndexedDbStore_open_anon0(this));
  },
  _save$2: function(obj, key) {
    return this._doCommand$1(new $.IndexedDbStore__save_anon(obj, key));
  },
  _getByKey$1: function(key) {
    return this._doCommand$2(new $.IndexedDbStore__getByKey_anon(key), "readonly");
  },
  _doCommand$2: function(requestCommand, txnMode) {
    var t1, trans, t2, future;
    $._CompleterImpl$(null);
    t1 = this.storeName;
    trans = $.transaction$2$x(this._db, t1, txnMode);
    t2 = $.getInterceptor$x(trans);
    future = requestCommand.call$1(t2.objectStore$1(trans, t1));
    return t2.get$completed(trans).then$1(new $.IndexedDbStore__doCommand_anon(future));
  },
  _doCommand$1: function(requestCommand) {
    return this._doCommand$2(requestCommand, "readwrite");
  },
  _doGetAll$1: function(onCursor) {
    var controller, t1;
    controller = $.StreamController$(null, null, null, null, $.getRuntimeTypeArgument(this, this.$asIndexedDbStore, 0));
    t1 = this.storeName;
    $.openCursor$1$autoAdvance$x($.objectStore$1$x($.transaction$2$x(this._db, t1, "readonly"), t1), true).listen$3$onDone$onError(new $.IndexedDbStore__doGetAll_anon(onCursor, controller), new $.IndexedDbStore__doGetAll_anon0(controller), new $.IndexedDbStore__doGetAll_anon1(controller));
    return controller.stream;
  },
  _all$0: function() {
    return this._doGetAll$1(new $.IndexedDbStore__all_anon());
  },
  _liblib2$_keys$0: function() {
    return this._doGetAll$1(new $.IndexedDbStore__keys_anon());
  },
  IndexedDbStore$3$version: function(dbName, storeName, version, V) {
  },
  $asStore: null
};

$$.IndexedDbStore_open_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1 = this.this_0;
    t1.set$_db($.get$result$x($.get$target$x(e)));
    if ($.contains$1$asx($.get$objectStoreNames$x(t1.get$_db()), t1.get$storeName()) !== true)
      $.createObjectStore$1$x(t1.get$_db(), t1.get$storeName());
  }
};

$$.IndexedDbStore_open_anon0 = {"": "Closure;this_1",
  call$1: function(db) {
    var t1 = this.this_1;
    t1.set$_db(db);
    t1.set$_isOpen(true);
    return true;
  }
};

$$.IndexedDbStore__save_anon = {"": "Closure;obj_0,key_1",
  call$1: function(store) {
    return $.put$2$x(store, this.obj_0, this.key_1);
  }
};

$$.IndexedDbStore__getByKey_anon = {"": "Closure;key_0",
  call$1: function(store) {
    return $.getObject$1$x(store, this.key_0);
  }
};

$$.IndexedDbStore__doCommand_anon = {"": "Closure;future_0",
  call$1: function(_) {
    return this.future_0;
  }
};

$$.IndexedDbStore__doGetAll_anon = {"": "Closure;onCursor_0,controller_1",
  call$1: function(cursor) {
    var t1 = this.controller_1;
    return t1.add$1(t1, this.onCursor_0.call$1(cursor));
  }
};

$$.IndexedDbStore__doGetAll_anon0 = {"": "Closure;controller_2",
  call$0: function() {
    var t1 = this.controller_2;
    return t1.close$0(t1);
  },
  $isGameInitializer: true
};

$$.IndexedDbStore__doGetAll_anon1 = {"": "Closure;controller_3",
  call$1: function(e) {
    return this.controller_3.addError$1(e);
  }
};

$$.IndexedDbStore__all_anon = {"": "Closure;",
  call$1: function(cursor) {
    return $.get$value$x(cursor);
  }
};

$$.IndexedDbStore__keys_anon = {"": "Closure;",
  call$1: function(cursor) {
    return $.get$key$x(cursor);
  }
};

$$.LocalStorageStore = {"": "_MapStore;storage,_isOpen",
  _generateMap$0: function() {
    return window.localStorage;
  },
  $as_MapStore: null
};

$$.WebSqlStore = {"": "Store;dbName,storeName<,estimatedSize,_db@,_isOpen",
  open$0: function(_) {
    var completer, t1;
    if ($.SqlDatabase_supported() !== true)
      return $._FutureImpl$immediateError($.UnsupportedError$("WebSQL is not supported on this platform"), null, null);
    completer = $._CompleterImpl$(null);
    t1 = this.dbName;
    this._db = window.openDatabase(t1, "1", t1, this.estimatedSize);
    this._initDb$1(completer);
    return completer.future;
  },
  _initDb$1: function(completer) {
    var sql = "CREATE TABLE IF NOT EXISTS " + this.storeName + " (id NVARCHAR(32) UNIQUE PRIMARY KEY, value TEXT)";
    $.transaction$2$x(this._db, new $.WebSqlStore__initDb_anon(this, completer, sql), new $.WebSqlStore__initDb_anon0(completer));
  },
  _liblib2$_keys$0: function() {
    var sql, controller;
    sql = "SELECT id FROM " + this.storeName;
    controller = $.StreamController$(null, null, null, null, null);
    $.transaction$3$x(this._db, new $.WebSqlStore__keys_anon(sql, controller), new $.WebSqlStore__keys_anon0(controller), new $.WebSqlStore__keys_anon1(controller));
    return controller.stream;
  },
  _save$2: function(obj, key) {
    var completer, upsertSql;
    completer = $._CompleterImpl$(null);
    upsertSql = "INSERT OR REPLACE INTO " + this.storeName + " (id, value) VALUES (?, ?)";
    $.transaction$2$x(this._db, new $.WebSqlStore__save_anon(obj, key, completer, upsertSql), new $.WebSqlStore__save_anon0(completer));
    return completer.future;
  },
  _getByKey$1: function(key) {
    var completer, sql;
    completer = $._CompleterImpl$(null);
    sql = "SELECT value FROM " + this.storeName + " WHERE id = ?";
    $.readTransaction$2$x(this._db, new $.WebSqlStore__getByKey_anon(key, completer, sql), new $.WebSqlStore__getByKey_anon0(completer));
    return completer.future;
  },
  _all$0: function() {
    var sql, controller;
    sql = "SELECT id,value FROM " + this.storeName;
    controller = $.StreamController$(null, null, null, null, $.getRuntimeTypeArgument(this, this.$asWebSqlStore, 0));
    $.transaction$3$x(this._db, new $.WebSqlStore__all_anon(sql, controller), new $.WebSqlStore__all_anon0(controller), new $.WebSqlStore__all_anon1(controller));
    return controller.stream;
  },
  $asStore: null
};

$$.WebSqlStore__initDb_anon = {"": "Closure;this_0,completer_1,sql_2",
  call$1: function(txn) {
    $.executeSql$3$x(txn, this.sql_2, [], new $.WebSqlStore__initDb__anon(this.this_0, this.completer_1));
  }
};

$$.WebSqlStore__initDb__anon = {"": "Closure;this_3,completer_4",
  call$2: function(txn, resultSet) {
    var t1;
    this.this_3.set$_isOpen(true);
    t1 = this.completer_4;
    t1.complete$1(t1, true);
  }
};

$$.WebSqlStore__initDb_anon0 = {"": "Closure;completer_5",
  call$1: function(error) {
    return this.completer_5.completeError$1(error);
  }
};

$$.WebSqlStore__keys_anon = {"": "Closure;sql_0,controller_1",
  call$1: function(txn) {
    $.executeSql$3$x(txn, this.sql_0, [], new $.WebSqlStore__keys__anon(this.controller_1));
  }
};

$$.WebSqlStore__keys__anon = {"": "Closure;controller_2",
  call$2: function(txn, resultSet) {
    var t1, t2, i;
    for (t1 = $.getInterceptor$x(resultSet), t2 = this.controller_2, i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(t1.get$rows(resultSet))); ++i)
      t2.add$1(t2, $.$index$asx($.item$1$x(t1.get$rows(resultSet), i), "id"));
  }
};

$$.WebSqlStore__keys_anon0 = {"": "Closure;controller_3",
  call$1: function(error) {
    return this.controller_3.addError$1(error);
  }
};

$$.WebSqlStore__keys_anon1 = {"": "Closure;controller_4",
  call$0: function() {
    var t1 = this.controller_4;
    return t1.close$0(t1);
  },
  $isGameInitializer: true
};

$$.WebSqlStore__save_anon = {"": "Closure;obj_0,key_1,completer_2,upsertSql_3",
  call$1: function(txn) {
    var t1, t2;
    t1 = this.upsertSql_3;
    t2 = this.key_1;
    $.executeSql$3$x(txn, t1, [t2, this.obj_0], new $.WebSqlStore__save__anon(t2, this.completer_2));
  }
};

$$.WebSqlStore__save__anon = {"": "Closure;key_4,completer_5",
  call$2: function(txn, resultSet) {
    var t1 = this.completer_5;
    t1.complete$1(t1, this.key_4);
  }
};

$$.WebSqlStore__save_anon0 = {"": "Closure;completer_6",
  call$1: function(error) {
    return this.completer_6.completeError$1(error);
  }
};

$$.WebSqlStore__getByKey_anon = {"": "Closure;key_0,completer_1,sql_2",
  call$1: function(txn) {
    $.executeSql$3$x(txn, this.sql_2, [this.key_0], new $.WebSqlStore__getByKey__anon(this.completer_1));
  }
};

$$.WebSqlStore__getByKey__anon = {"": "Closure;completer_3",
  call$2: function(txn, resultSet) {
    var t1, t2, t3;
    t1 = $.getInterceptor$x(resultSet);
    t2 = $.get$isEmpty$asx(t1.get$rows(resultSet));
    t3 = this.completer_3;
    if (t2 === true)
      t3.complete$1(t3, null);
    else
      t3.complete$1(t3, $.$index$asx($.item$1$x(t1.get$rows(resultSet), 0), "value"));
  }
};

$$.WebSqlStore__getByKey_anon0 = {"": "Closure;completer_4",
  call$1: function(error) {
    return this.completer_4.completeError$1(error);
  }
};

$$.WebSqlStore__all_anon = {"": "Closure;sql_0,controller_1",
  call$1: function(txn) {
    $.executeSql$3$x(txn, this.sql_0, [], new $.WebSqlStore__all__anon(this.controller_1));
  }
};

$$.WebSqlStore__all__anon = {"": "Closure;controller_2",
  call$2: function(txn, resultSet) {
    var t1, t2, i;
    for (t1 = $.getInterceptor$x(resultSet), t2 = this.controller_2, i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(t1.get$rows(resultSet))); ++i)
      t2.add$1(t2, $.$index$asx($.item$1$x(t1.get$rows(resultSet), i), "value"));
  }
};

$$.WebSqlStore__all_anon0 = {"": "Closure;controller_3",
  call$1: function(error) {
    return this.controller_3.addError$1(error);
  }
};

$$.WebSqlStore__all_anon1 = {"": "Closure;controller_4",
  call$0: function() {
    var t1 = this.controller_4;
    return t1.close$0(t1);
  },
  $isGameInitializer: true
};

$$.AudioClip = {"": "Object;_manager<,_liblib4$_name,_url,_buffer@,_liblib4$_hasError?,_errorString?,_isReadyToPlay?,_urlAbsolute",
  get$url: function(_) {
    return this._url;
  },
  _onDecode$2: function(buffer, completer) {
    if (buffer == null) {
      this._liblib4$_hasError = true;
      this._errorString = "Error decoding buffer.";
      completer.complete$1(completer, this);
      return;
    }
    this._liblib4$_hasError = false;
    this._errorString = "OK";
    this._buffer = buffer;
    this._isReadyToPlay = true;
    completer.complete$1(completer, this);
  },
  _onRequestSuccess$2: function(request, completer) {
    var response = request.response;
    $.decodeAudioData$3$x(this._manager._context, response, new $.AudioClip__onRequestSuccess_anon(this, completer), new $.AudioClip__onRequestSuccess_anon0(this, completer));
  },
  load$0: function(_) {
    var request, completer, t1;
    this.get$url(this);
    this._isReadyToPlay = false;
    this._buffer = null;
    if ($.JSString_methods.startsWith$1(this.get$url(this), "sfxr:"))
      return $.Future_Future$delayed($.Duration$(0, 0, 0, 1, 0, 0), new $.AudioClip_load_anon(this), $.AudioClip);
    request = new XMLHttpRequest();
    completer = $._CompleterImpl$($.AudioClip);
    t1 = $.getInterceptor$x(request);
    if (this._urlAbsolute)
      t1.open$2(request, "GET", this.get$url(this));
    else
      t1.open$2(request, "GET", $.S(this._manager.baseURL) + "/" + this.get$url(this));
    t1 = $.getInterceptor$x(request);
    request.responseType = "arraybuffer";
    t1.get$onLoad(request).listen$1(new $.AudioClip_load_anon0(this, request, completer));
    t1.get$onError(request).listen$1(new $.AudioClip_load_anon1(this, request, completer));
    t1.get$onAbort(request).listen$1(new $.AudioClip_load_anon2(this, request, completer));
    request.send();
    return completer.future;
  },
  get$length: function(_) {
    var t1 = this._buffer;
    if (t1 == null)
      return 0;
    return $.get$duration$x(t1);
  },
  $isAudioClip: true
};

$$.AudioClip__onRequestSuccess_anon = {"": "Closure;this_0,completer_1",
  call$1: function(b) {
    return this.this_0._onDecode$2(b, this.completer_1);
  }
};

$$.AudioClip__onRequestSuccess_anon0 = {"": "Closure;this_2,completer_3",
  call$1: function(b) {
    return this.this_2._onDecode$2(b, this.completer_3);
  }
};

$$.AudioClip_load_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    t1.set$_buffer($.SfxrSynth_toAudioBuffer(t1.get$_manager().get$_context(), $.substring$1$s($.get$url$x(t1), 5)));
    t1.set$_isReadyToPlay(true);
    return t1;
  },
  $isGameInitializer: true
};

$$.AudioClip_load_anon0 = {"": "Closure;this_1,request_2,completer_3",
  call$1: function(e) {
    return this.this_1._onRequestSuccess$2(this.request_2, this.completer_3);
  }
};

$$.AudioClip_load_anon1 = {"": "Closure;this_4,request_5,completer_6",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_4;
    this.request_5;
    t2 = this.completer_6;
    t1.set$_liblib4$_hasError(true);
    t1.set$_errorString("Error fetching data");
    t2.complete$1(t2, t1);
    return;
  }
};

$$.AudioClip_load_anon2 = {"": "Closure;this_7,request_8,completer_9",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_7;
    this.request_8;
    t2 = this.completer_9;
    t1.set$_liblib4$_hasError(true);
    t1.set$_errorString("Error fetching data");
    t2.complete$1(t2, t1);
    return;
  }
};

$$.AudioManager = {"": "Object;_context<,_destination,_listener,_masterGain,_musicGain,_sourceGain,baseURL,_liblib4$_clips,_sources,_music,_mutedVolume,_musicPaused,_sourcesPaused",
  makeClip$2: function($name, url) {
    var t1, clip;
    t1 = this._liblib4$_clips;
    clip = t1.$index(t1, $name);
    if (clip != null)
      return clip;
    clip = $.AudioClip$_internal(this, $name, url);
    t1.$indexSet(t1, $name, clip);
    return clip;
  },
  makeSource$1: function($name) {
    var t1, source;
    t1 = this._sources;
    source = t1.$index(t1, $name);
    if (source != null)
      return source;
    source = $.AudioSource$_internal(this, $name, this._sourceGain);
    t1.$indexSet(t1, $name, source);
    return source;
  },
  playClipFromSource$3: function(sourceName, clipName, looped) {
    return this.playClipFromSourceIn$4(0, sourceName, clipName, looped);
  },
  playClipFromSource$2: function(sourceName, clipName) {
    return this.playClipFromSource$3(sourceName, clipName, false);
  },
  playClipFromSourceIn$4: function(delay, sourceName, clipName, looped) {
    var t1, source, clip;
    t1 = this._sources;
    source = t1.$index(t1, sourceName);
    if (source == null) {
      $.Primitives_printString("Could not find source " + sourceName);
      return;
    }
    t1 = this._liblib4$_clips;
    clip = t1.$index(t1, clipName);
    if (clip == null) {
      $.Primitives_printString("Could not find clip " + $.S(clipName));
      return;
    }
    if (looped)
      return source.playLoopedIn$2(delay, clip);
    else
      return source.playOnceIn$2(delay, clip);
  },
  AudioManager$1: function(baseURL) {
    this._context = $.AudioContext_AudioContext();
    this._destination = this._context.destination;
    this._listener = this._context.listener;
    this._masterGain = $.createGain$0$x(this._context);
    this._musicGain = $.createGain$0$x(this._context);
    this._sourceGain = $.createGain$0$x(this._context);
    this._masterGain.connect(this._destination, 0, 0);
    this._musicGain.connect(this._masterGain, 0, 0);
    this._sourceGain.connect(this._masterGain, 0, 0);
    this._music = $.AudioMusic$_internal(this, this._musicGain);
  }
};

$$.AudioMusic = {"": "Object;_manager<,_liblib4$_source,_sound,_clip",
  get$pause: function(_) {
    var t1 = this._sound;
    return t1 == null ? false : t1.get$pause(t1);
  },
  pause$1: function($receiver, arg0) {
    return this.get$pause($receiver).call$1(arg0);
  },
  set$pause: function(_, b) {
    var t1 = this._sound;
    if (t1 != null)
      t1.set$pause(t1, b);
  },
  play$0: function(_) {
    var t1 = this._sound;
    if (t1 != null) {
      t1.stop$0(t1);
      this._sound = null;
    }
    this._sound = $.AudioSound$_internal(this._liblib4$_source, this._clip, true);
    t1 = this._sound;
    t1.play$0(t1);
  },
  stop$0: function(_) {
    var t1 = this._sound;
    if (t1 != null) {
      t1.stop$0(t1);
      this._sound = null;
    }
  },
  AudioMusic$_internal$2: function(_manager, output) {
    this._liblib4$_source = $.AudioSource$_internal(this._manager, "music", output);
    this._liblib4$_source.set$positional(false);
  }
};

$$.SfxrParams = {"": "Object;waveType,attackTime,sustainTime,sustainPunch,decayTime,startFrequency,minFrequency,slide,deltaSlide,vibratoDepth,vibratoSpeed,changeAmount,changeSpeed,squareDuty,dutySweep,repeatSpeed,phaserOffset,phaserSweep,lpFilterCutoff,lpFilterCutoffSweep,lpFilterResonance,hpFilterCutoff,hpFilterCutoffSweep,masterVolume",
  SfxrParams$fromString$1: function(string) {
    var values, totalTime, multiplier;
    values = string.split(",");
    if (0 >= values.length)
      throw $.ioore(0);
    this.waveType = $.SfxrParams__toInt(values[0]);
    if (1 >= values.length)
      throw $.ioore(1);
    this.attackTime = $.SfxrParams__toDouble(values[1]);
    if (2 >= values.length)
      throw $.ioore(2);
    this.sustainTime = $.SfxrParams__toDouble(values[2]);
    if (3 >= values.length)
      throw $.ioore(3);
    this.sustainPunch = $.SfxrParams__toDouble(values[3]);
    if (4 >= values.length)
      throw $.ioore(4);
    this.decayTime = $.SfxrParams__toDouble(values[4]);
    if (5 >= values.length)
      throw $.ioore(5);
    this.startFrequency = $.SfxrParams__toDouble(values[5]);
    if (6 >= values.length)
      throw $.ioore(6);
    this.minFrequency = $.SfxrParams__toDouble(values[6]);
    if (7 >= values.length)
      throw $.ioore(7);
    this.slide = $.SfxrParams__toDouble(values[7]);
    if (8 >= values.length)
      throw $.ioore(8);
    this.deltaSlide = $.SfxrParams__toDouble(values[8]);
    if (9 >= values.length)
      throw $.ioore(9);
    this.vibratoDepth = $.SfxrParams__toDouble(values[9]);
    if (10 >= values.length)
      throw $.ioore(10);
    this.vibratoSpeed = $.SfxrParams__toDouble(values[10]);
    if (11 >= values.length)
      throw $.ioore(11);
    this.changeAmount = $.SfxrParams__toDouble(values[11]);
    if (12 >= values.length)
      throw $.ioore(12);
    this.changeSpeed = $.SfxrParams__toDouble(values[12]);
    if (13 >= values.length)
      throw $.ioore(13);
    this.squareDuty = $.SfxrParams__toDouble(values[13]);
    if (14 >= values.length)
      throw $.ioore(14);
    this.dutySweep = $.SfxrParams__toDouble(values[14]);
    if (15 >= values.length)
      throw $.ioore(15);
    this.repeatSpeed = $.SfxrParams__toDouble(values[15]);
    if (16 >= values.length)
      throw $.ioore(16);
    this.phaserOffset = $.SfxrParams__toDouble(values[16]);
    if (17 >= values.length)
      throw $.ioore(17);
    this.phaserSweep = $.SfxrParams__toDouble(values[17]);
    if (18 >= values.length)
      throw $.ioore(18);
    this.lpFilterCutoff = $.SfxrParams__toDouble(values[18]);
    if (19 >= values.length)
      throw $.ioore(19);
    this.lpFilterCutoffSweep = $.SfxrParams__toDouble(values[19]);
    if (20 >= values.length)
      throw $.ioore(20);
    this.lpFilterResonance = $.SfxrParams__toDouble(values[20]);
    if (21 >= values.length)
      throw $.ioore(21);
    this.hpFilterCutoff = $.SfxrParams__toDouble(values[21]);
    if (22 >= values.length)
      throw $.ioore(22);
    this.hpFilterCutoffSweep = $.SfxrParams__toDouble(values[22]);
    if (23 >= values.length)
      throw $.ioore(23);
    this.masterVolume = $.SfxrParams__toDouble(values[23]);
    if ($.$lt$n(this.sustainTime, 0.01) === true)
      this.sustainTime = 0.01;
    totalTime = $.$add$ns($.$add$ns(this.attackTime, this.sustainTime), this.decayTime);
    if ($.$lt$n(totalTime, 0.18) === true) {
      if (typeof totalTime !== "number")
        throw $.iae(totalTime);
      multiplier = 0.18 / totalTime;
      this.attackTime = $.$mul$n(this.attackTime, multiplier);
      this.sustainTime = $.$mul$n(this.sustainTime, multiplier);
      this.decayTime = $.$mul$n(this.decayTime, multiplier);
    }
  }
};

$$.SfxrSynth = {"": "Object;_params,_envelopeLength0,_envelopeLength1,_envelopeLength2,_period,_maxPeriod,_slide,_deltaSlide,_changeAmount,_squareDuty,_dutySweep,_changeTime,_changeLimit",
  reset$0: function(_) {
    var p, t1, t2;
    p = this._params;
    t1 = p.startFrequency;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(1, p, t1);
    this._period = 100 / (t1 * t1 + 0.001);
    t1 = p.minFrequency;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(2, p, t1);
    this._maxPeriod = 100 / (t1 * t1 + 0.001);
    t1 = p.slide;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(3, p, t1);
    this._slide = 1 - t1 * t1 * t1 * 0.01;
    t1 = p.deltaSlide;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(5, p, 0, t1);
    this._deltaSlide = -t1 * t1 * t1 * 0.000001;
    t1 = p.waveType;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(8, p, t1);
    if (t1 === 0) {
      t1 = p.squareDuty;
      if (typeof t1 !== "number")
        return this.reset$0$bailout(9, p, t1);
      this._squareDuty = 0.5 - t1 / 2;
      t1 = p.dutySweep;
      if (typeof t1 !== "number")
        return this.reset$0$bailout(10, p, t1);
      this._dutySweep = -t1 * 0.00005;
    }
    t1 = p.changeAmount;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(11, p, t1);
    t2 = t1 * t1;
    this._changeAmount = t1 > 0 ? 1 - t2 * 0.9 : 1 + t2 * 10;
    this._changeTime = 0;
    t1 = p.changeSpeed;
    if (typeof t1 !== "number")
      return this.reset$0$bailout(13, p, t1);
    if (t1 === 1)
      t1 = 0;
    else {
      t1 = 1 - t1;
      t1 = t1 * t1 * 20000 + 32;
    }
    this._changeLimit = $.JSNumber_methods.toInt$0(t1);
  },
  reset$0$bailout: function(state0, p, t1, t2) {
    switch (state0) {
      case 0:
        p = this._params;
        t1 = p.startFrequency;
      case 1:
        state0 = 0;
        t1 = $.$add$ns($.$mul$n(t1, t1), 0.001);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this._period = 100 / t1;
        t1 = p.minFrequency;
      case 2:
        state0 = 0;
        t1 = $.$add$ns($.$mul$n(t1, t1), 0.001);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this._maxPeriod = 100 / t1;
        t1 = p.slide;
      case 3:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        t2 = p.slide;
      case 4:
        state0 = 0;
        t2 = $.$mul$n($.$mul$n(t1, t2), 0.01);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this._slide = 1 - t2;
        t2 = p.deltaSlide;
      case 5:
        state0 = 0;
        t2 = $.$negate$n(t2);
        t1 = p.deltaSlide;
      case 6:
        state0 = 0;
        t1 = $.$mul$n(t2, t1);
        t2 = p.deltaSlide;
      case 7:
        state0 = 0;
        this._deltaSlide = $.$mul$n($.$mul$n(t1, t2), 0.000001);
        t1 = p.waveType;
      case 8:
        state0 = 0;
      default:
        if (state0 === 10 || state0 === 9 || state0 === 0 && $.$eq(t1, 0) === true)
          switch (state0) {
            case 0:
              t1 = p.squareDuty;
            case 9:
              state0 = 0;
              t1 = $.$div$n(t1, 2);
              if (typeof t1 !== "number")
                throw $.iae(t1);
              this._squareDuty = 0.5 - t1;
              t1 = p.dutySweep;
            case 10:
              state0 = 0;
              this._dutySweep = $.$mul$n($.$negate$n(t1), 0.00005);
          }
        t1 = p.changeAmount;
      case 11:
        state0 = 0;
        t1 = $.$gt$n(t1, 0) === true;
        t2 = p.changeAmount;
      case 12:
        state0 = 0;
        if (t1) {
          t1 = $.$mul$n($.$mul$n(t2, t2), 0.9);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = 1 - t1;
        } else {
          t1 = $.$mul$n($.$mul$n(t2, t2), 10);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = 1 + t1;
        }
        this._changeAmount = t1;
        this._changeTime = 0;
        t1 = p.changeSpeed;
      case 13:
        state0 = 0;
        if ($.$eq(t1, 1) === true)
          t1 = 0;
        else {
          t1 = p.changeSpeed;
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = (1 - t1) * (1 - t1) * 20000 + 32;
        }
        this._changeLimit = $.JSNumber_methods.toInt$0(t1);
    }
  },
  totalReset$0: function() {
    var p, t1;
    this.reset$0(this);
    p = this._params;
    t1 = p.attackTime;
    this._envelopeLength0 = $.$mul$n($.$mul$n(t1, t1), 100000);
    t1 = p.sustainTime;
    this._envelopeLength1 = $.$mul$n($.$mul$n(t1, t1), 100000);
    t1 = p.decayTime;
    this._envelopeLength2 = $.$add$ns($.$mul$n($.$mul$n(t1, t1), 100000), 10);
    return $.toInt$0$nx($.$add$ns($.$add$ns(this._envelopeLength0, this._envelopeLength1), this._envelopeLength2));
  },
  synthWave$2: function(buffer, $length) {
    var p, _filters, t1, _hpFilterCutoff, _hpFilterDeltaCutoff, _lpFilterCutoff, _lpFilterDeltaCutoff, _lpFilterOn, _masterVolume, _minFreqency, _phaser, _phaserDeltaOffset, _phaserOffset, _repeatLimit, _sustainPunch, _vibratoAmplitude, _vibratoSpeed, _waveType, _envelopeLength, _envelopeOverLength0, _envelopeOverLength1, _envelopeOverLength2, _lpFilterDamping, _phaserBuffer, _noiseBuffer, i, t2, i0, t3, t4, t5, t6, t7, t8, _finished, _envelopeTime, _envelopeVolume, _hpFilterPos, _lpFilterDeltaPos, _lpFilterOldPos, _lpFilterPos, _pos, _sample, _vibratoPhase, _phase, _envelopeStage, _phaserPos, _phaserInt, _repeatTime, t9, _periodTemp0, _periodTemp, _superSample, j, n, t10, _lpFilterPos0;
    p = this._params;
    _filters = $.$eq(p.lpFilterCutoff, 1) !== true || $.$eq(p.hpFilterCutoff, 0) !== true;
    t1 = p.hpFilterCutoff;
    _hpFilterCutoff = $.$mul$n($.$mul$n(t1, t1), 0.1);
    t1 = $.$mul$n(p.hpFilterCutoffSweep, 0.0003);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    _hpFilterDeltaCutoff = 1 + t1;
    t1 = p.lpFilterCutoff;
    _lpFilterCutoff = $.$mul$n($.$mul$n($.$mul$n(t1, t1), p.lpFilterCutoff), 0.1);
    t1 = $.$mul$n(p.lpFilterCutoffSweep, 0.0001);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    _lpFilterDeltaCutoff = 1 + t1;
    _lpFilterOn = $.$eq(p.lpFilterCutoff, 1) !== true;
    t1 = p.masterVolume;
    _masterVolume = $.$mul$n(t1, t1);
    _minFreqency = p.minFrequency;
    _phaser = $.$eq(p.phaserOffset, 0) !== true || $.$eq(p.phaserSweep, 0) !== true;
    t1 = p.phaserSweep;
    _phaserDeltaOffset = $.$mul$n($.$mul$n($.$mul$n(t1, t1), p.phaserSweep), 0.2);
    t1 = p.phaserOffset;
    t1 = $.$mul$n(t1, t1);
    _phaserOffset = $.$mul$n(t1, $.$lt$n(p.phaserOffset, 0) === true ? -1020 : 1020);
    if ($.$eq(p.repeatSpeed, 0) !== true) {
      t1 = p.repeatSpeed;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      _repeatLimit = $.JSNumber_methods.toInt$0((1 - t1) * (1 - t1) * 20000) + 32;
    } else
      _repeatLimit = 0;
    _sustainPunch = p.sustainPunch;
    _vibratoAmplitude = $.$div$n(p.vibratoDepth, 2);
    t1 = p.vibratoSpeed;
    _vibratoSpeed = $.$mul$n($.$mul$n(t1, t1), 0.01);
    _waveType = p.waveType;
    _envelopeLength = this._envelopeLength0;
    if (typeof _envelopeLength !== "number")
      throw $.iae(_envelopeLength);
    _envelopeOverLength0 = 1 / _envelopeLength;
    t1 = this._envelopeLength1;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    _envelopeOverLength1 = 1 / t1;
    t1 = this._envelopeLength2;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    _envelopeOverLength2 = 1 / t1;
    t1 = p.lpFilterResonance;
    t1 = $.$mul$n($.$mul$n(t1, t1), 20);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (typeof _lpFilterCutoff !== "number")
      throw $.iae(_lpFilterCutoff);
    _lpFilterDamping = 5 / (1 + t1) * (0.01 + _lpFilterCutoff);
    _lpFilterDamping = 1 - (_lpFilterDamping > 0.8 ? 0.8 : _lpFilterDamping);
    _phaserBuffer = $.List_List(1024, $.$double);
    $.setRuntimeTypeInfo(_phaserBuffer, [$.$double]);
    _noiseBuffer = $.List_List(32, $.$double);
    $.setRuntimeTypeInfo(_noiseBuffer, [$.$double]);
    for (t1 = _phaserBuffer.length, i = t1 - 1; i > -1; --i)
      _phaserBuffer[i] = 0;
    for (t2 = _noiseBuffer.length, i = t2 - 1, i0 = i; i0 > -1; --i0)
      _noiseBuffer[i0] = $.C__Random.nextDouble$0() * 2 - 1;
    for (t3 = $.getInterceptor$ax(buffer), t4 = $.getInterceptor(_waveType), t5 = _hpFilterDeltaCutoff !== 0, t6 = $.getInterceptor$n(_vibratoAmplitude), t7 = $.getInterceptor$n(_minFreqency), t8 = _repeatLimit !== 0, _finished = false, _envelopeTime = 0, _envelopeVolume = 0, _hpFilterPos = 0, _lpFilterDeltaPos = 0, _lpFilterOldPos = 0, _lpFilterPos = 0, _pos = 0, _sample = 0, _vibratoPhase = 0, _phase = 0, _envelopeStage = 0, _phaserPos = 0, _phaserInt = 0, _repeatTime = 0, i0 = 0; $.JSNumber_methods.$lt(i0, $length); ++i0) {
      if (_finished)
        return true;
      if (t8) {
        ++_repeatTime;
        if (_repeatTime >= _repeatLimit) {
          this.reset$0(this);
          _repeatTime = 0;
        }
      }
      if (this._changeLimit !== 0) {
        t9 = $.$add$ns(this._changeTime, 1);
        this._changeTime = t9;
        if ($.JSNumber_methods.$ge(t9, this._changeLimit)) {
          this._changeLimit = 0;
          this._period = $.$mul$n(this._period, this._changeAmount);
        }
      }
      this._slide = $.$add$ns(this._slide, this._deltaSlide);
      this._period = $.$mul$n(this._period, this._slide);
      if ($.$gt$n(this._period, this._maxPeriod)) {
        this._period = this._maxPeriod;
        if (t7.$gt(_minFreqency, 0) === true)
          _finished = true;
      }
      _periodTemp0 = this._period;
      if (t6.$gt(_vibratoAmplitude, 0) === true) {
        if (typeof _vibratoSpeed !== "number")
          throw $.iae(_vibratoSpeed);
        _vibratoPhase += _vibratoSpeed;
        t9 = Math.sin(_vibratoPhase);
        if (typeof _vibratoAmplitude !== "number")
          throw $.iae(_vibratoAmplitude);
        _periodTemp0 = $.$mul$n(_periodTemp0, 1 + t9 * _vibratoAmplitude);
      }
      _periodTemp = $.toInt$0$nx(_periodTemp0);
      if (_periodTemp < 8)
        _periodTemp = 8;
      if (t4.$eq(_waveType, 0) === true) {
        this._squareDuty = $.$add$ns(this._squareDuty, this._dutySweep);
        if ($.$lt$n(this._squareDuty, 0))
          this._squareDuty = 0;
        else if ($.$gt$n(this._squareDuty, 0.5))
          this._squareDuty = 0.5;
      }
      ++_envelopeTime;
      if ($.JSNumber_methods.$gt(_envelopeTime, _envelopeLength)) {
        ++_envelopeStage;
        switch (_envelopeStage) {
          case 1:
            _envelopeLength = this._envelopeLength1;
            break;
          case 2:
            _envelopeLength = this._envelopeLength2;
            break;
        }
        _envelopeTime = 0;
      }
      switch (_envelopeStage) {
        case 0:
          _envelopeVolume = _envelopeTime * _envelopeOverLength0;
          break;
        case 1:
          if (typeof _sustainPunch !== "number")
            throw $.iae(_sustainPunch);
          _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;
          break;
        case 2:
          _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;
          break;
        case 3:
          _finished = true;
          _envelopeVolume = 0;
          break;
      }
      if (_phaser) {
        _phaserOffset = $.$add$ns(_phaserOffset, _phaserDeltaOffset);
        _phaserInt = $.toInt$0$nx(_phaserOffset);
        t9 = $.getInterceptor$n(_phaserInt);
        if (t9.$lt(_phaserInt, 0) === true)
          _phaserInt = t9.$negate(_phaserInt);
        else if (t9.$gt(_phaserInt, 1023) === true)
          _phaserInt = 1023;
      }
      if (_filters && t5) {
        _hpFilterCutoff = $.$mul$n(_hpFilterCutoff, _hpFilterDeltaCutoff);
        t9 = $.getInterceptor$n(_hpFilterCutoff);
        if (t9.$lt(_hpFilterCutoff, 0.00001) === true)
          _hpFilterCutoff = 0.00001;
        else if (t9.$gt(_hpFilterCutoff, 0.1) === true)
          _hpFilterCutoff = 0.1;
      }
      for (_superSample = 0, j = 0; j < 8; ++j) {
        ++_phase;
        if (_phase >= _periodTemp) {
          _phase = $.JSNumber_methods.$mod(_phase, _periodTemp);
          if (t4.$eq(_waveType, 3) === true)
            for (n = i; n > -1; --n)
              _noiseBuffer[n] = $.C__Random.nextDouble$0() * 2 - 1;
        }
        switch (_waveType) {
          case 0:
            _sample = $.JSDouble_methods.$lt(_phase / _periodTemp, this._squareDuty) ? 0.5 : -0.5;
            break;
          case 1:
            _sample = 1 - _phase / _periodTemp * 2;
            break;
          case 2:
            _pos = _phase / _periodTemp;
            _pos = _pos > 0.5 ? (_pos - 1) * 6.28318531 : _pos * 6.28318531;
            t9 = 1.27323954 * _pos;
            t10 = 0.405284735 * _pos;
            _sample = _pos < 0 ? t9 + t10 * _pos : t9 - t10 * _pos;
            _sample = _sample < 0 ? 0.225 * (_sample * -_sample - _sample) + _sample : 0.225 * (_sample * _sample - _sample) + _sample;
            break;
          case 3:
            t9 = $.JSNumber_methods.toInt$0($.JSDouble_methods.abs$0(_phase * 32 / _periodTemp));
            if (t9 !== (t9 | 0))
              throw $.iae(t9);
            if (t9 < 0 || t9 >= t2)
              throw $.ioore(t9);
            _sample = _noiseBuffer[t9];
            break;
        }
        if (_filters) {
          _lpFilterCutoff *= _lpFilterDeltaCutoff;
          if (_lpFilterCutoff < 0)
            _lpFilterCutoff = 0;
          else if (_lpFilterCutoff > 0.1)
            _lpFilterCutoff = 0.1;
          if (_lpFilterOn) {
            t9 = $.$mul$n($.$sub$n(_sample, _lpFilterPos), _lpFilterCutoff);
            if (typeof t9 !== "number")
              throw $.iae(t9);
            _lpFilterDeltaPos = (_lpFilterDeltaPos + t9) * _lpFilterDamping;
            _lpFilterPos0 = _lpFilterPos;
          } else {
            _lpFilterPos0 = _sample;
            _lpFilterDeltaPos = 0;
          }
          _lpFilterPos0 = $.$add$ns(_lpFilterPos0, _lpFilterDeltaPos);
          t9 = $.$sub$n(_lpFilterPos0, _lpFilterPos);
          if (typeof t9 !== "number")
            throw $.iae(t9);
          if (typeof _hpFilterCutoff !== "number")
            throw $.iae(_hpFilterCutoff);
          _hpFilterPos = (_hpFilterPos + t9) * (1 - _hpFilterCutoff);
          _sample = _hpFilterPos;
          _lpFilterOldPos = _lpFilterPos;
          _lpFilterPos = _lpFilterPos0;
        }
        if (_phaser) {
          t9 = $.JSNumber_methods.$mod(_phaserPos, 1024);
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= t1)
            throw $.ioore(t9);
          _phaserBuffer[t9] = _sample;
          if (typeof _phaserInt !== "number")
            throw $.iae(_phaserInt);
          t9 = $.JSNumber_methods.$mod(_phaserPos - _phaserInt + 1024, 1024);
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= t1)
            throw $.ioore(t9);
          _sample = $.$add$ns(_sample, _phaserBuffer[t9]);
          ++_phaserPos;
        }
        if (typeof _sample !== "number")
          throw $.iae(_sample);
        _superSample += _sample;
      }
      if (typeof _masterVolume !== "number")
        throw $.iae(_masterVolume);
      _superSample *= 0.125 * _envelopeVolume * _masterVolume;
      if (_superSample >= 1)
        _superSample = 1;
      else if (_superSample <= -1)
        _superSample = -1;
      t3.$indexSet(buffer, i0, _superSample);
    }
    return false;
  }
};

$$.AudioSound = {"": "Object;_liblib4$_source,_clip,_loop,_sourceNode,_pausedTime,_startTime,_scheduledTime,_volume",
  get$isScheduled: function() {
    var t1 = this._sourceNode;
    return t1 == null ? false : t1.playbackState === 1;
  },
  get$isFinished: function() {
    var t1 = this._sourceNode;
    return t1 == null ? false : t1.playbackState === 3;
  },
  _setupSourceNodeForPlayback$0: function() {
    var t1, t2;
    t1 = this._liblib4$_source;
    this._sourceNode = t1._manager._context.createBufferSource();
    t2 = this._clip;
    if (t2 != null && t2.get$_buffer() != null) {
      this._sourceNode.buffer = t2.get$_buffer();
      this._sourceNode.loopStart = 0;
      this._sourceNode.loopEnd = $.get$duration$x(t2.get$_buffer());
    }
    this._sourceNode.gain.value = this._volume;
    this._sourceNode.loop = this._loop;
    this._sourceNode.connect(t1._gainNode, 0, 0);
  },
  get$pause: function(_) {
    return this._pausedTime != null;
  },
  pause$1: function($receiver, arg0) {
    return this.get$pause($receiver).call$1(arg0);
  },
  set$pause: function(_, b) {
    if (b === true) {
      if (this._pausedTime != null)
        return;
      this._pause$0();
    } else {
      if (this._pausedTime == null)
        return;
      this._resume$0();
    }
  },
  _computePausedTime$0: function() {
    var now, t1, delta;
    now = this._liblib4$_source._manager._context.currentTime;
    t1 = $.getInterceptor$n(now);
    delta = t1.$sub(now, this._startTime);
    if (t1.$lt(now, this._scheduledTime))
      return t1.$sub(now, this._scheduledTime);
    if (this._loop) {
      t1 = this._sourceNode.buffer.duration;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      return $.JSNumber_methods.$mod(delta, t1);
    }
    return delta;
  },
  _pause$0: function() {
    if (this._startTime == null)
      return;
    $.Primitives_printString("Sound.pause");
    var t1 = this._sourceNode;
    if (t1 != null)
      $.Primitives_printString($.S(t1.playbackState));
    if (this._sourceNode != null) {
      this._pausedTime = this._computePausedTime$0();
      t1 = this._sourceNode;
      if (t1 != null)
        $.stop$1$x(t1, 0);
      this._sourceNode = null;
      $.Primitives_printString("paused at " + $.S(this._pausedTime));
    }
  },
  _resume$0: function() {
    var t1, t2, t3, t4;
    if (this._pausedTime == null)
      return;
    $.Primitives_printString("Sound.resume");
    t1 = this._sourceNode;
    if (t1 != null)
      $.Primitives_printString($.S(t1.playbackState));
    this._setupSourceNodeForPlayback$0();
    t1 = $.$lt$n(this._pausedTime, 0);
    t2 = this._pausedTime;
    t3 = this._liblib4$_source;
    if (t1 === true) {
      this._pausedTime = $.$negate$n(t2);
      $.Primitives_printString("Scheduling to play sound in " + $.S(this._pausedTime) + ".");
      t1 = t3._manager;
      this._scheduledTime = $.$add$ns(t1._context.currentTime, this._pausedTime);
      t2 = this._sourceNode;
      $.start$3$x(t2, this._scheduledTime, 0, t2.buffer.duration);
      this._startTime = t1._context.currentTime;
    } else {
      $.Primitives_printString("Starting to play at offset " + $.S(t2));
      t1 = t3._manager;
      this._scheduledTime = t1._context.currentTime;
      t2 = this._sourceNode;
      t3 = this._scheduledTime;
      t4 = this._pausedTime;
      $.start$3$x(t2, t3, t4, $.$sub$n(t2.buffer.duration, t4));
      this._startTime = $.$sub$n(t1._context.currentTime, this._pausedTime);
    }
    this._pausedTime = null;
  },
  play$1: function(_, when) {
    var t1 = this._sourceNode;
    if (t1 != null)
      $.stop$1$x(t1, 0);
    this._sourceNode = null;
    this._setupSourceNodeForPlayback$0();
    t1 = this._liblib4$_source._manager;
    this._scheduledTime = $.$add$ns(t1._context.currentTime, when);
    $.start$1$x(this._sourceNode, this._scheduledTime);
    this._startTime = t1._context.currentTime;
  },
  play$0: function($receiver) {
    return this.play$1($receiver, 0);
  },
  stop$0: function(_) {
    var t1 = this._sourceNode;
    if (t1 != null)
      $.stop$1$x(t1, 0);
    this._sourceNode = null;
    this._startTime = null;
    this._scheduledTime = null;
    this._pausedTime = null;
  },
  AudioSound$_internal$3: function(_source, _clip, _loop) {
    this._setupSourceNodeForPlayback$0();
  },
  $isAudioSound: true
};

$$.AudioSource = {"": "Object;_manager<,_liblib4$_name,_output,_gainNode,_panNode,_sounds,_mutedVolume,_liblib4$_isPaused,_x,_y,_z,_positional",
  _setupNodes$0: function() {
    var t1, t2, t3;
    this._panNode.disconnect(0);
    this._gainNode.disconnect(0);
    t1 = this._positional;
    t2 = this._gainNode;
    t3 = this._output;
    if (t1) {
      t2.connect(this._panNode, 0, 0);
      this._panNode.connect(t3, 0, 0);
    } else
      t2.connect(t3, 0, 0);
  },
  set$positional: function(b) {
    this._positional = b;
    this._setupNodes$0();
  },
  playOnceIn$2: function(delay, clip) {
    var sound = $.AudioSound$_internal(this, clip, false);
    $.add$1$ax(this._sounds, sound);
    sound.play$1(sound, delay);
    sound.set$pause(sound, this.get$pause(this));
    return sound;
  },
  playLoopedIn$2: function(delay, clip) {
    var sound = $.AudioSound$_internal(this, clip, true);
    $.add$1$ax(this._sounds, sound);
    sound.play$1(sound, delay);
    sound.set$pause(sound, this.get$pause(this));
    return sound;
  },
  _scanSounds$0: function() {
    var i, sound, t1, t2;
    for (i = $.get$length$asx(this._sounds) - 1; i >= 0; --i) {
      sound = $.$index$asx(this._sounds, i);
      if (sound.get$isFinished() === true) {
        t1 = $.get$length$asx(this._sounds);
        t2 = this._sounds;
        $.$indexSet$ax(t2, i, $.$index$asx(t2, t1 - 1));
        $.removeLast$0$ax(this._sounds);
        $.Primitives_printString("removing sound.");
        $.stop$0$x(sound);
      }
    }
  },
  get$pause: function(_) {
    return this._liblib4$_isPaused;
  },
  pause$1: function($receiver, arg0) {
    return this.get$pause($receiver).call$1(arg0);
  },
  set$pause: function(_, b) {
    if (b === true) {
      if (this._liblib4$_isPaused)
        return;
      this._pause$0();
      this._liblib4$_isPaused = true;
    } else {
      if (!this._liblib4$_isPaused)
        return;
      this._resume$0();
      this._liblib4$_isPaused = false;
    }
  },
  _pause$0: function() {
    this._scanSounds$0();
    $.forEach$1$ax(this._sounds, new $.AudioSource__pause_anon());
  },
  _resume$0: function() {
    this._scanSounds$0();
    $.forEach$1$ax(this._sounds, new $.AudioSource__resume_anon());
  },
  stop$0: function(_) {
    $.forEach$1$ax(this._sounds, new $.AudioSource_stop_anon());
    this._scanSounds$0();
  },
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  AudioSource$_internal$3: function(_manager, _name, _output) {
    var t1 = this._manager;
    this._gainNode = $.createGain$0$x(t1._context);
    this._panNode = t1._context.createPanner();
    this._panNode.coneOuterGain = 1;
    this._setupNodes$0();
    t1 = $.List_List($, $.AudioSound);
    $.setRuntimeTypeInfo(t1, [$.AudioSound]);
    this._sounds = t1;
  },
  $isAudioSource: true
};

$$.AudioSource__pause_anon = {"": "Closure;",
  call$1: function(sound) {
    $.set$pause$x(sound, true);
  }
};

$$.AudioSource__resume_anon = {"": "Closure;",
  call$1: function(sound) {
    $.set$pause$x(sound, false);
  }
};

$$.AudioSource_stop_anon = {"": "Closure;",
  call$1: function(sound) {
    $.stop$0$x(sound);
  }
};

// Native classes
$$._WorkerStub = {"": "Interceptor;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null
};

$$._HTMLElement = {"": "Element;"};

$$.AbstractWorker = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.AnchorElement = {"": "Element;href=,target=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.ApplicationCache = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.AreaElement = {"": "Element;href=,target="};

$$.ArrayBuffer = {"": "Interceptor;", $isArrayBuffer: true, $asArrayBuffer: null};

$$.ArrayBufferView = {"": "Interceptor;", $isArrayBufferView: true, $asArrayBufferView: null};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;", $isAudioElement: true, $asAudioElement: null};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BarInfo = {"": "Interceptor;"};

$$.BaseElement = {"": "Element;href=,target="};

$$.BeforeLoadEvent = {"": "Event;url="};

$$.Blob = {"": "Interceptor;size=", $isBlob: true, $asBlob: null};

$$.BodyElement = {"": "Element;",
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.ButtonElement = {"": "Element;value=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height%,width%",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasProxy = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;canvas="};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;fillStyle%,font%,globalAlpha},lineWidth},strokeStyle%,textBaseline}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text, x, y, maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  measureText$1: function(receiver, text) {
    return receiver.measureText(text);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  quadraticCurveTo$4: function(receiver, cpx, cpy, x, y) {
    return receiver.quadraticCurveTo(cpx, cpy, x, y);
  },
  rect$4: function(receiver, x, y, width, height) {
    return receiver.rect(x, y, width, height);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source, destX, destY);
  }
};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.Coordinates = {"": "Interceptor;"};

$$.Crypto = {"": "Interceptor;"};

$$.CssCharsetRule = {"": "CssRule;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssFontFaceRule = {"": "CssRule;"};

$$.CssHostRule = {"": "CssRule;"};

$$.CssImportRule = {"": "CssRule;href="};

$$.CssKeyframeRule = {"": "CssRule;"};

$$.CssKeyframesRule = {"": "CssRule;"};

$$.CssMediaRule = {"": "CssRule;"};

$$.CssPageRule = {"": "CssRule;"};

$$.CssRule = {"": "Interceptor;", $isCssRule: true, $asCssRule: null};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  clear$1$color: function($receiver, arg0) {
    return this.get$clear($receiver).call$1$color(arg0);
  },
  get$font: function(receiver) {
    return this.getPropertyValue$1(receiver, "font");
  },
  set$font: function(receiver, value) {
    this.setProperty$3(receiver, "font", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  get$page: function(receiver) {
    return this.getPropertyValue$1(receiver, "page");
  },
  get$size: function(receiver) {
    return this.getPropertyValue$1(receiver, "size");
  },
  set$src: function(receiver, value) {
    this.setProperty$3(receiver, "src", value, "");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
};

$$.CssStyleRule = {"": "CssRule;"};

$$.CssStyleSheet = {"": "StyleSheet;"};

$$.CssUnknownRule = {"": "CssRule;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataTransfer = {"": "Interceptor;"};

$$.DataTransferItem = {"": "Interceptor;"};

$$.DataTransferItemList = {"": "Interceptor;length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file, type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  }
};

$$.DataView = {"": "ArrayBufferView;"};

$$.DetailsElement = {"": "Element;",
  open$0: function($receiver) {
    return this.open.call$0();
  },
  open$2: function($receiver, arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  },
  open$3$onUpgradeNeeded$version: function($receiver, arg0, arg1, arg2) {
    return this.open.call$3$onUpgradeNeeded$version(arg0, arg1, arg2);
  }
};

$$.DeviceAcceleration = {"": "Interceptor;x=,y="};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DeviceRotationRate = {"": "Interceptor;"};

$$.DialogElement = {"": "Element;",
  open$0: function($receiver) {
    return this.open.call$0();
  },
  open$2: function($receiver, arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  },
  open$3$onUpgradeNeeded$version: function($receiver, arg0, arg1, arg2) {
    return this.open.call$3$onUpgradeNeeded$version(arg0, arg1, arg2);
  }
};

$$.DirectoryEntry = {"": "Entry;"};

$$.DirectoryReader = {"": "Interceptor;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  get$onTouchEnd: function(receiver) {
    return $.EventStreamProvider_touchend.forTarget$1(receiver);
  },
  get$onTouchMove: function(receiver) {
    return $.EventStreamProvider_touchmove.forTarget$1(receiver);
  },
  get$onTouchStart: function(receiver) {
    return $.EventStreamProvider_touchstart.forTarget$1(receiver);
  }
};

$$.DocumentFragment = {"": "Node;"};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomImplementation = {"": "Interceptor;"};

$$.DomMimeType = {"": "Interceptor;", $isDomMimeType: true, $asDomMimeType: null};

$$.DomMimeTypeArray = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.DomMimeType);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.DomMimeType);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.DomMimeType]; },
  $isIterable: true,
  $asIterable: function () { return [$.DomMimeType]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomNamedFlowCollection = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  }
};

$$.DomParser = {"": "Interceptor;"};

$$.DomPath = {"": "Interceptor;",
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    return receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  quadraticCurveTo$4: function(receiver, cpx, cpy, x, y) {
    return receiver.quadraticCurveTo(cpx, cpy, x, y);
  },
  rect$4: function(receiver, x, y, width, height) {
    return receiver.rect(x, y, width, height);
  }
};

$$.DomPlugin = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isDomPlugin: true,
  $asDomPlugin: null
};

$$.DomPluginArray = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.DomPlugin);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.DomPlugin);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.DomPlugin]; },
  $isIterable: true,
  $asIterable: function () { return [$.DomPlugin]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomSecurityPolicy = {"": "Interceptor;"};

$$.DomSelection = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomSettableTokenList = {"": "DomTokenList;value="};

$$.DomStringList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.String);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.String);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  contains$1: function(receiver, string) {
    return receiver.contains(string);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.String]; },
  $isIterable: true,
  $asIterable: function () { return [$.String]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomTokenList = {"": "Interceptor;length=",
  contains$1: function(receiver, token) {
    return receiver.contains(token);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;hidden%,id%,offsetParent=",
  get$client: function(receiver) {
    return $.Rect$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$offset: function(receiver) {
    return $.Rect$(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  translate$2: function($receiver, arg0, arg1) {
    return this.translate.call$2(arg0, arg1);
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  get$onTouchEnd: function(receiver) {
    return $.EventStreamProvider_touchend.forTarget$1(receiver);
  },
  get$onTouchMove: function(receiver) {
    return $.EventStreamProvider_touchmove.forTarget$1(receiver);
  },
  get$onTouchStart: function(receiver) {
    return $.EventStreamProvider_touchstart.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;height%,src},width%"};

$$.EntityReference = {"": "Node;"};

$$.Entry = {"": "Interceptor;", $isEntry: true, $asEntry: null};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;",
  get$currentTarget: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.currentTarget);
  },
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventSource = {"": "EventTarget;url=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.File = {"": "Blob;", $isFile: true, $asFile: null};

$$.FileEntry = {"": "Entry;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.File);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.File);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isFileList: true,
  $asFileList: null,
  $isList: true,
  $asList: function () { return [$.File]; },
  $isIterable: true,
  $asIterable: function () { return [$.File]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FileReader = {"": "EventTarget;result=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.FileSystem = {"": "Interceptor;"};

$$.FileWriter = {"": "EventTarget;length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.Float32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$double]; },
  $isIterable: true,
  $asIterable: function () { return [$.$double]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$double]; },
  $isIterable: true,
  $asIterable: function () { return [$.$double]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FontLoader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.FormData = {"": "Interceptor;"};

$$.FormElement = {"": "Element;length=,target=",
  reset$0: function(receiver) {
    return receiver.reset();
  }
};

$$.Gamepad = {"": "Interceptor;id=,index=", $isGamepad: true, $asGamepad: null};

$$.Geolocation = {"": "Interceptor;"};

$$.Geoposition = {"": "Interceptor;"};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.History = {"": "Interceptor;length="};

$$.HtmlAllCollection = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlCollection = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;",
  get$hidden: function(receiver) {
    return receiver.webkitHidden;
  }
};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$2: function($receiver, method, url) {
    return $receiver.open(method, url);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.HttpRequestUpload = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.IFrameElement = {"": "Element;height%,src},width%"};

$$.ImageData = {"": "Interceptor;height=,width=", $isImageData: true, $asImageData: null};

$$.ImageElement = {"": "Element;height%,src},width%,x=,y="};

$$.InputElement = {"": "Element;height%,pattern=,readOnly=,size=,src},value=,width%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  },
  $isElement: true,
  $asElement: null,
  $isNode: true,
  $asNode: null
};

$$.Int16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.LIElement = {"": "Element;value="};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;href=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.LocalMediaStream = {"": "MediaStream;",
  stop$0: function(receiver) {
    return receiver.stop();
  }
};

$$.Location = {"": "Interceptor;href=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  $asLocation: null
};

$$.MapElement = {"": "Element;"};

$$.MediaController = {"": "EventTarget;duration=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  pause$0: function(receiver) {
    return receiver.pause();
  },
  get$pause: function(receiver) {
    return new $.Bound_pause_MediaController(this, "pause$0", receiver);
  },
  play$0: function(receiver) {
    return receiver.play();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaElement = {"": "Element;duration=,ended=,src}",
  load$0: function(receiver) {
    return receiver.load();
  },
  pause$0: function(receiver) {
    return receiver.pause();
  },
  get$pause: function(receiver) {
    return new $.Bound_pause_MediaElement(this, "pause$0", receiver);
  },
  play$0: function(receiver) {
    return receiver.play();
  },
  get$onCanPlay: function(receiver) {
    return $.EventStreamProvider_canplay.forTarget$1(receiver);
  }
};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaList = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  }
};

$$.MediaQueryList = {"": "Interceptor;"};

$$.MediaSource = {"": "EventTarget;duration=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStream = {"": "EventTarget;ended=,id=,label=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrack = {"": "EventTarget;id=,label=",
  enabled$1: function($receiver, arg0) {
    return this.enabled.call$1(arg0);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MemoryInfo = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MessageChannel = {"": "Interceptor;"};

$$.MessageEvent = {"": "Event;"};

$$.MessagePort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.MetaElement = {"": "Element;"};

$$.Metadata = {"": "Interceptor;size="};

$$.MeterElement = {"": "Element;value="};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;button=",
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  },
  get$offset: function(receiver) {
    var target, t1;
    if (!!receiver.offsetX)
      return $.Point$(receiver.offsetX, receiver.offsetY);
    else {
      target = this.get$target(receiver);
      if (typeof target !== "object" || target === null || !$.getInterceptor(target).$isElement)
        throw $.wrapException($.UnsupportedError$("offsetX is only supported on elements"));
      t1 = this.get$client(receiver);
      t1 = t1.$sub(t1, $.get$topLeft$x($.getBoundingClientRect$0$x(this.get$target(receiver))));
      return t1.toInt$0(t1);
    }
  },
  $isMouseEvent: true,
  $asMouseEvent: null
};

$$.MutationEvent = {"": "Event;"};

$$.MutationObserver = {"": "Interceptor;",
  observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
    var parsedOptions, t1;
    parsedOptions = {};
    t1 = new $.MutationObserver_observe_override(parsedOptions);
    t1.call$2("childList", childList);
    t1.call$2("attributes", attributes);
    t1.call$2("characterData", characterData);
    t1.call$2("subtree", subtree);
    t1.call$2("attributeOldValue", attributeOldValue);
    t1.call$2("characterDataOldValue", characterDataOldValue);
    if (attributeFilter != null)
      t1.call$2("attributeFilter", attributeFilter);
    receiver.observe(target, parsedOptions);
  },
  observe$2$attributes: function($receiver, target, attributes) {
    return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, null, null, attributes, null, null, null, null);
  }
};

$$.MutationRecord = {"": "Interceptor;target="};

$$.NamedFlow = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.Navigator = {"": "Interceptor;userAgent="};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Object.prototype.toString$0.call(receiver, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeFilter = {"": "Interceptor;"};

$$.NodeIterator = {"": "Interceptor;"};

$$.NodeList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.Notification = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  cancel$0: function(receiver) {
    return receiver.cancel();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.NotificationCenter = {"": "Interceptor;"};

$$.OListElement = {"": "Element;",
  start$1: function($receiver, arg0) {
    return this.start.call$1(arg0);
  },
  start$3: function($receiver, arg0, arg1, arg2) {
    return this.start.call$3(arg0, arg1, arg2);
  }
};

$$.ObjectElement = {"": "Element;height%,width%"};

$$.OptGroupElement = {"": "Element;label=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OptionElement = {"": "Element;index=,label=,value=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OutputElement = {"": "Element;value="};

$$.OverflowEvent = {"": "Event;"};

$$.PagePopupController = {"": "Interceptor;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value="};

$$.Performance = {"": "EventTarget;"};

$$.PerformanceEntry = {"": "Interceptor;duration="};

$$.PerformanceEntryList = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  }
};

$$.PerformanceMark = {"": "PerformanceEntry;"};

$$.PerformanceMeasure = {"": "PerformanceEntry;"};

$$.PerformanceNavigation = {"": "Interceptor;"};

$$.PerformanceResourceTiming = {"": "PerformanceEntry;"};

$$.PerformanceTiming = {"": "Interceptor;"};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;target="};

$$.ProgressElement = {"": "Element;value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RadioNodeList = {"": "NodeList;value="};

$$.Range = {"": "Interceptor;",
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannel = {"": "EventTarget;label=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfSender = {"": "EventTarget;duration=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidate = {"": "Interceptor;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.RtcPeerConnection = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcSessionDescription = {"": "Interceptor;"};

$$.RtcStatsReport = {"": "Interceptor;id="};

$$.RtcStatsResponse = {"": "Interceptor;",
  result$0: function(receiver) {
    return receiver.result();
  },
  get$result: function(receiver) {
    return new $.Bound_result_RtcStatsResponse(this, "result$0", receiver);
  }
};

$$.Screen = {"": "Interceptor;height=,width="};

$$.ScriptElement = {"": "Element;src}"};

$$.ScriptProfile = {"": "Interceptor;"};

$$.ScriptProfileNode = {"": "Interceptor;url="};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length%,size=,value=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  }
};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
};

$$.SourceBuffer = {"": "Interceptor;", $isSourceBuffer: true, $asSourceBuffer: null};

$$.SourceBufferList = {"": "EventTarget;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.SourceBuffer);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SourceBuffer);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function () { return [$.SourceBuffer]; },
  $isIterable: true,
  $asIterable: function () { return [$.SourceBuffer]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SourceElement = {"": "Element;src}"};

$$.SpanElement = {"": "Element;"};

$$.SpeechGrammar = {"": "Interceptor;src}", $isSpeechGrammar: true, $asSpeechGrammar: null};

$$.SpeechGrammarList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.SpeechGrammar);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechGrammar);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.SpeechGrammar]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechGrammar]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechInputResult = {"": "Interceptor;", $isSpeechInputResult: true, $asSpeechInputResult: null};

$$.SpeechRecognition = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  stop$0: function(receiver) {
    return receiver.stop();
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.SpeechRecognitionAlternative = {"": "Interceptor;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechRecognitionResult = {"": "Interceptor;length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isSpeechRecognitionResult: true,
  $asSpeechRecognitionResult: null
};

$$.Storage = {"": "Interceptor;",
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  remove$1: function(receiver, key) {
    var value = receiver.getItem(key);
    receiver.removeItem(key);
    return value;
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_anon(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$isEmpty: function(receiver) {
    return receiver.key(0) == null;
  },
  $isMap: true,
  $asMap: function () { return [$.String, $.String]; }
};

$$.StorageEvent = {"": "Event;key=,url="};

$$.StorageInfo = {"": "Interceptor;"};

$$.StorageQuota = {"": "Interceptor;"};

$$.StyleElement = {"": "Element;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.StyleMedia = {"": "Interceptor;"};

$$.StyleSheet = {"": "Interceptor;href=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  },
  $isStyleSheet: true,
  $asStyleSheet: null
};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "Element;", $isTableRowElement: true, $asTableRowElement: null};

$$.TableSectionElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;readOnly=,rows=,value=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.TextEvent = {"": "UIEvent;"};

$$.TextMetrics = {"": "Interceptor;width="};

$$.TextTrack = {"": "EventTarget;label=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isTextTrack: true,
  $asTextTrack: null
};

$$.TextTrackCue = {"": "EventTarget;id%,size=,vertical=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isTextTrackCue: true,
  $asTextTrackCue: null
};

$$.TextTrackCueList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.TextTrackCue);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.TextTrackCue);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function () { return [$.TextTrackCue]; },
  $isIterable: true,
  $asIterable: function () { return [$.TextTrackCue]; }
};

$$.TextTrackList = {"": "EventTarget;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.TextTrack);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.TextTrack);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function () { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function () { return [$.TextTrack]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length=",
  start$1: function(receiver, index) {
    return receiver.start(index);
  }
};

$$.TitleElement = {"": "Element;"};

$$.Touch = {"": "Interceptor;",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  },
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  },
  $isTouch: true,
  $asTouch: null
};

$$.TouchEvent = {"": "UIEvent;"};

$$.TouchList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Touch);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Touch);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function () { return [$.Touch]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "Element;label=,src}"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.TreeWalker = {"": "Interceptor;"};

$$.UIEvent = {"": "Event;",
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  }
};

$$.UListElement = {"": "Element;"};

$$.Uint16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedArray = {"": "Uint8Array;",
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  $isList: true,
  $asList: function () { return [$.$int]; },
  $isIterable: true,
  $asIterable: function () { return [$.$int]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.UnknownElement = {"": "Element;"};

$$.Url = {"": "Interceptor;"};

$$.ValidityState = {"": "Interceptor;"};

$$.VideoElement = {"": "MediaElement;height%,width%"};

$$.WebKitCssFilterRule = {"": "CssRule;"};

$$.WebKitCssRegionRule = {"": "CssRule;"};

$$.WebSocket = {"": "EventTarget;url=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;navigator=",
  setImmediate$1: function(receiver, callback) {
    if ($._pendingMicrotasks == null) {
      $._pendingMicrotasks = [];
      if ($._microtaskScheduler == null)
        $._microtaskScheduler = $._MicrotaskScheduler__MicrotaskScheduler$best($._completeMicrotasks);
      $._microtaskScheduler.maybeSchedule$0();
    }
    $.add$1$ax($._pendingMicrotasks, callback);
  },
  get$animationFrame: function(receiver) {
    var completer = $.Completer_Completer($.num);
    this.requestAnimationFrame$1(receiver, new $.Window_animationFrame_anon(completer));
    return completer.get$future();
  },
  open$3: function(receiver, url, $name, options) {
    if (options == null)
      return $._DOMWindowCrossFrame__createSafe(receiver.open(url, $name));
    else
      return $._DOMWindowCrossFrame__createSafe(receiver.open(url, $name, options));
  },
  open$2: function($receiver, url, name) {
    return this.open$3($receiver, url, name, null);
  },
  get$location: function(receiver) {
    var result = this.get$_location(receiver);
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = $._LocationWrapper$(result);
    return receiver._location_wrapper;
  },
  get$_location: function(receiver) {
    return receiver.location;
  },
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$indexedDB: function(receiver) {
    return receiver.indexedDB || receiver.webkitIndexedDB || receiver.mozIndexedDB;
  },
  _setImmediate$1: function(receiver, callback) {
    receiver.setImmediate($.convertDartClosureToJS(callback, 0));
  },
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
      return;
    }
    receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  },
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, $);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  stop$0: function(receiver) {
    return receiver.stop();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  get$onTouchEnd: function(receiver) {
    return $.EventStreamProvider_touchend.forTarget$1(receiver);
  },
  get$onTouchMove: function(receiver) {
    return $.EventStreamProvider_touchmove.forTarget$1(receiver);
  },
  get$onTouchStart: function(receiver) {
    return $.EventStreamProvider_touchstart.forTarget$1(receiver);
  }
};

$$.Worker = {"": "AbstractWorker;",
  postMessage$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message, messagePorts);
  },
  postMessage$1: function($receiver, message) {
    return $receiver.postMessage(message);
  },
  terminate$0: function(receiver) {
    return receiver.terminate();
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.XPathEvaluator = {"": "Interceptor;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathExpression = {"": "Interceptor;"};

$$.XPathNSResolver = {"": "Interceptor;"};

$$.XPathResult = {"": "Interceptor;"};

$$.XmlSerializer = {"": "Interceptor;"};

$$.XsltProcessor = {"": "Interceptor;",
  reset$0: function(receiver) {
    return receiver.reset();
  }
};

$$._CSSValue = {"": "Interceptor;", $is_CSSValue: true, $as_CSSValue: null};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(receiver) {
    return $.Rect$($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  get$topLeft: function(receiver) {
    return $.Point$(receiver.left, receiver.top);
  },
  $isRect: true,
  $asRect: null
};

$$._ClientRectList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Rect);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Rect);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Rect]; },
  $isIterable: true,
  $asIterable: function () { return [$.Rect]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssRuleList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.CssRule);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.CssRule);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.CssRule]; },
  $isIterable: true,
  $asIterable: function () { return [$.CssRule]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssValueList = {"": "_CSSValue;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $._CSSValue);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $._CSSValue);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$._CSSValue]; },
  $isIterable: true,
  $asIterable: function () { return [$._CSSValue]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._DomPoint = {"": "Interceptor;x=,y="};

$$._EntryArray = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Entry);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Entry);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function () { return [$.Entry]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntryArraySync = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $._EntrySync);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $._EntrySync);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$._EntrySync]; },
  $isIterable: true,
  $asIterable: function () { return [$._EntrySync]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GamepadList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Gamepad);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Gamepad);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Gamepad]; },
  $isIterable: true,
  $asIterable: function () { return [$.Gamepad]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechInputResultList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.SpeechInputResult);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechInputResult);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.SpeechInputResult]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechInputResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechRecognitionResultList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.SpeechRecognitionResult);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechRecognitionResult);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.SpeechRecognitionResult]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechRecognitionResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._StyleSheetList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.StyleSheet);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.StyleSheet);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.StyleSheet]; },
  $isIterable: true,
  $asIterable: function () { return [$.StyleSheet]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Cursor = {"": "Interceptor;key=",
  next$1: function(receiver, key) {
    return receiver.continue(key);
  },
  next$0: function($receiver) {
    return $receiver.continue();
  },
  get$next: function(receiver) {
    return new $.Bound_next_Cursor(this, "next$1", receiver);
  }
};

$$.CursorWithValue = {"": "Cursor;",
  get$value: function(receiver) {
    return $._convertNativeToDart_IDBAny(receiver.value);
  }
};

$$.Database = {"": "EventTarget;objectStoreNames=",
  createObjectStore$3$autoIncrement$keyPath: function(receiver, $name, autoIncrement, keyPath) {
    var options = $.makeLiteralMap([]);
    if (keyPath != null)
      options.$indexSet(options, "keyPath", keyPath);
    if (autoIncrement != null)
      options.$indexSet(options, "autoIncrement", autoIncrement);
    return this.$$dom_createObjectStore$2(receiver, $name, options);
  },
  createObjectStore$1: function($receiver, name) {
    return this.createObjectStore$3$autoIncrement$keyPath($receiver, name, null, null);
  },
  transaction$2: function(receiver, storeName_OR_storeNames, mode) {
    var t1 = $.getInterceptor(mode);
    if (t1.$eq(mode, "readonly") !== true && t1.$eq(mode, "readwrite") !== true)
      throw $.wrapException($.ArgumentError$(mode));
    return receiver.transaction(storeName_OR_storeNames, mode);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_createObjectStore$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.createObjectStore($name, $.convertDartToNative_Dictionary(options));
    return receiver.createObjectStore($name);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  $isDatabase: true,
  $asDatabase: null
};

$$.IdbFactory = {"": "Interceptor;",
  open$4$onBlocked$onUpgradeNeeded$version: function(receiver, $name, onBlocked, onUpgradeNeeded, version) {
    var request, e, stacktrace, t1, exception;
    if (version == null !== (onUpgradeNeeded == null))
      return $._FutureImpl$immediateError($.ArgumentError$("version and onUpgradeNeeded must be specified together"), null, null);
    try {
      request = null;
      if (version != null)
        request = receiver.open($name, version);
      else
        request = receiver.open($name);
      if (onUpgradeNeeded != null)
        $.get$onUpgradeNeeded$x(request).listen$1(onUpgradeNeeded);
      if (onBlocked != null)
        $.get$onBlocked$x(request).listen$1(onBlocked);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  open$3$onUpgradeNeeded$version: function($receiver, name, onUpgradeNeeded, version) {
    return this.open$4$onBlocked$onUpgradeNeeded$version($receiver, name, null, onUpgradeNeeded, version);
  }
};

$$.Index = {"": "Interceptor;",
  get$1: function(receiver, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = receiver.get(key);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  openCursor$4$autoAdvance$direction$key$range: function(receiver, autoAdvance, direction, key, range) {
    var key_OR_range, request;
    if (key != null) {
      if (range != null)
        throw $.wrapException($.ArgumentError$("Cannot specify both key and range."));
      key_OR_range = key;
    } else
      key_OR_range = range;
    request = direction == null ? receiver.openCursor(key_OR_range) : receiver.openCursor(key_OR_range, direction);
    return $.ObjectStore__cursorStreamFromResult(request, autoAdvance);
  },
  openCursor$1$autoAdvance: function($receiver, autoAdvance) {
    return this.openCursor$4$autoAdvance$direction$key$range($receiver, autoAdvance, null, null, null);
  },
  objectStore$1: function($receiver, arg0) {
    return this.objectStore.call$1(arg0);
  }
};

$$.KeyRange = {"": "Interceptor;"};

$$.ObjectStore = {"": "Interceptor;",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(receiver, value, key);
      else
        request = this.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  clear$0: function(receiver) {
    var e, stacktrace, t1, exception;
    try {
      t1 = $._completeRequest(receiver.clear());
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  put$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_put$2(receiver, value, key);
      else
        request = this.$$dom_put$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  getObject$1: function(receiver, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = receiver.get(key);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  openCursor$4$autoAdvance$direction$key$range: function(receiver, autoAdvance, direction, key, range) {
    var key_OR_range, request;
    if (key != null) {
      if (range != null)
        throw $.wrapException($.ArgumentError$("Cannot specify both key and range."));
      key_OR_range = key;
    } else
      key_OR_range = range;
    request = direction == null ? receiver.openCursor(key_OR_range) : receiver.openCursor(key_OR_range, direction);
    return $.ObjectStore__cursorStreamFromResult(request, autoAdvance);
  },
  openCursor$1$autoAdvance: function($receiver, autoAdvance) {
    return this.openCursor$4$autoAdvance$direction$key$range($receiver, autoAdvance, null, null, null);
  },
  transaction$2: function($receiver, arg0, arg1) {
    return this.transaction.call$2(arg0, arg1);
  },
  transaction$3: function($receiver, arg0, arg1, arg2) {
    return this.transaction.call$3(arg0, arg1, arg2);
  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return receiver.add($._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return receiver.add($._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  },
  index$1: function(receiver, $name) {
    return receiver.index($name);
  },
  get$index: function(receiver) {
    return new $.BoundClosure$i1(this, "index$1", receiver);
  },
  $$dom_put$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return receiver.put($._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return receiver.put($._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_put$1: function($receiver, value) {
    return this.$$dom_put$2($receiver, value, $);
  }
};

$$.OpenDBRequest = {"": "Request;",
  get$onBlocked: function(receiver) {
    return $.EventStreamProvider_blocked.forTarget$1(receiver);
  },
  get$onUpgradeNeeded: function(receiver) {
    return $.EventStreamProvider_upgradeneeded.forTarget$1(receiver);
  }
};

$$.Request = {"": "EventTarget;",
  get$result: function(receiver) {
    return $._convertNativeToDart_IDBAny(receiver.result);
  },
  transaction$2: function($receiver, arg0, arg1) {
    return this.transaction.call$2(arg0, arg1);
  },
  transaction$3: function($receiver, arg0, arg1, arg2) {
    return this.transaction.call$3(arg0, arg1, arg2);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onSuccess: function(receiver) {
    return $.EventStreamProvider_success.forTarget$1(receiver);
  }
};

$$.Transaction = {"": "EventTarget;db=",
  get$completed: function(receiver) {
    var completer, t1;
    completer = $.Completer_Completer($.Database);
    t1 = this.get$onComplete(receiver);
    t1.get$first(t1).then$1(new $.Transaction_completed_anon(receiver, completer));
    t1 = this.get$onError(receiver);
    t1.get$first(t1).then$1(new $.Transaction_completed_anon0(completer));
    t1 = this.get$onAbort(receiver);
    t1.get$first(t1).then$1(new $.Transaction_completed_anon1(completer));
    return completer.get$future();
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  objectStore$1: function(receiver, $name) {
    return receiver.objectStore($name);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onComplete: function(receiver) {
    return $.EventStreamProvider_complete.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  }
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;target=,href="};

$$.AltGlyphElement = {"": "TextPositioningElement;href="};

$$.Angle = {"": "Interceptor;value="};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedAngle = {"": "Interceptor;"};

$$.AnimatedBoolean = {"": "Interceptor;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedInteger = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedPreserveAspectRatio = {"": "Interceptor;"};

$$.AnimatedRect = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimatedTransformList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;cx=,cy="};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.ElementInstance = {"": "EventTarget;",
  get$onAbort: function(receiver) {
    return $.EventStreamProvider_abort.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  $isElementInstance: true,
  $asElementInstance: null
};

$$.EllipseElement = {"": "StyledElement;cx=,cy="};

$$.FEBlendElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;values=,height=,result=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,result=,width=,x=,y=,href="};

$$.FEMergeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.Length = {"": "Interceptor;value=", $isLength: true, $asLength: null};

$$.LengthList = {"": "Interceptor;",
  $index: function(receiver, index) {
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Length);
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Length);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = $.$sub$n(this.get$length(receiver), 1);
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $isList: true,
  $asList: function () { return [$.Length]; },
  $isIterable: true,
  $asIterable: function () { return [$.Length]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.Matrix = {"": "Interceptor;",
  translate$2: function(receiver, x, y) {
    return receiver.translate(x, y);
  }
};

$$.MetadataElement = {"": "SvgElement;"};

$$.Number = {"": "Interceptor;value=", $isNumber: true, $asNumber: null};

$$.NumberList = {"": "Interceptor;",
  $index: function(receiver, index) {
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Number);
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Number);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = $.$sub$n(this.get$length(receiver), 1);
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $isList: true,
  $asList: function () { return [$.Number]; },
  $isIterable: true,
  $asIterable: function () { return [$.Number]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathElement = {"": "StyledElement;"};

$$.PathSeg = {"": "Interceptor;", $isPathSeg: true, $asPathSeg: null};

$$.PathSegArcAbs = {"": "PathSeg;angle%,x=,y="};

$$.PathSegArcRel = {"": "PathSeg;angle%,x=,y="};

$$.PathSegClosePath = {"": "PathSeg;"};

$$.PathSegCurvetoCubicAbs = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoCubicRel = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoCubicSmoothAbs = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoCubicSmoothRel = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoQuadraticAbs = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoQuadraticRel = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoQuadraticSmoothAbs = {"": "PathSeg;x=,y="};

$$.PathSegCurvetoQuadraticSmoothRel = {"": "PathSeg;x=,y="};

$$.PathSegLinetoAbs = {"": "PathSeg;x=,y="};

$$.PathSegLinetoHorizontalAbs = {"": "PathSeg;x="};

$$.PathSegLinetoHorizontalRel = {"": "PathSeg;x="};

$$.PathSegLinetoRel = {"": "PathSeg;x=,y="};

$$.PathSegLinetoVerticalAbs = {"": "PathSeg;y="};

$$.PathSegLinetoVerticalRel = {"": "PathSeg;y="};

$$.PathSegList = {"": "Interceptor;",
  $index: function(receiver, index) {
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.PathSeg);
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.PathSeg);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = $.$sub$n(this.get$length(receiver), 1);
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $isList: true,
  $asList: function () { return [$.PathSeg]; },
  $isIterable: true,
  $asIterable: function () { return [$.PathSeg]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathSegMovetoAbs = {"": "PathSeg;x=,y="};

$$.PathSegMovetoRel = {"": "PathSeg;x=,y="};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.Point0 = {"": "Interceptor;x=,y="};

$$.PointList = {"": "Interceptor;",
  clear$0: function(receiver) {
    return receiver.clear();
  }
};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.PreserveAspectRatio = {"": "Interceptor;"};

$$.RadialGradientElement = {"": "_GradientElement;cx=,cy="};

$$.Rect0 = {"": "Interceptor;height%,width%,x=,y="};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.RenderingIntent = {"": "Interceptor;"};

$$.ScriptElement0 = {"": "SvgElement;href="};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StringList = {"": "Interceptor;",
  $index: function(receiver, index) {
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.String);
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.String);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = $.$sub$n(this.get$length(receiver), 1);
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $isList: true,
  $asList: function () { return [$.String]; },
  $isIterable: true,
  $asIterable: function () { return [$.String]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.StyleElement0 = {"": "SvgElement;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, value) {
    receiver.id = value;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;href="};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.Transform = {"": "Interceptor;angle=", $isTransform: true, $asTransform: null};

$$.TransformList = {"": "Interceptor;",
  $index: function(receiver, index) {
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Transform);
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Transform);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = $.$sub$n(this.get$length(receiver), 1);
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function () { return [$.Transform]; },
  $isIterable: true,
  $asIterable: function () { return [$.Transform]; }
};

$$.UnitTypes = {"": "Interceptor;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.ViewElement = {"": "SvgElement;"};

$$.ViewSpec = {"": "Interceptor;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._ElementInstanceList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.ElementInstance);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.ElementInstance);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return receiver.item(index);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.ElementInstance]; },
  $isIterable: true,
  $asIterable: function () { return [$.ElementInstance]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GradientElement = {"": "StyledElement;href="};

$$._SVGColor = {"": "Interceptor;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AnalyserNode = {"": "AudioNode;"};

$$.AudioBuffer = {"": "Interceptor;duration=,length="};

$$.AudioBufferSourceNode = {"": "AudioSourceNode;",
  start$3: function(receiver, when, grainOffset, grainDuration) {
    var t1, t2;
    t1 = $ === grainOffset;
    if (t1)
      grainOffset = null;
    t1 = !t1;
    t2 = $ === grainDuration;
    if (t2)
      grainDuration = null;
    t2 = !t2;
    if (!!receiver.start)
      if (t2)
        receiver.start(when, grainOffset, grainDuration);
      else if (t1)
        receiver.start(when, grainOffset);
      else
        receiver.start(when);
    else if (t2)
      receiver.noteOn(when, grainOffset, grainDuration);
    else if (t1)
      receiver.noteOn(when, grainOffset);
    else
      receiver.noteOn(when);
  },
  start$1: function($receiver, when) {
    return this.start$3($receiver, when, $, $);
  },
  stop$1: function(receiver, when) {
    if (!!receiver.stop)
      receiver.stop(when);
    else
      receiver.noteOff(when);
  }
};

$$.AudioContext = {"": "EventTarget;",
  decodeAudioData$3: function(receiver, audioData, successCallback, errorCallback) {
    return receiver.decodeAudioData(audioData, $.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  get$onComplete: function(receiver) {
    return $.EventStreamProvider_complete.forTarget$1(receiver);
  },
  createGain$0: function(receiver) {
    if (receiver.createGain !== undefined)
      return receiver.createGain();
    else
      return receiver.createGainNode();
  }
};

$$.AudioDestinationNode = {"": "AudioNode;"};

$$.AudioListener = {"": "Interceptor;"};

$$.AudioNode = {"": "Interceptor;"};

$$.AudioParam = {"": "Interceptor;value="};

$$.AudioProcessingEvent = {"": "Event;"};

$$.AudioSourceNode = {"": "AudioNode;"};

$$.BiquadFilterNode = {"": "AudioNode;"};

$$.ChannelMergerNode = {"": "AudioNode;"};

$$.ChannelSplitterNode = {"": "AudioNode;"};

$$.ConvolverNode = {"": "AudioNode;"};

$$.DelayNode = {"": "AudioNode;"};

$$.DynamicsCompressorNode = {"": "AudioNode;ratio="};

$$.GainNode = {"": "AudioNode;"};

$$.MediaElementAudioSourceNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioDestinationNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioSourceNode = {"": "AudioSourceNode;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.OfflineAudioContext = {"": "AudioContext;"};

$$.OscillatorNode = {"": "AudioSourceNode;",
  start$1: function(receiver, when) {
    return receiver.start(when);
  },
  stop$1: function(receiver, when) {
    return receiver.stop(when);
  }
};

$$.PannerNode = {"": "AudioNode;"};

$$.ScriptProcessorNode = {"": "AudioNode;"};

$$.WaveShaperNode = {"": "AudioNode;"};

$$.WaveTable = {"": "Interceptor;"};

$$.ActiveInfo = {"": "Interceptor;size="};

$$.Buffer = {"": "Interceptor;"};

$$.CompressedTextureAtc = {"": "Interceptor;"};

$$.CompressedTexturePvrtc = {"": "Interceptor;"};

$$.CompressedTextureS3TC = {"": "Interceptor;"};

$$.ContextAttributes = {"": "Interceptor;"};

$$.ContextEvent = {"": "Event;"};

$$.DebugRendererInfo = {"": "Interceptor;"};

$$.DebugShaders = {"": "Interceptor;"};

$$.DepthTexture = {"": "Interceptor;"};

$$.ExtDrawBuffers = {"": "Interceptor;"};

$$.ExtTextureFilterAnisotropic = {"": "Interceptor;"};

$$.Framebuffer = {"": "Interceptor;"};

$$.LoseContext = {"": "Interceptor;"};

$$.OesElementIndexUint = {"": "Interceptor;"};

$$.OesStandardDerivatives = {"": "Interceptor;"};

$$.OesTextureFloat = {"": "Interceptor;"};

$$.OesTextureHalfFloat = {"": "Interceptor;"};

$$.OesVertexArrayObject = {"": "Interceptor;"};

$$.Program = {"": "Interceptor;"};

$$.Renderbuffer = {"": "Interceptor;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.Shader = {"": "Interceptor;"};

$$.ShaderPrecisionFormat = {"": "Interceptor;"};

$$.Texture = {"": "Interceptor;"};

$$.UniformLocation = {"": "Interceptor;"};

$$.VertexArrayObject = {"": "Interceptor;"};

$$.SqlDatabase = {"": "Interceptor;",
  readTransaction$3: function(receiver, callback, errorCallback, successCallback) {
    return receiver.readTransaction($.convertDartClosureToJS(callback, 1), $.convertDartClosureToJS(errorCallback, 1), $.convertDartClosureToJS(successCallback, 0));
  },
  readTransaction$2: function($receiver, callback, errorCallback) {
    callback = $.convertDartClosureToJS(callback, 1);
    errorCallback = $.convertDartClosureToJS(errorCallback, 1);
    return $receiver.readTransaction(callback, errorCallback);
  },
  transaction$3: function(receiver, callback, errorCallback, successCallback) {
    return receiver.transaction($.convertDartClosureToJS(callback, 1), $.convertDartClosureToJS(errorCallback, 1), $.convertDartClosureToJS(successCallback, 0));
  },
  transaction$2: function($receiver, callback, errorCallback) {
    callback = $.convertDartClosureToJS(callback, 1);
    errorCallback = $.convertDartClosureToJS(errorCallback, 1);
    return $receiver.transaction(callback, errorCallback);
  }
};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.SqlResultSet = {"": "Interceptor;rows="};

$$.SqlResultSetRowList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return $.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Map);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Map);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    return $.convertNativeToDart_Dictionary(receiver.item(index));
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  lastIndexOf$2: function(receiver, element, start) {
    if (start == null)
      start = this.get$length(receiver) - 1;
    return $.Lists_lastIndexOf(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer.write$1(buffer, "]");
    return buffer.toString$0(buffer);
  },
  item$1: function(receiver, index) {
    return $.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $isList: true,
  $asList: function () { return [$.Map]; },
  $isIterable: true,
  $asIterable: function () { return [$.Map]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SqlTransaction = {"": "Interceptor;",
  executeSql$4: function(receiver, sqlStatement, $arguments, callback, errorCallback) {
    return receiver.executeSql(sqlStatement, $arguments, $.convertDartClosureToJS(callback, 2), $.convertDartClosureToJS(errorCallback, 2));
  },
  executeSql$3: function($receiver, sqlStatement, arguments, callback) {
    callback = $.convertDartClosureToJS(callback, 2);
    return $receiver.executeSql(sqlStatement, arguments, callback);
  }
};

// Bound closures
$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.Bound_pause__StreamSubscriptionImpl = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $isGameInitializer: true
};

$$.Bound_resume__StreamSubscriptionImpl = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_pause__DoneSubscription = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $isGameInitializer: true
};

$$.Bound_resume__DoneSubscription = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_pause__ForwardingStreamSubscription = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $isGameInitializer: true
};

$$.Bound_resume__ForwardingStreamSubscription = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound__handleDone__ForwardingStreamSubscription = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_pause__EventStreamSubscription = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $isGameInitializer: true
};

$$.Bound_resume__EventStreamSubscription = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound__handleImmediate__SetImmediateScheduler = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_initWaitGame_GameSwitchingSystem = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_initNotPong_GameSwitchingSystem = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_initMultiPong_GameSwitchingSystem = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_initBreakout_GameSwitchingSystem = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_initDodgeball_GameSwitchingSystem = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_keys_Store = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  },
  $isGameInitializer: true
};

$$.Bound_all_Store = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $isGameInitializer: true
};

$$.Bound_pause_MediaController = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  },
  $isGameInitializer: true
};

$$.Bound_pause_MediaElement = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  },
  $isGameInitializer: true
};

$$.Bound_result_RtcStatsResponse = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  },
  $isGameInitializer: true
};

$$.Bound_next_Cursor = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $isGameInitializer: true
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart) === true; i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$lt(startIndex, 0) === true)
    return -1;
  if (t1.$ge(startIndex, a.length) === true)
    startIndex = a.length - 1;
  for (i = startIndex; $.$ge$n(i, 0) === true; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, _iterator, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount, E) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable), t2 = $.getInterceptor(element); t1.moveNext$0();)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true || t1.$gt(start, list.length) === true)
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true || t1.$gt(end, list.length) === true)
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0) === true)
    return;
  if ($.$lt$n(skipCount, 0) === true)
    throw $.wrapException($.ArgumentError$(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    otherList = $.toList$1$growable$ax($.skip$1$ax(from, skipCount), false);
    otherStart = 0;
  }
  if ($.$gt$n($.$add$ns(otherStart, $length), $.get$length$asx(otherList)) === true)
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior)
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.JSArray_methods.$indexSet(a, j, a[j0]);
      j = j0;
    }
    $.JSArray_methods.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior)
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, t3, great0, less0;
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.JSArray_methods.$indexSet(a, index1, el1);
  $.JSArray_methods.$indexSet(a, index3, el3);
  $.JSArray_methods.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.JSArray_methods.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.JSArray_methods.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t2 = less - 1;
  if (t2 >= a.length)
    throw $.ioore(t2);
  $.JSArray_methods.$indexSet(a, left, a[t2]);
  $.JSArray_methods.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw $.ioore(t2);
  $.JSArray_methods.$indexSet(a, right, a[t2]);
  $.JSArray_methods.$indexSet(a, t2, el4);
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.Symbol$unvalidated = function(_name) {
  return new $.Symbol(_name);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, t3, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(e, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable))
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitPair_anon(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key) === true)
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications, E) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications, E);
  return t1;
};

$._symbolMapToStringMap = function(map) {
  var result = $.HashMap$($.String, null);
  map.forEach$1(map, new $._symbolMapToStringMap_anon(result));
  return result;
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  object[$.dispatchPropertyName] = value;
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_anon(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.List).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function($name, internalName, type, $arguments, argumentNames) {
  return $.JSInvocationMirror$($.Symbol$unvalidated($name), internalName, type, $arguments, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.wrapException($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (t1.$index(match, 2) != null)
        return parseInt(source, 16);
      if (t1.$index(match, 3) != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw $.wrapException($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.wrapException($.RangeError$("Radix " + radix + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (radix === 10 && t1.$index(match, 3) != null)
        return parseInt(source, 10);
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.toLowerCase$0$s(t1.$index(match, 1));
        for (t1 = $.getInterceptor$asx(digitsPart), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(digitsPart)); ++i)
          if ($.$gt$n(t1.codeUnitAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if ($.JSNumber_methods.get$isNaN(result) && $.$eq(source, "NaN") !== true)
    return handleError.call$1(source);
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $._StackTrace$(exception.stack);
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    buffer.write$1(buffer, $.runtimeTypeToString(argument));
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    buffer.write$1(buffer, $.runtimeTypeToString(argument));
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.getRuntimeTypeString = function(object) {
  var className = object.constructor === Array ? "List" : object.constructor.builtin$cls;
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
};

$.createRuntimeType = function($name) {
  return $.TypeImpl$($name);
};

$._InstanceMirror$ = function(reflectee) {
  return new $._InstanceMirror(reflectee);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  if ($name === "WebKitTransitionEvent")
    return "TransitionEvent";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(result, to);
      for (i = 0; i < $length; ++i) {
        result.write$1(result, receiver[i]);
        result.write$1(result, to);
      }
      return result.toString$0(result);
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  $.$indexSet$ax($.get$_stackTraceExpando(), o, st);
};

$.getAttachedStackTrace = function(o) {
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  return $.$index$asx($.get$_stackTraceExpando(), o);
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; $.get$isEmpty$asx($.get$_asyncCallbacks()) !== true;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.addAll$1$ax($.get$_asyncCallbacks(), remainingCallbacks);
        $.addAll$1$ax($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$.Future_Future$delayed = function(duration, computation, T) {
  var t1, future, milliseconds;
  t1 = {};
  t1.computation_0 = computation;
  t1.computation_0;
  future = $._ThenFuture$(new $.Future_Future$delayed_anon(t1), null, T);
  t1 = new $.Future_Future$delayed_anon0(future);
  milliseconds = duration.get$inMilliseconds();
  if (milliseconds < 0)
    milliseconds = 0;
  $.TimerImpl$(milliseconds, t1);
  return future;
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediateError$2(error, stackTrace, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$($.List);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._WhenFuture$ = function(_action, T) {
  var t1 = new $._WhenFuture(_action, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.StreamController$ = function(onCancel, onListen, onPause, onResume, T) {
  var t1 = new $.StreamController($._SingleControllerStream$(onListen, onPause, onResume, onCancel, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SingleControllerStream$ = function(_onListen, _onPause, _onResume, _onCancel, T) {
  var t1 = new $._SingleControllerStream(_onListen, _onPause, _onResume, _onCancel, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SingleStreamImpl$0(T);
  return t1;
};

$._throwDelayed = function(error, stackTrace) {
  var t1 = new $._throwDelayed_anon(error, stackTrace);
  $.add$1$ax($.get$_asyncCallbacks(), t1);
  if ($._callbacksAreEnqueued !== true) {
    $.Timer_run($._asyncRunCallback);
    $._callbacksAreEnqueued = true;
  }
};

$._GeneratedSingleStreamImpl$ = function(events, T) {
  var t1 = new $._GeneratedSingleStreamImpl(null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SingleStreamImpl$0(T);
  t1._GeneratedSingleStreamImpl$1(events, T);
  return t1;
};

$._IterablePendingEvents$ = function(data, T) {
  var t1 = new $._IterablePendingEvents($.get$iterator$ax(data), false, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._StreamSubscriptionImpl$ = function(source, _onData, _onError, _onDone, _cancelOnError, T) {
  var t1 = new $._StreamSubscriptionImpl(_cancelOnError, _onData, _onError, _onDone, source, 0, null, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._InternalLink$0();
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._DelayedData$ = function(value, T) {
  var t1 = new $._DelayedData(value, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._DelayedError$ = function(error) {
  return new $._DelayedError(error, null);
};

$._DelayedDone$ = function() {
  return new $._DelayedDone();
};

$._StreamImplEvents$ = function() {
  return new $._StreamImplEvents(null, null, null);
};

$._DoneSubscription$ = function(_handler, T) {
  var t1 = new $._DoneSubscription(_handler, null, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._DoneSubscription$1(_handler, T);
  return t1;
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._runUserCode = function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._BaseStreamSubscription$3(onData, onError, onDone, T);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError, S, T);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._SkipStream$ = function(source, count, T) {
  var t1 = new $._SkipStream(count, source);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SkipStream$2(source, count, T);
  return t1;
};

$.Timer_run = function(callback) {
  var t1, milliseconds;
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true) {
    t1 = new $.Timer_run_anon();
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, t1);
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$sub$n($.$shl$n(number, 2), 1);
  if (typeof number !== "number")
    return $.ListQueue__nextPowerOf2$bailout(1, number);
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$.ListQueue__nextPowerOf2$bailout = function(state0, number) {
  var t1, nextNumber;
  for (; true; number = nextNumber) {
    t1 = $.getInterceptor$n(number);
    nextNumber = t1.$and(number, t1.$sub(number, 1));
    if ($.$eq(nextNumber, 0) === true)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Expando$ = function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.AudioElement_AudioElement = function(src) {
  var t1 = $ === src;
  if (t1)
    src = null;
  if (!t1)
    return new Audio(src);
  return new Audio();
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.createElement("canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$.DivElement_DivElement = function() {
  return document.createElement("div");
};

$.MutationObserver_MutationObserver = function(callback) {
  0;
  return new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)($.convertDartClosureToJS(callback, 2));
};

$.Window__isDartLocation = function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    return typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isLocation;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._MicrotaskScheduler__MicrotaskScheduler$best = function(callback) {
  if (!!window.setImmediate)
    return $._SetImmediateScheduler$(callback);
  else if (!!(window.MutationObserver || window.WebKitMutationObserver))
    return $._MutationObserverScheduler$(callback);
  return $._PostMessageScheduler$(callback);
};

$._PostMessageScheduler$ = function(callback) {
  var t1 = new $._PostMessageScheduler("DART-MICROTASK", false, callback);
  t1._PostMessageScheduler$1(callback);
  return t1;
};

$._MutationObserverScheduler$ = function(callback) {
  var t1 = new $._MutationObserverScheduler(null, null, false, callback);
  t1._MutationObserverScheduler$1(callback);
  return t1;
};

$._SetImmediateScheduler$ = function(callback) {
  return new $._SetImmediateScheduler(false, callback);
};

$._completeMicrotasks = function() {
  var callbacks, t1;
  callbacks = $._pendingMicrotasks;
  $._pendingMicrotasks = null;
  for (t1 = $.get$iterator$ax(callbacks); t1.moveNext$0() === true;)
    t1.get$current().call$0();
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if (e == null)
    return;
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function($location) {
  if ($location === $.get$location$x(window))
    return $location;
  else
    return $._LocationCrossFrame$($location);
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$._LocationWrapper__get = function(p, m) {
  return p[m];
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, key;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    key = t1.get$current();
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$ax(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Lists_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (typeof startIndex !== "number")
    return $.Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = $.getInterceptor$asx(a);
  if ($.JSNumber_methods.$ge(startIndex, t1.get$length(a)))
    startIndex = $.$sub$n(t1.get$length(a), 1);
  for (i = startIndex; i >= 0; --i)
    if ($.$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$lt(startIndex, 0) === true)
    return -1;
  t2 = $.getInterceptor$asx(a);
  if (t1.$ge(startIndex, t2.get$length(a)) === true)
    startIndex = $.$sub$n(t2.get$length(a), 1);
  for (i = startIndex; t1 = $.getInterceptor$n(i), t1.$ge(i, 0) === true; i = t1.$sub(i, 1))
    if ($.$eq(t2.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var t1, i;
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if ($.JSNumber_methods.$gt(end, t1.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$.IdbFactory_supported = function() {
  return !!(window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB);
};

$._completeRequest = function(request) {
  var completer, t1;
  completer = $._CompleterImpl$(null);
  t1 = $.getInterceptor$x(request);
  t1.get$onSuccess(request).listen$1(new $._completeRequest_anon(request, completer));
  t1.get$onError(request).listen$1(new $._completeRequest_anon0(completer));
  return completer.future;
};

$.ObjectStore__cursorStreamFromResult = function(request, autoAdvance) {
  var controller, t1;
  controller = $.StreamController$(null, null, null, null, null);
  t1 = $.getInterceptor$x(request);
  t1.get$onError(request).listen$1(new $.ObjectStore__cursorStreamFromResult_anon(controller));
  t1.get$onSuccess(request).listen$1(new $.ObjectStore__cursorStreamFromResult_anon0(request, autoAdvance, controller));
  return controller.stream;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$.AudioContext_AudioContext = function() {
  return new (window.AudioContext || window.webkitAudioContext)();
};

$.SqlDatabase_supported = function() {
  return !!window.openDatabase;
};

$.main = function() {
  $.setImmediate$1$x(window, new $.main_anon());
};

$.GameState$ = function() {
  return new $.GameState(2, 0, 0, 0, 0, 0, false, false, false, false);
};

$.Game$ = function(wrapper, audioManager, store) {
  return new $.Game($.GameState$(), $.World$(), null, wrapper, audioManager, store);
};

$.Achievement$ = function(label, desc, index) {
  return new $.Achievement(label, desc, index);
};

$.ExpirationTimer$ = function(max) {
  var t1 = new $.ExpirationTimer(max, null);
  t1.ExpirationTimer$1(max);
  return t1;
};

$.Sound$ = function(clipName) {
  return new $.Sound(clipName);
};

$.MenuItem$ = function(x, y, width, height, label, hoverAction, clickAction) {
  return new $.MenuItem(x, y, width, height, label, hoverAction, clickAction, false);
};

$.RectangleBody$ = function(width, height) {
  return new $.RectangleBody(width, height);
};

$.CircleBody$ = function(radius) {
  return new $.CircleBody(radius);
};

$.Position$ = function(cx, cy) {
  return new $.Position(cx, cy);
};

$.PlayerFollower$ = function(minX, maxX, minY, maxY, maxVelocity, horizontal, vertical) {
  return new $.PlayerFollower(minX, maxX, minY, maxY, maxVelocity, horizontal, vertical);
};

$.RenderStyle$ = function(fillStyle, strokeStyle) {
  return new $.RenderStyle(strokeStyle, fillStyle);
};

$.Velocity$ = function(amount, _angle) {
  return new $.Velocity(amount, _angle);
};

$.Destroyable$ = function() {
  return new $.Destroyable();
};

$.GameSwitchingSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.List_List(5, {func: true, retvoid: true});
  $.setRuntimeTypeInfo(t1, [{func: true, retvoid: true}]);
  t2 = $.Aspect_getEmpty();
  t1 = new $.GameSwitchingSystem(t1, ["#d34549", "#d3aa9a", "#6dc3cb", "#d37d2c", "#6daa2c", "#346524", "#dbd75d", "#dfefd7"], null, null, gameState, 0, 0, 0, 20000, 0, null, $.Bag$(16, $.Entity), t2.get$all(), t2.get$excluded(), t2.get$one(), null, null);
  t1.EntitySystem$1(t2);
  return t1;
};

$.MenuMouseInputSystem$ = function(wrapper, gameState) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_MenuItem]);
  t2 = new $.MenuMouseInputSystem(null, wrapper, gameState, null, null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.MouseMovementSystem$ = function(wrapper) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.MouseMovementSystem(wrapper, null, null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.TimeIsScoreSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.TimeIsScoreSystem([0], gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.AchievementSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.AchievementSystem(gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.ExpirationSystem$ = function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_ExpirationTimer]);
  t2 = new $.ExpirationSystem(null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.PlayerFollowingMovementSystem$ = function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Position, $.Type_PlayerFollower]);
  t2 = new $.PlayerFollowingMovementSystem(null, null, null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.MovementSystem$ = function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Position, $.Type_Velocity]);
  t2 = new $.MovementSystem(null, null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.PongCollisionDetectionSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Position, $.Type_RectangleBody, $.Type_Velocity]).exclude$1([$.Type_PlayerFollower]);
  t2 = new $.PongCollisionDetectionSystem(null, null, null, null, null, gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.DodgeballSpawningSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.DodgeballSpawningSystem([1], null, gameState, null, 0, 0, 900, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.DodgeballScoringSystem$ = function(gameState) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Position, $.Type_CircleBody, $.Type_Velocity]).exclude$1([$.Type_PlayerFollower]);
  t2 = new $.DodgeballScoringSystem([1], null, null, null, null, null, gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.BackgroundRenderingSystem$ = function(wrapper) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.BackgroundRenderingSystem(wrapper, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.GameStateRenderingSystem$ = function(wrapper, gameState) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.GameStateRenderingSystem("Score: ", "Highscore: ", "Achievements: ", null, null, null, null, null, wrapper, gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.AchievementRenderingSystem$ = function(wrapper, gameState) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Achievement, $.Type_ExpirationTimer]);
  t2 = new $.AchievementRenderingSystem(200, wrapper, null, null, gameState, null, null, null, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.MenuRenderingSystem$ = function(wrapper, gameState) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_MenuItem]);
  t2 = new $.MenuRenderingSystem(null, wrapper, gameState, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.RectangleRenderingSystem$ = function(wrapper) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_RectangleBody, $.Type_Position, $.Type_RenderStyle]);
  t2 = new $.RectangleRenderingSystem(null, null, null, wrapper, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.CircleRenderingSystem$ = function(wrapper) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_CircleBody, $.Type_Position, $.Type_RenderStyle]);
  t2 = new $.CircleRenderingSystem(null, null, null, wrapper, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.SoundSystem$ = function(audioManager) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Sound]);
  t2 = new $.SoundSystem(null, audioManager, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.createAudioManager = function() {
  var baseUrl, manager, source, webIndex, exception;
  webIndex = $.lastIndexOf$1$asx($.get$href$x($.get$location$x(window)), "/web/");
  baseUrl = $.$add$ns($.substring$2$s($.get$href$x($.get$location$x(window)), 0, webIndex), "/res/sfx/");
  manager = null;
  try {
    manager = $.AudioManager$(baseUrl);
    source = manager.makeSource$1("default");
    source.set$positional(false);
  } catch (exception) {
    $.unwrapException(exception);
    manager = $.AudioElementManager$(baseUrl);
  }

  return manager;
};

$.AudioElementManager$ = function(baseURL) {
  return new $.AudioElementManager(baseURL, $.Map_Map($.String, $.AudiElementClip));
};

$.AudiElementClip$_internal = function(_manager, _name, _url) {
  var t1 = $.List_List($, $.AudioElement);
  $.setRuntimeTypeInfo(t1, [$.AudioElement]);
  return new $.AudiElementClip(_manager, _name, _url, t1);
};

$.createStore = function() {
  if ($.IdbFactory_supported() === true)
    var store = $.IndexedDbStore$("ld26", "gameState", 1, null);
  else
    store = $.SqlDatabase_supported() === true ? $.WebSqlStore$("ld26", "gameState", 5242880, null) : $.LocalStorageStore$(null);
  return store;
};

$.HighScoreSavingSystem$ = function(store, gameState) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.HighScoreSavingSystem("highScore", store, gameState, 0, 0, 30000, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.CqFramework$_ = function(cqWrapper) {
  return new $.CqFramework(cqWrapper);
};

$.CqMouseEvent$ = function(position, button) {
  return new $.CqMouseEvent(position, button);
};

$.CqTools_mousePosition = function($event) {
  var t1, currentElement, totalOffsetX, totalOffsetY, t2, t3, mouseX, mouseY;
  t1 = $.getInterceptor$x($event);
  currentElement = t1.get$currentTarget($event);
  totalOffsetX = 0;
  totalOffsetY = 0;
  do {
    t2 = $.getInterceptor$x(currentElement);
    t3 = $.get$left$x(t2.get$offset(currentElement));
    if (typeof t3 !== "number")
      throw $.iae(t3);
    totalOffsetX += t3;
    t3 = $.get$top$x(t2.get$offset(currentElement));
    if (typeof t3 !== "number")
      throw $.iae(t3);
    totalOffsetY += t3;
  } while (currentElement = t2.get$offsetParent(currentElement), null != currentElement);
  if (null != $.get$x$x(t1.get$page($event)) || null != $.get$y$x(t1.get$page($event))) {
    mouseX = $.get$x$x(t1.get$page($event));
    mouseY = $.get$y$x(t1.get$page($event));
  } else if (typeof $event === "object" && $event !== null && !!$.getInterceptor($event).$isMouseEvent) {
    t1 = $.getInterceptor$x($event);
    if (null != t1.get$client($event).x || null != t1.get$client($event).y) {
      mouseX = $.$add$ns($.$add$ns(t1.get$client($event).x, document.body.scrollLeft), document.documentElement.scrollLeft);
      mouseY = $.$add$ns($.$add$ns(t1.get$client($event).y, document.body.scrollTop), document.documentElement.scrollTop);
    } else {
      mouseX = 0;
      mouseY = 0;
    }
  } else {
    mouseX = 0;
    mouseY = 0;
  }
  return $.Point$($.$sub$n(mouseX, totalOffsetX), $.$sub$n(mouseY, totalOffsetY));
};

$.cq = function(selector, height) {
  var width, canvas;
  if (typeof selector === "number" && Math.floor(selector) === selector) {
    width = selector;
    height = height != null ? height : window.innerHeight;
    canvas = $.CanvasElement_CanvasElement(height, width);
  } else if (typeof selector === "string")
    canvas = document.querySelector(selector);
  else
    canvas = selector;
  return $.CqWrapper$(canvas);
};

$.CqWrapper$ = function(_canvas) {
  var t1 = new $.CqWrapper(_canvas, null, null);
  t1.CqWrapper$1(_canvas);
  return t1;
};

$.Aspect$ = function() {
  return new $.Aspect(0, 0, 0);
};

$.Aspect_getAspectForAllOf = function(componentTypes) {
  var aspect = $.Aspect$();
  aspect.allOf$1(componentTypes);
  return aspect;
};

$.Aspect_getEmpty = function() {
  return $.Aspect$();
};

$.ComponentManager$ = function() {
  return new $.ComponentManager($.Bag$(16, [$.Bag, $.Component]), $.Bag$(16, $.Entity), null);
};

$.ComponentMapper$ = function(componentType, world, A) {
  var t1 = new $.ComponentMapper(null, null);
  $.setRuntimeTypeInfo(t1, [A]);
  t1.ComponentMapper$2(componentType, world, A);
  return t1;
};

$.ComponentType$ = function() {
  var t1 = new $.ComponentType(0, 0);
  t1.ComponentType$0();
  return t1;
};

$.ComponentTypeManager_getTypeFor = function(componentType) {
  var type = $.$index$asx($.get$ComponentTypeManager__componentTypes(), componentType);
  if (type == null) {
    type = $.ComponentType$();
    $.$indexSet$ax($.get$ComponentTypeManager__componentTypes(), componentType, type);
  }
  return type;
};

$.Entity$_ = function(_world, id) {
  var t1 = new $.Entity(id, 0, 0, 0, _world, null, null);
  t1.Entity$_$2(_world, id);
  return t1;
};

$.EntityManager$ = function() {
  return new $.EntityManager($.Bag$(16, $.Entity), $.Bag$(16, $.Entity), $.Bag$(16, $.bool), 0, 0, 0, 0, $._IdentifierPool$(), null);
};

$._IdentifierPool$ = function() {
  return new $._IdentifierPool($.Bag$(16, $.$int), 0);
};

$.GroupManager$ = function() {
  return new $.GroupManager($.Map_Map($.String, [$.Bag, $.Entity]), $.Map_Map($.Entity, [$.Bag, $.String]), null);
};

$.TagManager$ = function() {
  return new $.TagManager($.Map_Map($.String, $.Entity), $.Map_Map($.Entity, $.String), null);
};

$._SystemBitManager__getBitFor = function(esType) {
  var bit, t1;
  if (null == $._SystemBitManager__systemBits)
    $._SystemBitManager__systemBits = $.HashMap$($.Type, $.$int);
  bit = $.$index$asx($._SystemBitManager__systemBits, esType);
  if (bit == null) {
    t1 = $._SystemBitManager__POS;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    bit = $.JSInt_methods.$shl(1, t1);
    $._SystemBitManager__POS = $.$add$ns($._SystemBitManager__POS, 1);
    $.$indexSet$ax($._SystemBitManager__systemBits, esType, bit);
  }
  return bit;
};

$.Bag$ = function(capacity, E) {
  var t1 = new $.Bag($.List_List(capacity, null), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.Bag$1$capacity(capacity, E);
  return t1;
};

$.ReadOnlyBag$_of = function(_bag, E) {
  var t1 = new $.ReadOnlyBag(_bag);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Utils_doCirclesCollide = function(x1, y1, radius1, x2, y2, radius2) {
  var dx, dy, d;
  dx = $.$sub$n(x2, x1);
  dy = $.$sub$n(y2, y1);
  d = $.$add$ns(radius1, radius2);
  return $.$lt$n($.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy)), $.$mul$n(d, d));
};

$.World$ = function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = $.EntityManager$();
  t2 = $.ComponentManager$();
  t3 = $.Bag$(16, $.Entity);
  t4 = $.Bag$(16, $.Entity);
  t5 = $.Bag$(16, $.Entity);
  t6 = $.Bag$(16, $.Entity);
  t7 = $.Bag$(16, $.Entity);
  t8 = $.Map_Map($.Type, $.EntitySystem);
  t9 = $.List_List($, $.EntitySystem);
  $.setRuntimeTypeInfo(t9, [$.EntitySystem]);
  t9 = new $.World(t1, t2, t3, t4, t5, t6, t7, t8, t9, $.Map_Map($.Type, $.Manager), $.Bag$(16, $.Manager), null);
  t9.World$0();
  return t9;
};

$.IndexedDbStore$ = function(dbName, storeName, version, V) {
  var t1 = new $.IndexedDbStore(dbName, version, null, storeName, false);
  $.setRuntimeTypeInfo(t1, [V]);
  t1.IndexedDbStore$3$version(dbName, storeName, version, V);
  return t1;
};

$.LocalStorageStore$ = function(V) {
  var t1 = new $.LocalStorageStore(null, false);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$.WebSqlStore$ = function(dbName, storeName, estimatedSize, V) {
  var t1 = new $.WebSqlStore(dbName, storeName, estimatedSize, null, false);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$.AudioClip$_internal = function(_manager, _name, _url) {
  return new $.AudioClip(_manager, _name, _url, null, false, "", false, false);
};

$.AudioManager$ = function(baseURL) {
  var t1 = new $.AudioManager(null, null, null, null, null, null, baseURL, $.Map_Map($.String, $.AudioClip), $.Map_Map($.String, $.AudioSource), null, null, false, false);
  t1.AudioManager$1(baseURL);
  return t1;
};

$.AudioMusic$_internal = function(_manager, output) {
  var t1 = new $.AudioMusic(_manager, null, null, null);
  t1.AudioMusic$_internal$2(_manager, output);
  return t1;
};

$.SfxrParams$fromString = function(string) {
  var t1 = new $.SfxrParams(0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  t1.SfxrParams$fromString$1(string);
  return t1;
};

$.SfxrParams__toInt = function(v) {
  if (v == null || $.$eq($.get$length$asx(v), 0) === true)
    return 0;
  return $.Primitives_parseInt(v, 10, null);
};

$.SfxrParams__toDouble = function(v) {
  if (v == null || $.$eq($.get$length$asx(v), 0) === true)
    return 0;
  return $.Primitives_parseDouble(v, null);
};

$.SfxrSynth$ = function(_params) {
  return new $.SfxrSynth(_params, null, null, null, null, null, null, null, null, null, null, null, null);
};

$.SfxrSynth_toAudioBuffer = function(audioContext, data) {
  var synth, envelopeFullLength, buffer;
  synth = $.SfxrSynth$($.SfxrParams$fromString(data));
  envelopeFullLength = synth.totalReset$0();
  buffer = audioContext.createBuffer(2, envelopeFullLength, 44100);
  synth.synthWave$2(buffer.getChannelData(0), envelopeFullLength);
  return buffer;
};

$.AudioSound$_internal = function(_source, _clip, _loop) {
  var t1 = new $.AudioSound(_source, _clip, _loop, null, null, null, null, 1);
  t1.AudioSound$_internal$3(_source, _clip, _loop);
  return t1;
};

$.AudioSource$_internal = function(_manager, _name, _output) {
  var t1 = new $.AudioSource(_manager, _name, _output, null, null, null, null, false, 0, 0, 0, true);
  t1.AudioSource$_internal$3(_manager, _name, _output);
  return t1;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.wrapException.call$1 = $.wrapException;
$.wrapException.$name = "wrapException";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.DartError_toStringWrapper.$isGameInitializer = true;
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._asyncRunCallback.call$0 = $._asyncRunCallback;
$._asyncRunCallback.$name = "_asyncRunCallback";
$._asyncRunCallback.$isGameInitializer = true;
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$._nullDoneHandler.$isGameInitializer = true;
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._completeMicrotasks.call$0 = $._completeMicrotasks;
$._completeMicrotasks.$name = "_completeMicrotasks";
$._completeMicrotasks.$isGameInitializer = true;
$.ReceivePort = {builtin$cls: "ReceivePort"};
$._EntrySync = {builtin$cls: "_EntrySync"};
$.bool = {builtin$cls: "bool"};
$.$double = {builtin$cls: "double"};
$.$int = {builtin$cls: "int"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.Map = {builtin$cls: "Map"};
$.num = {builtin$cls: "num"};
$.List = {builtin$cls: "List"};
$.Match = {builtin$cls: "Match"};
$.String = {builtin$cls: "String"};
$.Symbol0 = {builtin$cls: "Symbol0"};
$.Type = {builtin$cls: "Type"};
$.Position.$isComponent = true;
$.PlayerFollower.$isComponent = true;
$.RenderStyle.$isComponent = true;
$.Velocity.$isComponent = true;
$.Destroyable.$isComponent = true;
$.String.$isString = true;
$.Entity.$isEntity = true;
$.CircleBody.$isComponent = true;
$.Achievement.$isComponent = true;
$.ExpirationTimer.$isComponent = true;
$.Sound.$isComponent = true;
$.MenuItem.$isComponent = true;
$.Component.$isComponent = true;
$.RectangleBody.$isComponent = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.EventStreamProvider_message = new $.EventStreamProvider("message");
$.EventStreamProvider_touchend = new $.EventStreamProvider("touchend");
$.EventStreamProvider_touchmove = new $.EventStreamProvider("touchmove");
$.Type_RectangleBody = $.createRuntimeType('RectangleBody');
$.Type_Velocity = $.createRuntimeType('Velocity');
$.JSNull_methods = $.JSNull.prototype;
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.EventStreamProvider_complete = new $.EventStreamProvider("complete");
$.EventStreamProvider_canplay = new $.EventStreamProvider("canplay");
$.Type_$double = $.createRuntimeType('double');
$.Type_CircleBody = $.createRuntimeType('CircleBody');
$.Type_Destroyable = $.createRuntimeType('Destroyable');
$.Type_Achievement = $.createRuntimeType('Achievement');
$.Type_$int = $.createRuntimeType('int');
$.Type_TagManager = $.createRuntimeType('TagManager');
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.Duration_0 = new $.Duration(0);
$.Type_ExpirationTimer = $.createRuntimeType('ExpirationTimer');
$.C_NullThrownError = new $.NullThrownError();
$.JSArray_methods = $.JSArray.prototype;
$.JSDouble_methods = $.JSDouble.prototype;
$.Type_Position = $.createRuntimeType('Position');
$.EventStreamProvider_abort = new $.EventStreamProvider("abort");
$.EventStreamProvider_success = new $.EventStreamProvider("success");
$.EventStreamProvider_upgradeneeded = new $.EventStreamProvider("upgradeneeded");
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.Type_bool = $.createRuntimeType('bool');
$.Type_Sound = $.createRuntimeType('Sound');
$.Type_PlayerFollower = $.createRuntimeType('PlayerFollower');
$.C_CloseToken = new $.CloseToken();
$.C__DelayedDone = new $._DelayedDone();
$.Type_String = $.createRuntimeType('String');
$.Type_Null = $.createRuntimeType('Null');
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_touchstart = new $.EventStreamProvider("touchstart");
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.Type_MenuItem = $.createRuntimeType('MenuItem');
$.EventStreamProvider_blocked = new $.EventStreamProvider("blocked");
$.Type_RenderStyle = $.createRuntimeType('RenderStyle');
$.C__Random = new $._Random();
$.Type_GroupManager = $.createRuntimeType('GroupManager');
$.Expando__keyCount = 0;
$.dispatchPropertyName = "_zzyzx";
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._mirrorsEnabled = false;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$._pendingMicrotasks = null;
$._microtaskScheduler = null;
$.ComponentType__nextBit = 1;
$.ComponentType__nextId = 0;
$._SystemBitManager__POS = 0;
$._SystemBitManager__systemBits = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$not$i = function(receiver) {
  if (typeof receiver == "number" && Math.floor(receiver) == receiver)
    return ~receiver >>> 0;
  return $.getInterceptor$i(receiver).$not(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$._setImmediate$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._setImmediate$1(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.add$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).add$2(receiver, a0, a1);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.beginPath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).beginPath$0(receiver);
};
$.cancel$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).cancel$0(receiver);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clear$1$color$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).clear$1$color(receiver, a0);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.closePath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).closePath$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.createGain$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createGain$0(receiver);
};
$.createObjectStore$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).createObjectStore$1(receiver, a0);
};
$.decodeAudioData$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).decodeAudioData$3(receiver, a0, a1, a2);
};
$.disable$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).disable$0(receiver);
};
$.disabled$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).disabled$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.enable$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).enable$0(receiver);
};
$.enabled$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).enabled$1(receiver, a0);
};
$.executeSql$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).executeSql$3(receiver, a0, a1, a2);
};
$.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
$.fillText$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).get$1(receiver, a0);
};
$.get$animationFrame$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$animationFrame(receiver);
};
$.get$button$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$button(receiver);
};
$.get$canvas$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$canvas(receiver);
};
$.get$context2D$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2D(receiver);
};
$.get$cx$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cx(receiver);
};
$.get$cy$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cy(receiver);
};
$.get$db$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$db(receiver);
};
$.get$duration$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$duration(receiver);
};
$.get$ended$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$ended(receiver);
};
$.get$first$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$first(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$href$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$href(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$index$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$index(receiver);
};
$.get$indexedDB$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$indexedDB(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$keys$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$keys(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$location$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$location(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$next$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$next(receiver);
};
$.get$objectStoreNames$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$objectStoreNames(receiver);
};
$.get$onBlocked$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onBlocked(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onMouseDown$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
$.get$onMouseMove$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseMove(receiver);
};
$.get$onMouseUp$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseUp(receiver);
};
$.get$onTouchEnd$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchEnd(receiver);
};
$.get$onTouchMove$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchMove(receiver);
};
$.get$onTouchStart$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchStart(receiver);
};
$.get$onUpgradeNeeded$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onUpgradeNeeded(receiver);
};
$.get$ratio$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$ratio(receiver);
};
$.get$readOnly$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$readOnly(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$target(receiver);
};
$.get$top$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$top(receiver);
};
$.get$topLeft$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$topLeft(receiver);
};
$.get$url$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$url(receiver);
};
$.get$userAgent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$userAgent(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.get$vertical$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$vertical(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.getBoundingClientRect$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
$.getObject$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getObject$1(receiver, a0);
};
$.initialize$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).initialize$0(receiver);
};
$.item$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).item$1(receiver, a0);
};
$.lastIndexOf$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).lastIndexOf$1(receiver, a0);
};
$.lastIndexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).lastIndexOf$2(receiver, a0, a1);
};
$.load$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).load$0(receiver);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.measureText$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).measureText$1(receiver, a0);
};
$.next$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).next$0(receiver);
};
$.objectStore$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).objectStore$1(receiver, a0);
};
$.observe$2$attributes$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).observe$2$attributes(receiver, a0, a1);
};
$.open$3$onUpgradeNeeded$version$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).open$3$onUpgradeNeeded$version(receiver, a0, a1, a2);
};
$.openCursor$1$autoAdvance$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).openCursor$1$autoAdvance(receiver, a0);
};
$.play$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).play$0(receiver);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.postMessage$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
$.put$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).put$2(receiver, a0, a1);
};
$.readTransaction$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).readTransaction$2(receiver, a0, a1);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.restore$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).restore$0(receiver);
};
$.save$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).save$0(receiver);
};
$.save$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).save$2(receiver, a0, a1);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$button$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$button(receiver, value);
};
$.set$cx$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$cx(receiver, value);
};
$.set$cy$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$cy(receiver, value);
};
$.set$fillStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
$.set$globalAlpha$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$next$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$next(receiver, value);
};
$.set$pause$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$pause(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.setImmediate$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).setImmediate$1(receiver, a0);
};
$.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.start$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).start$1(receiver, a0);
};
$.start$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).start$3(receiver, a0, a1, a2);
};
$.stop$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stop$0(receiver);
};
$.stop$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).stop$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toList$1$growable$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toStringAsFixed$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
$.transaction$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).transaction$2(receiver, a0, a1);
};
$.transaction$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).transaction$3(receiver, a0, a1, a2);
};
$.translate$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.interceptedNames = ["toString$0", "setImmediate$1", "add$1", "get$left", "substring$1", "$indexSet", "get$height", "write$1", "replaceAll$2", "$$dom_removeEventListener$3", "get$top", "postMessage$1", "$indexSet", "$$dom_addEventListener$3", "setRange$4", "removeLast$0", "getPropertyValue$1", "$$dom_add$2", "executeSql$3", "setRange$4", "load$0", "postMessage$1", "send$2", "transaction$3", "fillRect$4", "arc$6", "get$onSuccess", "codeUnitAt$1", "$indexSet", "decodeAudioData$3", "containsKey$1", "$gt", "get$isEmpty", "$shr", "$indexSet", "setProperty$3", "set$fillStyle", "pause$1", "get$url", "containsKey$1", "$indexSet", "get$page", "truncate$0", "$index", "moveTo$2", "terminate$0", "toInt$0", "$and", "$indexSet", "containsKey$1", "clearRect$4", "get$onBlocked", "$index", "forEach$1", "abs$0", "forEach$1", "close$0", "$tdiv", "register$2", "_liblib3$_add$1", "clear$0", "addAll$1", "skip$1", "$index", "get$fillStyle", "$le", "toInt$0", "$index", "open$2", "setRange$3", "rect$4", "get$onMessage", "$index", "lineTo$2", "initialize$0", "elementAt$1", "get$userAgent", "get$canvas", "set$next", "postMessage$2", "drawImage$3", "quadraticCurveTo$4", "get$isInfinite", "map$1", "fill$0", "contains$1", "postMessage$1", "open$0", "get$width", "$lt", "transaction$2", "fillText$3", "setRange$4", "enable$0", "get$1", "cancel$0", "$index", "$index", "get$runtimeType", "$index", "sublist$2", "start$3", "disabled$1", "compareTo$1", "play$0", "$tdiv", "get$onComplete", "$index", "get$topLeft", "$index", "next$0", "send$1", "$$dom_createObjectStore$2", "forEach$1", "get$_location", "$index", "split$1", "get$x", "$index", "$or", "get$location", "get$keys", "$index", "set$font", "translate$2", "get$onMouseUp", "$ge", "toDouble$0", "get$1", "get$onUpgradeNeeded", "complete$1", "disable$1", "get$animationFrame", "$index", "get$target", "remainder$1", "indexOf$2", "abs$0", "write$1", "$sub", "set$onmessage", "get$button", "$index", "get$font", "$index", "toList$0", "set$hidden", "sublist$1", "get$isNegative", "map$1", "get$cx", "requestAnimationFrame$1", "get$pause", "$negate", "item$1", "put$2", "$lt", "set$pause", "beginPath$0", "$le", "get$isNaN", "$index", "substring$2", "get$readOnly", "map$1", "get$context2D", "startsWith$1", "start$1", "set$globalAlpha", "enable$1", "remove$1", "get$next", "addAll$1", "reset$0", "set$length", "lastIndexOf$2", "get$key", "createObjectStore$1", "toInt$0", "allMatches$1", "set$button", "clone$1", "clear$0", "intersection$1", "get$y", "_add$1", "$index", "contains$1", "get$db", "set$src", "_ensureRequestAnimationFrame$0", "contains$1", "reset$0", "$index", "cancel$0", "$eq", "$xor", "remove$1", "get$length", "add$1", "toStringAsFixed$1", "disable$0", "set$angle", "get$currentTarget", "get$first", "$mod", "register$2", "get$label", "set$lineWidth", "start$0", "$index", "get$duration", "$index", "get$pattern", "$lt", "$index", "get$hidden", "$index", "get$onCanPlay", "$ge", "$$dom_put$2", "toInt$0", "forEach$1", "compareTo$1", "toString$0", "set$cx", "_remove$1", "get$vertical", "_requestAnimationFrame$1", "get$angle", "$sub", "get$hashCode", "$index", "$indexSet", "$shr", "initialize$0", "$index", "$index", "remove$1", "end$0", "complete$1", "get$onTouchStart", "$index", "get$client", "$index", "stop$0", "add$1", "get$iterator", "$lt", "get$onLoad", "$div", "readTransaction$2", "get$values", "forEach$1", "$index", "$$dom_put$1", "get$onTouchMove", "$shl", "removeLast$0", "$index", "set$height", "$index", "get$offset", "set$textBaseline", "$sub", "stop$1", "stroke$0", "measureText$1", "get$rows", "$index", "add$2", "play$1", "get$onError", "$index", "save$2", "where$1", "set$id", "$le", "$not", "set$strokeStyle", "toString$0", "$sub", "set$width", "get$completed", "$mod", "get$onMouseMove", "$index", "close$0", "$index", "remove$1", "get$onTouchEnd", "$index", "get$ended", "$shl", "get$ratio", "getObject$1", "enabled$1", "save$0", "$mod", "get$href", "$$dom_add$1", "$add", "get$id", "$gt", "getBoundingClientRect$0", "forEach$1", "$index", "preventDefault$0", "$index", "get$cy", "forEach$1", "sort$1", "get$strokeStyle", "$index", "restore$0", "$index", "get$indexedDB", "_setImmediate$1", "get$offsetParent", "toLowerCase$0", "$index", "open$3$onUpgradeNeeded$version", "$lt", "get$index", "set$cy", "get$size", "endsWith$1", "closePath$0", "join$1", "get$onAbort", "$index", "get$result", "$gt", "get$value", "$mul", "toList$1$growable", "observe$2$attributes", "stop$0", "openCursor$1$autoAdvance", "clear$1$color", "get$objectStoreNames", "$index", "get$onMouseDown", "lastIndexOf$1", "createGain$0", "objectStore$1", "get$navigator"];
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "random", "random", "get$random", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "achievements", "achievements", "get$achievements", function() {
  return $.makeLiteralMap(["dummy1", $.makeLiteralMap(["check", new $.anon(), "desc", "Lorem Ipsum.", "label", "Dummy 1"]), "dummy2", $.makeLiteralMap(["check", new $.anon0(), "desc", "Lorem ipsum dolor sit amet, consectetur adipiscing elit.", "label", "Dummy 2"]), "dummy3", $.makeLiteralMap(["check", new $.anon1(), "desc", "Integer eu nisi magna.", "label", "Dummy 3"]), "dummy4", $.makeLiteralMap(["check", new $.anon2(), "desc", "Maecenas egestas, lacus sed rhoncus elementum, est nibh suscipit nulla, interdum consectetur nisl urna ut nulla.", "label", "Dummy 4"]), "dummy5", $.makeLiteralMap(["check", new $.anon3(), "desc", "Vivamus sagittis libero sed nulla laoreet varius aliquet nisi ullamcorper.", "label", "Dummy 5"]), "dummy6", $.makeLiteralMap(["check", new $.anon4(), "desc", "Praesent et arcu eu tortor porttitor viverra.", "label", "Dummy 6"]), "dummy7", $.makeLiteralMap(["check", new $.anon5(), "desc", "Nulla in tempor justo.", "label", "Dummy 7"]), "dummy8", $.makeLiteralMap(["check", new $.anon6(), "desc", "Vivamus iaculis aliquam magna, at sollicitudin enim pellentesque convallis.", "label", "Dummy 8"]), "dummy9", $.makeLiteralMap(["check", new $.anon7(), "desc", "Nunc pretium placerat urna ut convallis.", "label", "Dummy 9"]), "wait1", $.makeLiteralMap(["check", new $.anon8(), "desc", "You have waited 1 minute! Ok, that was easy.", "label", "Minor Waiter"]), "wait5", $.makeLiteralMap(["check", new $.anon9(), "desc", "You have waited 5 minutes! Not breaking a sweat.", "label", "Average Waiter"]), "wait15", $.makeLiteralMap(["check", new $.anon10(), "desc", "You have waited 15 minutes! Your patience is great.", "label", "Great Waiter"]), "wait1190", $.makeLiteralMap(["check", new $.anon11(), "desc", "You have waited 1190 seconds! Are you going to wait for it?", "label", "TimeWaiter"]), "wait60", $.makeLiteralMap(["check", new $.anon12(), "desc", "You have waited 1 hour! Better stop now, otherwise you'll miss a *ONG.", "label", "GONG"]), "hoverStart", $.makeLiteralMap(["check", new $.anon13(), "desc", "You only have to click it.", "label", "Almost there"]), "wrongButton", $.makeLiteralMap(["check", new $.anon14(), "desc", "Are you sure you know what you are doing?", "label", "Too many buttons"]), "wrongPosition", $.makeLiteralMap(["check", new $.anon15(), "desc", "Everything alright?", "label", "Drunken style"]), "gameStarted", $.makeLiteralMap(["check", new $.anon16(), "desc", "Wow, you must be a bright one!", "label", "Game started"])]);
});
Isolate.$lazy($, "mobile", "CqTools_mobile", "get$CqTools_mobile", function() {
  return $.contains$1$asx($.get$userAgent$x($.get$navigator$x($.window())), "Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone");
});
Isolate.$lazy($, "_whitespacePattern", "CqWrapper__whitespacePattern", "get$CqWrapper__whitespacePattern", function() {
  return $.RegExp_RegExp("\\s+", true, false);
});
Isolate.$lazy($, "_componentTypes", "ComponentTypeManager__componentTypes", "get$ComponentTypeManager__componentTypes", function() {
  return $.Map_Map($.Type, $.ComponentType);
});
// Native classes
$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("AbstractWorker", $.AbstractWorker);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("DOMApplicationCache", $.ApplicationCache);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("ArrayBuffer", $.ArrayBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.ArrayBufferView);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarInfo", $.BarInfo);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethods("CanvasProxy", $.CanvasProxy);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("Coordinates", $.Coordinates);

$.defineNativeMethods("Crypto", $.Crypto);

$.defineNativeMethods("CSSCharsetRule", $.CssCharsetRule);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSFontFaceRule", $.CssFontFaceRule);

$.defineNativeMethods("CSSHostRule", $.CssHostRule);

$.defineNativeMethods("CSSImportRule", $.CssImportRule);

$.defineNativeMethods("WebKitCSSKeyframeRule", $.CssKeyframeRule);

$.defineNativeMethods("WebKitCSSKeyframesRule", $.CssKeyframesRule);

$.defineNativeMethods("CSSMediaRule", $.CssMediaRule);

$.defineNativeMethods("CSSPageRule", $.CssPageRule);

$.defineNativeMethodsNonleaf("CSSRule", $.CssRule);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CSSStyleRule", $.CssStyleRule);

$.defineNativeMethods("CSSStyleSheet", $.CssStyleSheet);

$.defineNativeMethods("CSSUnknownRule", $.CssUnknownRule);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("Clipboard", $.DataTransfer);

$.defineNativeMethods("DataTransferItem", $.DataTransferItem);

$.defineNativeMethods("DataTransferItemList", $.DataTransferItemList);

$.defineNativeMethods("DataView", $.DataView);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceAcceleration", $.DeviceAcceleration);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("DeviceRotationRate", $.DeviceRotationRate);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethods("MimeType", $.DomMimeType);

$.defineNativeMethods("MimeTypeArray", $.DomMimeTypeArray);

$.defineNativeMethods("WebKitNamedFlowCollection", $.DomNamedFlowCollection);

$.defineNativeMethods("DOMParser", $.DomParser);

$.defineNativeMethods("Path", $.DomPath);

$.defineNativeMethods("Plugin", $.DomPlugin);

$.defineNativeMethods("PluginArray", $.DomPluginArray);

$.defineNativeMethods("SecurityPolicy", $.DomSecurityPolicy);

$.defineNativeMethods("Selection", $.DomSelection);

$.defineNativeMethods("DOMSettableTokenList", $.DomSettableTokenList);

$.defineNativeMethods("DOMStringList", $.DomStringList);

$.defineNativeMethodsNonleaf("DOMTokenList", $.DomTokenList);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("EntityReference", $.EntityReference);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethods("EventSource", $.EventSource);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileList", $.FileList);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("Float32Array", $.Float32Array);

$.defineNativeMethods("Float64Array", $.Float64Array);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("FontLoader", $.FontLoader);

$.defineNativeMethods("FormData", $.FormData);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("Gamepad", $.Gamepad);

$.defineNativeMethods("Geolocation", $.Geolocation);

$.defineNativeMethods("Geoposition", $.Geoposition);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("History", $.History);

$.defineNativeMethods("HTMLAllCollection", $.HtmlAllCollection);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("XMLHttpRequestUpload", $.HttpRequestUpload);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("Int16Array", $.Int16Array);

$.defineNativeMethods("Int32Array", $.Int32Array);

$.defineNativeMethods("Int8Array", $.Int8Array);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("LocalMediaStream", $.LocalMediaStream);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaList", $.MediaList);

$.defineNativeMethods("MediaQueryList", $.MediaQueryList);

$.defineNativeMethods("MediaSource", $.MediaSource);

$.defineNativeMethodsNonleaf("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrack", $.MediaStreamTrack);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("MemoryInfo", $.MemoryInfo);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageChannel", $.MessageChannel);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("MessagePort", $.MessagePort);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("Metadata", $.Metadata);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("WebKitNamedFlow", $.NamedFlow);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeFilter", $.NodeFilter);

$.defineNativeMethods("NodeIterator", $.NodeIterator);

$.defineNativeMethodsNonleaf("NodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("Notification", $.Notification);

$.defineNativeMethods("NotificationCenter", $.NotificationCenter);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PagePopupController", $.PagePopupController);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethodsNonleaf("PerformanceEntry", $.PerformanceEntry);

$.defineNativeMethods("PerformanceEntryList", $.PerformanceEntryList);

$.defineNativeMethods("PerformanceMark", $.PerformanceMark);

$.defineNativeMethods("PerformanceMeasure", $.PerformanceMeasure);

$.defineNativeMethods("PerformanceNavigation", $.PerformanceNavigation);

$.defineNativeMethods("PerformanceResourceTiming", $.PerformanceResourceTiming);

$.defineNativeMethods("PerformanceTiming", $.PerformanceTiming);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RadioNodeList", $.RadioNodeList);

$.defineNativeMethods("Range", $.Range);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannel", $.RtcDataChannel);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFSender", $.RtcDtmfSender);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidate", $.RtcIceCandidate);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("RTCPeerConnection", $.RtcPeerConnection);

$.defineNativeMethods("RTCSessionDescription", $.RtcSessionDescription);

$.defineNativeMethods("RTCStatsReport", $.RtcStatsReport);

$.defineNativeMethods("RTCStatsResponse", $.RtcStatsResponse);

$.defineNativeMethods("Screen", $.Screen);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("ScriptProfile", $.ScriptProfile);

$.defineNativeMethods("ScriptProfileNode", $.ScriptProfileNode);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("SourceBuffer", $.SourceBuffer);

$.defineNativeMethods("SourceBufferList", $.SourceBufferList);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechGrammar", $.SpeechGrammar);

$.defineNativeMethods("SpeechGrammarList", $.SpeechGrammarList);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechInputResult", $.SpeechInputResult);

$.defineNativeMethods("SpeechRecognition", $.SpeechRecognition);

$.defineNativeMethods("SpeechRecognitionAlternative", $.SpeechRecognitionAlternative);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechRecognitionResult", $.SpeechRecognitionResult);

$.defineNativeMethods("Storage", $.Storage);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("StorageInfo", $.StorageInfo);

$.defineNativeMethods("StorageQuota", $.StorageQuota);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("StyleMedia", $.StyleMedia);

$.defineNativeMethodsNonleaf("StyleSheet", $.StyleSheet);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackCue", $.TextTrackCue);

$.defineNativeMethods("TextTrackCueList", $.TextTrackCueList);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent", $.TransitionEvent);

$.defineNativeMethods("TreeWalker", $.TreeWalker);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("Uint16Array", $.Uint16Array);

$.defineNativeMethods("Uint32Array", $.Uint32Array);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8Array);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedArray);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("URL", $.Url);

$.defineNativeMethods("ValidityState", $.ValidityState);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebKitCSSFilterRule", $.WebKitCssFilterRule);

$.defineNativeMethods("WebKitCSSRegionRule", $.WebKitCssRegionRule);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow", $.Window);

$.defineNativeMethods("Worker", $.Worker);

$.defineNativeMethods("XPathEvaluator", $.XPathEvaluator);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("XPathExpression", $.XPathExpression);

$.defineNativeMethods("XPathNSResolver", $.XPathNSResolver);

$.defineNativeMethods("XPathResult", $.XPathResult);

$.defineNativeMethods("XMLSerializer", $.XmlSerializer);

$.defineNativeMethods("XSLTProcessor", $.XsltProcessor);

$.defineNativeMethodsNonleaf("CSSValue", $._CSSValue);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("ClientRectList", $._ClientRectList);

$.defineNativeMethods("CSSRuleList", $._CssRuleList);

$.defineNativeMethods("CSSValueList", $._CssValueList);

$.defineNativeMethods("WebKitPoint", $._DomPoint);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("EntryArraySync", $._EntryArraySync);

$.defineNativeMethods("GamepadList", $._GamepadList);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SpeechInputResultList", $._SpeechInputResultList);

$.defineNativeMethods("SpeechRecognitionResultList", $._SpeechRecognitionResultList);

$.defineNativeMethods("StyleSheetList", $._StyleSheetList);

$.defineNativeMethodsNonleaf("IDBCursor", $.Cursor);

$.defineNativeMethods("IDBCursorWithValue", $.CursorWithValue);

$.defineNativeMethods("IDBDatabase", $.Database);

$.defineNativeMethods("IDBFactory", $.IdbFactory);

$.defineNativeMethods("IDBIndex", $.Index);

$.defineNativeMethods("IDBKeyRange", $.KeyRange);

$.defineNativeMethods("IDBObjectStore", $.ObjectStore);

$.defineNativeMethods("IDBOpenDBRequest", $.OpenDBRequest);

$.defineNativeMethodsNonleaf("IDBRequest", $.Request);

$.defineNativeMethods("IDBTransaction", $.Transaction);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAngle", $.Angle);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedAngle", $.AnimatedAngle);

$.defineNativeMethods("SVGAnimatedBoolean", $.AnimatedBoolean);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedInteger", $.AnimatedInteger);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedPreserveAspectRatio", $.AnimatedPreserveAspectRatio);

$.defineNativeMethods("SVGAnimatedRect", $.AnimatedRect);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGElementInstance", $.ElementInstance);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLength", $.Length);

$.defineNativeMethods("SVGLengthList", $.LengthList);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMatrix", $.Matrix);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGNumber", $.Number);

$.defineNativeMethods("SVGNumberList", $.NumberList);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethodsNonleaf("SVGPathSeg", $.PathSeg);

$.defineNativeMethods("SVGPathSegArcAbs", $.PathSegArcAbs);

$.defineNativeMethods("SVGPathSegArcRel", $.PathSegArcRel);

$.defineNativeMethods("SVGPathSegClosePath", $.PathSegClosePath);

$.defineNativeMethods("SVGPathSegCurvetoCubicAbs", $.PathSegCurvetoCubicAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicRel", $.PathSegCurvetoCubicRel);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothAbs", $.PathSegCurvetoCubicSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothRel", $.PathSegCurvetoCubicSmoothRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticAbs", $.PathSegCurvetoQuadraticAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticRel", $.PathSegCurvetoQuadraticRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothAbs", $.PathSegCurvetoQuadraticSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothRel", $.PathSegCurvetoQuadraticSmoothRel);

$.defineNativeMethods("SVGPathSegLinetoAbs", $.PathSegLinetoAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalAbs", $.PathSegLinetoHorizontalAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalRel", $.PathSegLinetoHorizontalRel);

$.defineNativeMethods("SVGPathSegLinetoRel", $.PathSegLinetoRel);

$.defineNativeMethods("SVGPathSegLinetoVerticalAbs", $.PathSegLinetoVerticalAbs);

$.defineNativeMethods("SVGPathSegLinetoVerticalRel", $.PathSegLinetoVerticalRel);

$.defineNativeMethods("SVGPathSegList", $.PathSegList);

$.defineNativeMethods("SVGPathSegMovetoAbs", $.PathSegMovetoAbs);

$.defineNativeMethods("SVGPathSegMovetoRel", $.PathSegMovetoRel);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPoint", $.Point0);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGPreserveAspectRatio", $.PreserveAspectRatio);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect0);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGRenderingIntent", $.RenderingIntent);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStringList", $.StringList);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGTransform", $.Transform);

$.defineNativeMethods("SVGTransformList", $.TransformList);

$.defineNativeMethods("SVGUnitTypes", $.UnitTypes);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGViewSpec", $.ViewSpec);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGElementInstanceList", $._ElementInstanceList);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethods("SVGColor", $._SVGColor);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AnalyserNode", $.AnalyserNode);

$.defineNativeMethods("AudioBuffer", $.AudioBuffer);

$.defineNativeMethods("AudioBufferSourceNode", $.AudioBufferSourceNode);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethods("AudioListener", $.AudioListener);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioParam", $.AudioParam);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("BiquadFilterNode", $.BiquadFilterNode);

$.defineNativeMethods("ChannelMergerNode", $.ChannelMergerNode);

$.defineNativeMethods("ChannelSplitterNode", $.ChannelSplitterNode);

$.defineNativeMethods("ConvolverNode", $.ConvolverNode);

$.defineNativeMethods("DelayNode", $.DelayNode);

$.defineNativeMethods("DynamicsCompressorNode", $.DynamicsCompressorNode);

$.defineNativeMethods("GainNode", $.GainNode);

$.defineNativeMethods("MediaElementAudioSourceNode", $.MediaElementAudioSourceNode);

$.defineNativeMethods("MediaStreamAudioDestinationNode", $.MediaStreamAudioDestinationNode);

$.defineNativeMethods("MediaStreamAudioSourceNode", $.MediaStreamAudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("PannerNode", $.PannerNode);

$.defineNativeMethods("ScriptProcessorNode", $.ScriptProcessorNode);

$.defineNativeMethods("WaveShaperNode", $.WaveShaperNode);

$.defineNativeMethods("WaveTable", $.WaveTable);

$.defineNativeMethods("WebGLActiveInfo", $.ActiveInfo);

$.defineNativeMethods("WebGLBuffer", $.Buffer);

$.defineNativeMethods("WebGLCompressedTextureATC", $.CompressedTextureAtc);

$.defineNativeMethods("WebGLCompressedTexturePVRTC", $.CompressedTexturePvrtc);

$.defineNativeMethods("WebGLCompressedTextureS3TC", $.CompressedTextureS3TC);

$.defineNativeMethods("WebGLContextAttributes", $.ContextAttributes);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLDebugRendererInfo", $.DebugRendererInfo);

$.defineNativeMethods("WebGLDebugShaders", $.DebugShaders);

$.defineNativeMethods("WebGLDepthTexture", $.DepthTexture);

$.defineNativeMethods("EXTDrawBuffers", $.ExtDrawBuffers);

$.defineNativeMethods("EXTTextureFilterAnisotropic", $.ExtTextureFilterAnisotropic);

$.defineNativeMethods("WebGLFramebuffer", $.Framebuffer);

$.defineNativeMethods("WebGLLoseContext", $.LoseContext);

$.defineNativeMethods("OESElementIndexUint", $.OesElementIndexUint);

$.defineNativeMethods("OESStandardDerivatives", $.OesStandardDerivatives);

$.defineNativeMethods("OESTextureFloat", $.OesTextureFloat);

$.defineNativeMethods("OESTextureHalfFloat", $.OesTextureHalfFloat);

$.defineNativeMethods("OESVertexArrayObject", $.OesVertexArrayObject);

$.defineNativeMethods("WebGLProgram", $.Program);

$.defineNativeMethods("WebGLRenderbuffer", $.Renderbuffer);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("WebGLShader", $.Shader);

$.defineNativeMethods("WebGLShaderPrecisionFormat", $.ShaderPrecisionFormat);

$.defineNativeMethods("WebGLTexture", $.Texture);

$.defineNativeMethods("WebGLUniformLocation", $.UniformLocation);

$.defineNativeMethods("WebGLVertexArrayObjectOES", $.VertexArrayObject);

$.defineNativeMethods("Database", $.SqlDatabase);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("SQLResultSet", $.SqlResultSet);

$.defineNativeMethods("SQLResultSetRowList", $.SqlResultSetRowList);

$.defineNativeMethods("SQLTransaction", $.SqlTransaction);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    var objectClassObject = collectedClasses.Object, shortNames = "_f$1,get$p,_all$0,call$0,call$1,call$2,call$3,call$4,call$5,call$6,eval$1,get$am,get$bm,get$dm,get$pm,get$vm,then$1,_save$2,_test$1,added$1,begin$0,get$KEY,get$_db,get$_id,get$all,get$bit,get$one,set$_db,get$_key,get$desc,get$maxX,get$maxY,get$minX,get$minY,listen$1,lookup$1,resume$0,_action$0,_cancel$1,_onData$1,_onDone$0,changed$1,cleanup$0,deleted$1,enqueue$3,get$_name,get$_next,get$_port,get$delta,get$hover,get$score,get$stack,get$store,get$world,nextInt$1,perform$1,process$0,set$_next,set$hover,set$score,_handler$0,_onError$1,_onValue$1,_removed$0,addError$1,get$_state,get$_value,get$amount,get$future,get$isOpen,get$radius,get$resume,get$waited,makeClip$2,moveNext$0,nextBool$0,set$_state,set$_value,visitMap$1,_callback$2,_dispatch$1,_getByKey$1,_onDecode$2,_schedule$0,_sendData$1,_sendDone$0,_setError$1,_setValue$1,addSystem$1,forTarget$1,get$_buffer,get$_canvas,get$_mobile,get$_paused,get$current,get$inHours,get$passive,get$running,set$_buffer,set$_handle,set$_isOpen,set$current,set$running,visitList$1,_doCommand$1,_sendError$1,_sendValue$1,_transform$1,addToWorld$0,catchError$1,get$_context,get$_handler,get$_manager,get$capacity,get$clipName,get$excluded,get$gameLoop,get$isGetter,get$isPaused,get$isSetter,get$isWorker,handleNext$1,makeSource$1,nextDouble$0,playOnceIn$2,set$lastTime,set$mousePos,toSendPort$0,unregister$1,_handleData$2,_setGlobals$0,clickAction$1,get$_callback,get$_canceled,get$_duration,get$_endIndex,get$_hasError,get$_hasValue,get$_isFiring,get$_isPaused,get$_previous,get$_setError,get$_setValue,get$_typeBits,get$_workerId,get$gameState,get$inMinutes,get$inSeconds,get$storeName,hoverAction$0,isColliding$4,set$_previous,set$_typeBits,set$highScore,wrappedText$4,_addListener$1,_generateMap$0,addComponent$1,createEntity$0,get$_isolateId,get$horizontal,get$hoverStart,get$isAccessor,get$isFinished,get$useWorkers,playLoopedIn$2,runIteration$0,set$hoverStart,set$positional,whenComplete$1,_addSystemBit$1,_checkReplyTo$1,completeError$1,get$_futurePort,get$_handleData,get$_handleDone,get$_isComplete,get$_isInactive,get$_startIndex,get$_systemBits,get$hasListener,get$initNotPong,get$isMultiLine,get$isScheduled,get$maxVelocity,get$wrongButton,maybeSchedule$0,processEntity$1,processSystem$0,set$wrongButton,visitSendPort$1,_liblib2$_keys$0,get$_handleError,get$_hasListener,get$_managersBag,get$_receivePort,get$_systemsList,get$initBreakout,get$initWaitGame,get$topEventLoop,set$_errorString,textBoundaries$1,textBoundaries$2,visitPrimitive$1,checkProcessing$0,deleteFromWorld$0,get$_isInCallback,get$_isSubscribed,get$_mayFireState,get$_nextListener,get$entityManager,get$initDodgeball,get$initMultiPong,get$nextIsolateId,processEntities$1,set$_nextListener,set$nextIsolateId,set$scheduleTimer,visitCloseToken$1,_liblib3$_resume$2,_removeSystemBit$1,_setUnsubscribed$0,get$_handleMessage,get$_isInputPaused,get$currentContext,get$inMicroseconds,get$inMilliseconds,get$namedArguments,set$_isReadyToPlay,visitIsolateSink$1,_onRequestSuccess$2,achievementEarned$0,get$_handleMutation,get$isCaseSensitive,_forEachSubscriber$1,_liblib1$_callback$0,get$_entitiesByGroup,get$_handleImmediate,get$_hasPendingEvent,get$achievementCount,get$activeTimerCount,get$componentManager,playClipFromSource$2,set$activeTimerCount,_createSubscription$4,_onPauseStateChange$0,deserializeSendPort$1,get$_hasPendingResume,get$needSerialization,isIndexWithinBounds$1,get$_hasUnhandledError,get$_liblib3$_isClosed,get$_resultOrListeners,set$_liblib4$_hasError,deserializeCloseToken$1,get$positionalArguments,deserializeIsolateSink$1,get$wrongPositionClicked,_removeComponentsOfEntity$1,_onSubscriptionStateChange$0".split(","), longNames = "_f,p,_all,call,call,call,call,call,call,call,eval,am,bm,dm,pm,vm,then,_save,_test,added,begin,KEY,_db,_id,all,bit,one,_db=,_key,desc,maxX,maxY,minX,minY,listen,lookup,resume,_action,_cancel,_onData,_onDone,changed,cleanup,deleted,enqueue,_name,_next,_port,delta,hover,score,stack,store,world,nextInt,perform,process,_next=,hover=,score=,_handler,_onError,_onValue,_removed,addError,_state,_value,amount,future,isOpen,radius,resume,waited,makeClip,moveNext,nextBool,_state=,_value=,visitMap,_callback,_dispatch,_getByKey,_onDecode,_schedule,_sendData,_sendDone,_setError,_setValue,addSystem,forTarget,_buffer,_canvas,_mobile,_paused,current,inHours,passive,running,_buffer=,_handle=,_isOpen=,current=,running=,visitList,_doCommand,_sendError,_sendValue,_transform,addToWorld,catchError,_context,_handler,_manager,capacity,clipName,excluded,gameLoop,isGetter,isPaused,isSetter,isWorker,handleNext,makeSource,nextDouble,playOnceIn,lastTime=,mousePos=,toSendPort,unregister,_handleData,_setGlobals,clickAction,_callback,_canceled,_duration,_endIndex,_hasError,_hasValue,_isFiring,_isPaused,_previous,_setError,_setValue,_typeBits,_workerId,gameState,inMinutes,inSeconds,storeName,hoverAction,isColliding,_previous=,_typeBits=,highScore=,wrappedText,_addListener,_generateMap,addComponent,createEntity,_isolateId,horizontal,hoverStart,isAccessor,isFinished,useWorkers,playLoopedIn,runIteration,hoverStart=,positional=,whenComplete,_addSystemBit,_checkReplyTo,completeError,_futurePort,_handleData,_handleDone,_isComplete,_isInactive,_startIndex,_systemBits,hasListener,initNotPong,isMultiLine,isScheduled,maxVelocity,wrongButton,maybeSchedule,processEntity,processSystem,wrongButton=,visitSendPort,_keys,_handleError,_hasListener,_managersBag,_receivePort,_systemsList,initBreakout,initWaitGame,topEventLoop,_errorString=,textBoundaries,textBoundaries,visitPrimitive,checkProcessing,deleteFromWorld,_isInCallback,_isSubscribed,_mayFireState,_nextListener,entityManager,initDodgeball,initMultiPong,nextIsolateId,processEntities,_nextListener=,nextIsolateId=,scheduleTimer=,visitCloseToken,_resume,_removeSystemBit,_setUnsubscribed,_handleMessage,_isInputPaused,currentContext,inMicroseconds,inMilliseconds,namedArguments,_isReadyToPlay=,visitIsolateSink,_onRequestSuccess,achievementEarned,_handleMutation,isCaseSensitive,_forEachSubscriber,_callback,_entitiesByGroup,_handleImmediate,_hasPendingEvent,achievementCount,activeTimerCount,componentManager,playClipFromSource,activeTimerCount=,_createSubscription,_onPauseStateChange,deserializeSendPort,_hasPendingResume,needSerialization,isIndexWithinBounds,_hasUnhandledError,_isClosed,_resultOrListeners,_hasError=,deserializeCloseToken,positionalArguments,deserializeIsolateSink,wrongPositionClicked,_removeComponentsOfEntity,_onSubscriptionStateChange".split(",");
    for (var j = 0; j < shortNames.length; j++) {
      var type = 0;
      var short = shortNames[j];
      if (short[0] == "g")
        type = 1;
      if (short[0] == "s")
        type = 2;
      objectClassObject[short] = Function("return this.noSuchMethod$1(this,$.createInvocationMirror('" + longNames[j] + "','" + short + "'," + type + ",Array.prototype.slice.call(arguments" + "),[]))");
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=ld26_minimalism.dart.js.map
